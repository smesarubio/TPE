
;; Function newQuery (newQuery, funcdef_no=0, decl_uid=3374, cgraph_uid=1, symbol_order=0)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 9 n_edges 8 count 9 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;; 2 succs { 3 4 }
;; 3 succs { }
;; 4 succs { 6 5 }
;; 5 succs { }
;; 6 succs { 8 7 }
;; 7 succs { }
;; 8 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 51.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a19 (r96,l0) best AREG, allocno GENERAL_REGS
    r95: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r95,l0) best AREG, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r90,l0) best DIREG, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r85,l0) best DIREG, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r95,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a1(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a2(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r90,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a5(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a6(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a7(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a8(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a9(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a10(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a11(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r85,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a14(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a15(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a16(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a17(r86,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a18(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a19(r96,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000

   Insn 66(l0): point = 0
   Insn 65(l0): point = 2
   Insn 61(l0): point = 4
   Insn 58(l0): point = 6
   Insn 57(l0): point = 8
   Insn 56(l0): point = 10
   Insn 55(l0): point = 12
   Insn 51(l0): point = 15
   Insn 50(l0): point = 17
   Insn 48(l0): point = 20
   Insn 47(l0): point = 22
   Insn 46(l0): point = 24
   Insn 45(l0): point = 26
   Insn 44(l0): point = 28
   Insn 43(l0): point = 30
   Insn 42(l0): point = 32
   Insn 41(l0): point = 34
   Insn 40(l0): point = 36
   Insn 39(l0): point = 38
   Insn 38(l0): point = 40
   Insn 37(l0): point = 42
   Insn 33(l0): point = 45
   Insn 32(l0): point = 47
   Insn 30(l0): point = 50
   Insn 29(l0): point = 52
   Insn 28(l0): point = 54
   Insn 27(l0): point = 56
   Insn 26(l0): point = 58
   Insn 25(l0): point = 60
   Insn 24(l0): point = 62
   Insn 23(l0): point = 64
   Insn 19(l0): point = 67
   Insn 18(l0): point = 69
   Insn 17(l0): point = 71
   Insn 16(l0): point = 73
   Insn 15(l0): point = 75
   Insn 13(l0): point = 78
   Insn 12(l0): point = 80
   Insn 11(l0): point = 82
   Insn 10(l0): point = 84
   Insn 9(l0): point = 86
   Insn 8(l0): point = 88
   Insn 7(l0): point = 90
   Insn 3(l0): point = 92
   Insn 2(l0): point = 94
 a0(r95): [3..4]
 a1(r82): [5..6]
 a2(r100): [9..12]
 a3(r101): [9..10]
 a4(r90): [18..32]
 a5(r94): [23..24]
 a6(r93): [25..26]
 a7(r92): [27..28]
 a8(r91): [29..30]
 a9(r84): [33..34]
 a10(r99): [35..36]
 a11(r97): [39..42]
 a12(r98): [39..40]
 a13(r85): [48..62]
 a14(r89): [53..54]
 a15(r88): [55..56]
 a16(r87): [57..58]
 a17(r86): [59..60]
 a18(r83): [63..64]
 a19(r96): [83..84]
Compressing live ranges: from 97 to 32 - 32%
Ranges after the compression:
 a0(r95): [0..1]
 a1(r82): [2..3]
 a2(r100): [4..5]
 a3(r101): [4..5]
 a4(r90): [6..13]
 a5(r94): [6..7]
 a6(r93): [8..9]
 a7(r92): [10..11]
 a8(r91): [12..13]
 a9(r84): [14..15]
 a10(r99): [16..17]
 a11(r97): [18..19]
 a12(r98): [18..19]
 a13(r85): [20..27]
 a14(r89): [20..21]
 a15(r88): [22..23]
 a16(r87): [24..25]
 a17(r86): [26..27]
 a18(r83): [28..29]
 a19(r96): [30..31]
  pref0:a19(r96)<-hr0@1500
  pref1:a0(r95)<-hr0@1500
  pref2:a4(r90)<-hr5@1500
  pref3:a13(r85)<-hr5@1500
  regions=1, blocks=9, points=32
    allocnos=20 (big 0), copies=0, conflicts=0, ranges=20
Disposition:
    1:r82  l0     0   18:r83  l0     0    9:r84  l0     0   13:r85  l0     0
   17:r86  l0     1   16:r87  l0     1   15:r88  l0     1   14:r89  l0     1
    4:r90  l0     0    8:r91  l0     1    7:r92  l0     1    6:r93  l0     1
    5:r94  l0     1    0:r95  l0     0   19:r96  l0     0   11:r97  l0     0
   12:r98  l0     1   10:r99  l0     0    2:r100 l0     0    3:r101 l0     1
+++Costs: overall 4000, reg 4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


newQuery

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={8d,3u} r1={7d} r2={7d} r4={8d,2u} r5={12d,6u} r6={1d,8u} r7={1d,14u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r16={1d,7u} r17={14d,3u} r18={6d} r19={1d,19u,1e} r20={7d} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={7d} r37={7d} r38={6d} r39={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,2u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,2u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} 
;;    total ref usage 541{456d,84u,1e} in 45{39 regular + 6 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 96
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 yearFrom+0 S8 A64])
        (reg:DI 5 di [ yearFrom ])) "queryTAD.c":13:50 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ yearFrom ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 yearTo+0 S8 A64])
        (reg:DI 4 si [ yearTo ])) "queryTAD.c":13:50 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ yearTo ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 4 si)
        (const_int 40 [0x28])) "queryTAD.c":14:18 66 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (const_int 1 [0x1])) "queryTAD.c":14:18 66 {*movdi_internal}
     (nil))
(call_insn 9 8 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("calloc") [flags 0x41]  <function_decl 0x7fc58ee76d00 calloc>) [0 __builtin_calloc S1 A8])
            (const_int 0 [0]))) "queryTAD.c":14:18 677 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 10 9 11 2 (set (reg/f:DI 96)
        (reg:DI 0 ax)) "queryTAD.c":14:18 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 96)
            (nil))))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])
        (reg/f:DI 96)) "queryTAD.c":14:18 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96)
        (nil)))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])
            (const_int 0 [0]))) "queryTAD.c":15:8 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "queryTAD.c":15:8 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 21)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fc58ec2dcf0 *.LC0>)) "queryTAD.c":16:9 66 {*movdi_internal}
     (nil))
(call_insn 16 15 17 3 (call (mem:QI (symbol_ref:DI ("perror") [flags 0x41]  <function_decl 0x7fc58ef5f500 perror>) [0 perror S1 A8])
        (const_int 0 [0])) "queryTAD.c":16:9 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 17 16 18 3 (call (mem:QI (symbol_ref:DI ("__asan_handle_no_return") [flags 0x41]  <function_decl 0x7fc58eead800 __builtin___asan_handle_no_return>) [0 __builtin___asan_handle_no_return S1 A8])
        (const_int 0 [0])) "queryTAD.c":17:9 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 18 17 19 3 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "queryTAD.c":17:9 67 {*movsi_internal}
     (nil))
(call_insn 19 18 20 3 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fc58ee7c900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) "queryTAD.c":17:9 666 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 20 19 21)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 83 85 86 87 88 89
(code_label 21 20 22 4 2 (nil) [1 uses])
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (reg/f:DI 83 [ _11 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])) "queryTAD.c":19:17 66 {*movdi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:DI 85 [ _16 ])
        (reg/f:DI 83 [ _11 ])) "queryTAD.c":19:17 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 83 [ _11 ])
        (nil)))
(insn 25 24 26 4 (parallel [
            (set (reg:DI 86 [ _17 ])
                (lshiftrt:DI (reg:DI 85 [ _16 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":19:17 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 26 25 27 4 (parallel [
            (set (reg:DI 87 [ _18 ])
                (plus:DI (reg:DI 86 [ _17 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":19:17 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 86 [ _17 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 27 26 28 4 (set (reg/f:DI 88 [ _19 ])
        (reg:DI 87 [ _18 ])) "queryTAD.c":19:17 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 87 [ _18 ])
        (nil)))
(insn 28 27 29 4 (set (reg:QI 89 [ _20 ])
        (mem:QI (reg/f:DI 88 [ _19 ]) [10 *_19+0 S1 A8])) "queryTAD.c":19:17 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88 [ _19 ])
        (nil)))
(insn 29 28 30 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 89 [ _20 ])
            (const_int 0 [0]))) "queryTAD.c":19:17 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 89 [ _20 ])
        (nil)))
(jump_insn 30 29 31 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) "queryTAD.c":19:17 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 35)
;;  succ:       6 [100.0% (guessed)] 
;;              5 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 [0.0% (guessed)]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 5 (set (reg:DI 5 di)
        (reg:DI 85 [ _16 ])) "queryTAD.c":19:17 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 85 [ _16 ])
        (nil)))
(call_insn 33 32 34 5 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":19:17 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 34 33 35)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4 [100.0% (guessed)] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 84 90 91 92 93 94 97 98 99
(code_label 35 34 36 6 3 (nil) [1 uses])
(note 36 35 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 6 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])) "queryTAD.c":19:17 66 {*movdi_internal}
     (nil))
(insn 38 37 39 6 (set (reg:DI 98)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 yearFrom+0 S8 A64])) "queryTAD.c":19:17 66 {*movdi_internal}
     (nil))
(insn 39 38 40 6 (set (mem:DI (reg/f:DI 97) [2 q_3->yearFrom+0 S8 A64])
        (reg:DI 98)) "queryTAD.c":19:17 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 98)
        (expr_list:REG_DEAD (reg/f:DI 97)
            (nil))))
(insn 40 39 41 6 (set (reg/f:DI 99)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])) "queryTAD.c":20:15 66 {*movdi_internal}
     (nil))
(insn 41 40 42 6 (parallel [
            (set (reg/f:DI 84 [ _12 ])
                (plus:DI (reg/f:DI 99)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":20:15 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 99)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 42 41 43 6 (set (reg:DI 90 [ _21 ])
        (reg/f:DI 84 [ _12 ])) "queryTAD.c":20:15 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 84 [ _12 ])
        (nil)))
(insn 43 42 44 6 (parallel [
            (set (reg:DI 91 [ _22 ])
                (lshiftrt:DI (reg:DI 90 [ _21 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":20:15 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 44 43 45 6 (parallel [
            (set (reg:DI 92 [ _23 ])
                (plus:DI (reg:DI 91 [ _22 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":20:15 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 91 [ _22 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 45 44 46 6 (set (reg/f:DI 93 [ _24 ])
        (reg:DI 92 [ _23 ])) "queryTAD.c":20:15 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 92 [ _23 ])
        (nil)))
(insn 46 45 47 6 (set (reg:QI 94 [ _25 ])
        (mem:QI (reg/f:DI 93 [ _24 ]) [10 *_24+0 S1 A8])) "queryTAD.c":20:15 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93 [ _24 ])
        (nil)))
(insn 47 46 48 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 94 [ _25 ])
            (const_int 0 [0]))) "queryTAD.c":20:15 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 94 [ _25 ])
        (nil)))
(jump_insn 48 47 49 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) "queryTAD.c":20:15 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 53)
;;  succ:       8 [100.0% (guessed)] 
;;              7 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 90

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 [0.0% (guessed)]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 90
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 90
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 49 48 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 7 (set (reg:DI 5 di)
        (reg:DI 90 [ _21 ])) "queryTAD.c":20:15 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 90 [ _21 ])
        (nil)))
(call_insn 51 50 52 7 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":20:15 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 52 51 53)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL)
;;  pred:       6 [100.0% (guessed)] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 82 95 100 101
(code_label 53 52 54 8 4 (nil) [1 uses])
(note 54 53 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 8 (set (reg/f:DI 100)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])) "queryTAD.c":20:15 66 {*movdi_internal}
     (nil))
(insn 56 55 57 8 (set (reg:DI 101)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 yearTo+0 S8 A64])) "queryTAD.c":20:15 66 {*movdi_internal}
     (nil))
(insn 57 56 58 8 (set (mem:DI (plus:DI (reg/f:DI 100)
                (const_int 8 [0x8])) [2 q_3->yearTo+0 S8 A64])
        (reg:DI 101)) "queryTAD.c":20:15 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 101)
        (expr_list:REG_DEAD (reg/f:DI 100)
            (nil))))
(insn 58 57 61 8 (set (reg/f:DI 82 [ _8 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])) "queryTAD.c":21:12 66 {*movdi_internal}
     (nil))
(insn 61 58 65 8 (set (reg/f:DI 95 [ <retval> ])
        (reg/f:DI 82 [ _8 ])) "queryTAD.c":21:12 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 82 [ _8 ])
        (nil)))
(insn 65 61 66 8 (set (reg/i:DI 0 ax)
        (reg/f:DI 95 [ <retval> ])) "queryTAD.c":22:1 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95 [ <retval> ])
        (nil)))
(insn 66 65 0 8 (use (reg/i:DI 0 ax)) "queryTAD.c":22:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function insertVector (insertVector, funcdef_no=1, decl_uid=3364, cgraph_uid=2, symbol_order=1)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 5 count 6 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 4 3 }
;; 3 succs { }
;; 4 succs { 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 18.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r83,l0) best DIREG, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a2(r83,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a3(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a4(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a5(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a6(r84,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a7(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a8(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000

   Insn 28(l0): point = 0
   Insn 24(l0): point = 3
   Insn 23(l0): point = 5
   Insn 22(l0): point = 7
   Insn 18(l0): point = 10
   Insn 17(l0): point = 12
   Insn 15(l0): point = 15
   Insn 14(l0): point = 17
   Insn 13(l0): point = 19
   Insn 12(l0): point = 21
   Insn 11(l0): point = 23
   Insn 10(l0): point = 25
   Insn 9(l0): point = 27
   Insn 8(l0): point = 29
   Insn 7(l0): point = 31
   Insn 3(l0): point = 33
   Insn 2(l0): point = 35
 a0(r89): [4..7]
 a1(r90): [4..5]
 a2(r83): [13..27]
 a3(r87): [18..19]
 a4(r86): [20..21]
 a5(r85): [22..23]
 a6(r84): [24..25]
 a7(r82): [28..29]
 a8(r88): [30..31]
Compressing live ranges: from 38 to 14 - 36%
Ranges after the compression:
 a0(r89): [0..1]
 a1(r90): [0..1]
 a2(r83): [2..9]
 a3(r87): [2..3]
 a4(r86): [4..5]
 a5(r85): [6..7]
 a6(r84): [8..9]
 a7(r82): [10..11]
 a8(r88): [12..13]
  pref0:a2(r83)<-hr5@1500
  regions=1, blocks=6, points=14
    allocnos=9 (big 0), copies=0, conflicts=0, ranges=9
Disposition:
    7:r82  l0     0    2:r83  l0     0    6:r84  l0     1    5:r85  l0     1
    4:r86  l0     1    3:r87  l0     1    8:r88  l0     0    0:r89  l0     0
    1:r90  l0     1
+++Costs: overall 3000, reg 3000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


insertVector

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d,1u} r5={3d,2u} r6={1d,5u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,4u} r17={5d,1u} r18={1d} r19={1d,10u,1e} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r82={1d,1u} r83={1d,2u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} 
;;    total ref usage 140{100d,39u,1e} in 17{16 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 83 84 85 86 87 88
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])
        (reg:DI 5 di [ q ])) "queryTAD.c":24:45 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ q ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [7 vec+0 S8 A64])
        (reg:DI 4 si [ vec ])) "queryTAD.c":24:45 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ vec ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])) "queryTAD.c":25:18 66 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg/f:DI 82 [ _5 ])
                (plus:DI (reg/f:DI 88)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":25:18 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 88)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])
                    (const_int 24 [0x18]))
                (nil)))))
(insn 9 8 10 2 (set (reg:DI 83 [ _7 ])
        (reg/f:DI 82 [ _5 ])) "queryTAD.c":25:18 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 82 [ _5 ])
        (nil)))
(insn 10 9 11 2 (parallel [
            (set (reg:DI 84 [ _8 ])
                (lshiftrt:DI (reg:DI 83 [ _7 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":25:18 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 11 10 12 2 (parallel [
            (set (reg:DI 85 [ _9 ])
                (plus:DI (reg:DI 84 [ _8 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":25:18 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 84 [ _8 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 12 11 13 2 (set (reg/f:DI 86 [ _10 ])
        (reg:DI 85 [ _9 ])) "queryTAD.c":25:18 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 85 [ _9 ])
        (nil)))
(insn 13 12 14 2 (set (reg:QI 87 [ _11 ])
        (mem:QI (reg/f:DI 86 [ _10 ]) [10 *_10+0 S1 A8])) "queryTAD.c":25:18 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 86 [ _10 ])
        (nil)))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 87 [ _11 ])
            (const_int 0 [0]))) "queryTAD.c":25:18 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 87 [ _11 ])
        (nil)))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "queryTAD.c":25:18 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 20)
;;  succ:       4 [100.0% (guessed)] 
;;              3 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [0.0% (guessed)]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:DI 5 di)
        (reg:DI 83 [ _7 ])) "queryTAD.c":25:18 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 83 [ _7 ])
        (nil)))
(call_insn 18 17 19 3 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":25:18 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 19 18 20)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2 [100.0% (guessed)] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 89 90
(code_label 20 19 21 4 7 (nil) [1 uses])
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])) "queryTAD.c":25:18 66 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [7 vec+0 S8 A64])) "queryTAD.c":25:18 66 {*movdi_internal}
     (nil))
(insn 24 23 27 4 (set (mem/f:DI (plus:DI (reg/f:DI 89)
                (const_int 24 [0x18])) [7 q_2(D)->sensorsID+0 S8 A64])
        (reg/f:DI 90)) "queryTAD.c":25:18 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90)
        (expr_list:REG_DEAD (reg/f:DI 89)
            (nil))))
;;  succ:       5 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 [always]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 27 24 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 0 5 (const_int 0 [0]) "queryTAD.c":31:1 696 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function dayToNum (dayToNum, funcdef_no=2, decl_uid=3366, cgraph_uid=3, symbol_order=2)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 9 n_edges 10 count 9 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;; 2 succs { 4 3 }
;; 3 succs { }
;; 4 succs { 6 5 }
;; 5 succs { 6 7 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 22.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r96,l0) best AREG, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r86,l0) best DIREG, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r96,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a1(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a2(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:412000 MEM:7000
  a3(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a4(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a6(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r86,l0) costs: AREG:6000 DREG:6000 CREG:6000 BREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 CLOBBERED_REGS:6000 Q_REGS:6000 TLS_GOTBASE_REGS:6000 GENERAL_REGS:6000 SSE_FIRST_REG:36000 NO_REX_SSE_REGS:36000 SSE_REGS:36000 MMX_REGS:55000 INT_SSE_REGS:55000 ALL_REGS:746000 MEM:26000
  a8(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a9(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a10(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a11(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:17000
  a12(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:6000
  a13(r92,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:8000
  a14(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a15(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a16(r87,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000

   Insn 53(l0): point = 0
   Insn 52(l0): point = 2
   Insn 48(l0): point = 4
   Insn 45(l0): point = 6
   Insn 42(l0): point = 9
   Insn 55(l0): point = 12
   Insn 37(l0): point = 14
   Insn 34(l0): point = 17
   Insn 33(l0): point = 19
   Insn 32(l0): point = 21
   Insn 31(l0): point = 23
   Insn 29(l0): point = 26
   Insn 28(l0): point = 28
   Insn 27(l0): point = 30
   Insn 26(l0): point = 32
   Insn 22(l0): point = 35
   Insn 21(l0): point = 37
   Insn 19(l0): point = 40
   Insn 18(l0): point = 42
   Insn 17(l0): point = 44
   Insn 16(l0): point = 46
   Insn 15(l0): point = 48
   Insn 14(l0): point = 50
   Insn 13(l0): point = 52
   Insn 12(l0): point = 54
   Insn 11(l0): point = 56
   Insn 10(l0): point = 58
   Insn 9(l0): point = 60
   Insn 8(l0): point = 62
   Insn 7(l0): point = 64
   Insn 6(l0): point = 66
   Insn 2(l0): point = 68
 a0(r96): [3..4]
 a1(r85): [5..6]
 a2(r84): [12..14] [7..9]
 a3(r83): [20..21]
 a4(r98): [22..23]
 a5(r82): [29..30]
 a6(r97): [31..32]
 a7(r86): [38..66]
 a8(r95): [43..44]
 a9(r94): [45..46]
 a10(r91): [45..54]
 a11(r90): [49..58]
 a12(r93): [49..50]
 a13(r92): [51..52]
 a14(r89): [59..60]
 a15(r88): [61..62]
 a16(r87): [63..64]
Compressing live ranges: from 71 to 30 - 42%
Ranges after the compression:
 a0(r96): [0..1]
 a1(r85): [2..3]
 a2(r84): [4..7]
 a3(r83): [8..9]
 a4(r98): [10..11]
 a5(r82): [12..13]
 a6(r97): [14..15]
 a7(r86): [16..29]
 a8(r95): [16..17]
 a9(r94): [18..19]
 a10(r91): [18..23]
 a11(r90): [20..23]
 a12(r93): [20..21]
 a13(r92): [22..23]
 a14(r89): [24..25]
 a15(r88): [26..27]
 a16(r87): [28..29]
  pref0:a0(r96)<-hr0@1500
  pref1:a7(r86)<-hr5@1500
  regions=1, blocks=9, points=30
    allocnos=17 (big 0), copies=0, conflicts=0, ranges=17
Disposition:
    5:r82  l0     0    3:r83  l0     0    2:r84  l0     0    1:r85  l0     0
    7:r86  l0     0   16:r87  l0     1   15:r88  l0     1   14:r89  l0     1
   11:r90  l0     1   10:r91  l0     2   13:r92  l0     4   12:r93  l0     4
    9:r94  l0     1    8:r95  l0     1    0:r96  l0     0    6:r97  l0     0
    4:r98  l0     0
+++Costs: overall 6000, reg 6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


dayToNum

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={3d,2u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,8u} r7={1d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,7u} r17={10d,5u} r18={1d} r19={1d,12u} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r82={1d,1u} r83={1d,1u} r84={2d,1u} r85={1d,1u} r86={1d,3u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,2u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} 
;;    total ref usage 180{115d,65u,0e} in 32{31 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 86 87 88 89 90 91 92 93 94 95
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 s+0 S8 A64])
        (reg:DI 5 di [ s ])) "queryTAD.c":34:26 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ s ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 86 [ _10 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 s+0 S8 A64])) "queryTAD.c":35:13 66 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (parallel [
            (set (reg:DI 87 [ _11 ])
                (lshiftrt:DI (reg:DI 86 [ _10 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":35:13 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 8 7 9 2 (parallel [
            (set (reg:DI 88 [ _12 ])
                (plus:DI (reg:DI 87 [ _11 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":35:13 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 87 [ _11 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 9 8 10 2 (set (reg/f:DI 89 [ _13 ])
        (reg:DI 88 [ _12 ])) "queryTAD.c":35:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 88 [ _12 ])
        (nil)))
(insn 10 9 11 2 (set (reg:QI 90 [ _14 ])
        (mem:QI (reg/f:DI 89 [ _13 ]) [10 *_13+0 S1 A8])) "queryTAD.c":35:13 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 89 [ _13 ])
        (nil)))
(insn 11 10 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 90 [ _14 ])
            (const_int 0 [0]))) "queryTAD.c":35:13 5 {*cmpqi_ccno_1}
     (nil))
(insn 12 11 13 2 (set (reg:QI 91 [ _15 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "queryTAD.c":35:13 655 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 92 [ _16 ])
                (and:DI (reg:DI 86 [ _10 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":35:13 391 {*anddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 14 13 15 2 (set (reg:QI 93 [ _17 ])
        (subreg:QI (reg:DI 92 [ _16 ]) 0)) "queryTAD.c":35:13 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 92 [ _16 ])
        (nil)))
(insn 15 14 16 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:QI 93 [ _17 ])
            (reg:QI 90 [ _14 ]))) "queryTAD.c":35:13 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 93 [ _17 ])
        (expr_list:REG_DEAD (reg:QI 90 [ _14 ])
            (nil))))
(insn 16 15 17 2 (set (reg:QI 94 [ _18 ])
        (ge:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "queryTAD.c":35:13 655 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 17 16 18 2 (parallel [
            (set (reg:QI 95 [ _19 ])
                (and:QI (reg:QI 91 [ _15 ])
                    (reg:QI 94 [ _18 ])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":35:13 396 {*andqi_1}
     (expr_list:REG_DEAD (reg:QI 94 [ _18 ])
        (expr_list:REG_DEAD (reg:QI 91 [ _15 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 18 17 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 95 [ _19 ])
            (const_int 0 [0]))) "queryTAD.c":35:13 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 95 [ _19 ])
        (nil)))
(jump_insn 19 18 20 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) "queryTAD.c":35:13 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 24)
;;  succ:       4 [100.0% (guessed)] 
;;              3 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [0.0% (guessed)]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (set (reg:DI 5 di)
        (reg:DI 86 [ _10 ])) "queryTAD.c":35:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 86 [ _10 ])
        (nil)))
(call_insn 22 21 23 3 (call (mem:QI (symbol_ref:DI ("__asan_report_load1") [flags 0x41]  <function_decl 0x7fc58eea5600 __builtin___asan_report_load1>) [0 __builtin___asan_report_load1 S1 A8])
        (const_int 0 [0])) "queryTAD.c":35:13 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 23 22 24)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2 [100.0% (guessed)] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 97
(code_label 24 23 25 4 9 (nil) [1 uses])
(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 4 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 s+0 S8 A64])) "queryTAD.c":35:13 66 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:QI 82 [ _1 ])
        (mem:QI (reg/f:DI 97) [0 *s_5(D)+0 S1 A8])) "queryTAD.c":35:13 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97)
        (nil)))
(insn 28 27 29 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 82 [ _1 ])
            (const_int 83 [0x53]))) "queryTAD.c":35:24 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 82 [ _1 ])
        (nil)))
(jump_insn 29 28 30 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) "queryTAD.c":35:24 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 35)
;;  succ:       6
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 83 98
(note 30 29 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 5 (set (reg/f:DI 98)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 s+0 S8 A64])) "queryTAD.c":35:28 66 {*movdi_internal}
     (nil))
(insn 32 31 33 5 (set (reg:QI 83 [ _2 ])
        (mem:QI (reg/f:DI 98) [0 *s_5(D)+0 S1 A8])) "queryTAD.c":35:28 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 98)
        (nil)))
(insn 33 32 34 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 83 [ _2 ])
            (const_int 115 [0x73]))) "queryTAD.c":35:24 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 83 [ _2 ])
        (nil)))
(jump_insn 34 33 35 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) "queryTAD.c":35:24 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 40)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 84
(code_label 35 34 36 6 10 (nil) [1 uses])
(note 36 35 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 55 6 (set (reg:SI 84 [ iftmp.0_3 ])
        (const_int 1 [0x1])) "queryTAD.c":35:24 67 {*movsi_internal}
     (nil))
(jump_insn 55 37 56 6 (set (pc)
        (label_ref 43)) "queryTAD.c":35:24 660 {jump}
     (nil)
 -> 43)
;;  succ:       8 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84

(barrier 56 55 40)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 84
(code_label 40 56 41 7 11 (nil) [1 uses])
(note 41 40 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 7 (set (reg:SI 84 [ iftmp.0_3 ])
        (const_int 0 [0])) "queryTAD.c":35:24 67 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;;              6 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; lr  def 	 0 [ax] 85 96
(code_label 43 42 44 8 12 (nil) [1 uses])
(note 44 43 45 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 48 8 (set (reg:DI 85 [ _8 ])
        (sign_extend:DI (reg:SI 84 [ iftmp.0_3 ]))) "queryTAD.c":35:24 128 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 84 [ iftmp.0_3 ])
        (nil)))
(insn 48 45 52 8 (set (reg:DI 96 [ <retval> ])
        (reg:DI 85 [ _8 ])) "queryTAD.c":35:24 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 85 [ _8 ])
        (nil)))
(insn 52 48 53 8 (set (reg/i:DI 0 ax)
        (reg:DI 96 [ <retval> ])) "queryTAD.c":36:1 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 96 [ <retval> ])
        (nil)))
(insn 53 52 0 8 (use (reg/i:DI 0 ax)) "queryTAD.c":36:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function monthToNum (monthToNum, funcdef_no=3, decl_uid=3368, cgraph_uid=4, symbol_order=3)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 43 n_edges 47 count 45 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42
;;
;; Loop 1
;;  header 35, latch 34
;;  depth 1, outer 0
;;  nodes: 35 34 32 30
;; 2 succs { 5 3 }
;; 3 succs { 5 4 }
;; 4 succs { 5 }
;; 5 succs { 7 6 }
;; 6 succs { }
;; 7 succs { 9 8 }
;; 8 succs { }
;; 9 succs { 11 10 }
;; 10 succs { }
;; 11 succs { 13 12 }
;; 12 succs { }
;; 13 succs { 15 14 }
;; 14 succs { }
;; 15 succs { 17 16 }
;; 16 succs { }
;; 17 succs { 19 18 }
;; 18 succs { }
;; 19 succs { 21 20 }
;; 20 succs { }
;; 21 succs { 23 22 }
;; 22 succs { }
;; 23 succs { 25 24 }
;; 24 succs { }
;; 25 succs { 27 26 }
;; 26 succs { }
;; 27 succs { 29 28 }
;; 28 succs { }
;; 29 succs { 35 }
;; 30 succs { 32 31 }
;; 31 succs { }
;; 32 succs { 33 34 }
;; 33 succs { 37 }
;; 34 succs { 35 }
;; 35 succs { 30 36 }
;; 36 succs { 37 }
;; 37 succs { 39 38 }
;; 38 succs { 40 }
;; 39 succs { 40 }
;; 40 succs { 42 41 }
;; 41 succs { }
;; 42 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 50.
verify found no changes in insn with uid = 67.
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 101.
verify found no changes in insn with uid = 118.
verify found no changes in insn with uid = 135.
verify found no changes in insn with uid = 152.
verify found no changes in insn with uid = 169.
verify found no changes in insn with uid = 186.
verify found no changes in insn with uid = 203.
verify found no changes in insn with uid = 220.
verify found no changes in insn with uid = 237.
verify found no changes in insn with uid = 261.
verify found no changes in insn with uid = 271.
verify found no changes in insn with uid = 303.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r203: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r203,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r202: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r202,l0) best DIREG, allocno GENERAL_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r201,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r200,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r198,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r197,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r196,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r195,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r193,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r182,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a112 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r172,l0) best AREG, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a119 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a120 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a121 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r165,l0) best AREG, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a14 (r159,l0) best DIREG, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a25 (r154,l0) best DIREG, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a33 (r149,l0) best DIREG, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a41 (r144,l0) best DIREG, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a49 (r139,l0) best DIREG, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a57 (r134,l0) best DIREG, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a65 (r129,l0) best DIREG, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a73 (r124,l0) best DIREG, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a81 (r119,l0) best DIREG, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a89 (r114,l0) best DIREG, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a97 (r109,l0) best DIREG, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a106 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a105 (r104,l0) best DIREG, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a113 (r99,l0) best DIREG, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a118 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r83,l0) best AREG, allocno GENERAL_REGS
    r82: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r82,l0) best SIREG, allocno GENERAL_REGS

  a0(r172,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a1(r170,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:58000 NO_REX_SSE_REGS:58000 SSE_REGS:58000 MMX_REGS:93000 INT_SSE_REGS:93000 ALL_REGS:1486000 MEM:43000
  a2(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r165,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:82000 NO_REX_SSE_REGS:82000 SSE_REGS:82000 MMX_REGS:145000 INT_SSE_REGS:145000 ALL_REGS:2334000 MEM:65000
  a4(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a5(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:32000 INT_SSE_REGS:32000 ALL_REGS:524000 MEM:12000
  a6(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:214000 NO_REX_SSE_REGS:214000 SSE_REGS:214000 MMX_REGS:344000 INT_SSE_REGS:344000 ALL_REGS:5612000 MEM:157000
  a7(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a8(r203,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a9(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a10(r202,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a11(r82,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r200,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a13(r201,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a14(r159,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a15(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a16(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a17(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a18(r160,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a19(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a20(r199,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a21(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a22(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a23(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a24(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a25(r154,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a26(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a27(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a28(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a29(r155,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a30(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a31(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a32(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a33(r149,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a34(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a35(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a36(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a37(r150,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a38(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a39(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a40(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a41(r144,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a42(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a43(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a44(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a45(r145,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a46(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a47(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a48(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a49(r139,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a50(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a51(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a52(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a53(r140,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a54(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a55(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a56(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a57(r134,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a58(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a59(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a60(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a61(r135,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a62(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a63(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a64(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a65(r129,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a66(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a67(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a68(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a69(r130,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a70(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a71(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a72(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a73(r124,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a74(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a75(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a76(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a77(r125,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a78(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a79(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a80(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a81(r119,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a82(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a83(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a84(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a85(r120,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a86(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a87(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a88(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a89(r114,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a90(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a91(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a92(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a93(r115,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a94(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a95(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a96(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a97(r109,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a98(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a99(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a100(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a101(r110,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a102(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a103(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a104(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a105(r104,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a106(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a107(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a108(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a109(r105,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a110(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a111(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a112(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a113(r99,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a114(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a115(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a116(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a117(r100,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a118(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a119(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a120(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a121(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000

   Insn 307(l0): point = 0
   Insn 306(l0): point = 2
   Insn 303(l0): point = 5
   Insn 302(l0): point = 8
   Insn 301(l0): point = 10
   Insn 33(l0): point = 13
   Insn 32(l0): point = 15
   Insn 321(l0): point = 18
   Insn 28(l0): point = 20
   Insn 27(l0): point = 22
   Insn 26(l0): point = 24
   Insn 25(l0): point = 26
   Insn 24(l0): point = 28
   Insn 23(l0): point = 31
   Insn 22(l0): point = 33
   Insn 297(l0): point = 35
   Insn 292(l0): point = 38
   Insn 319(l0): point = 41
   Insn 278(l0): point = 43
   Insn 277(l0): point = 45
   Insn 276(l0): point = 47
   Insn 261(l0): point = 50
   Insn 260(l0): point = 52
   Insn 258(l0): point = 55
   Insn 257(l0): point = 57
   Insn 256(l0): point = 59
   Insn 255(l0): point = 61
   Insn 254(l0): point = 63
   Insn 253(l0): point = 65
   Insn 252(l0): point = 67
   Insn 251(l0): point = 69
   Insn 250(l0): point = 71
   Insn 249(l0): point = 73
   Insn 248(l0): point = 75
   Insn 247(l0): point = 77
   Insn 290(l0): point = 80
   Insn 289(l0): point = 82
   Insn 283(l0): point = 85
   Insn 274(l0): point = 88
   Insn 273(l0): point = 90
   Insn 272(l0): point = 92
   Insn 271(l0): point = 94
   Insn 270(l0): point = 96
   Insn 269(l0): point = 98
   Insn 268(l0): point = 100
   Insn 267(l0): point = 102
   Insn 266(l0): point = 104
   Insn 265(l0): point = 106
   Insn 317(l0): point = 109
   Insn 243(l0): point = 111
   Insn 242(l0): point = 113
   Insn 241(l0): point = 115
   Insn 237(l0): point = 118
   Insn 236(l0): point = 120
   Insn 234(l0): point = 123
   Insn 233(l0): point = 125
   Insn 232(l0): point = 127
   Insn 231(l0): point = 129
   Insn 230(l0): point = 131
   Insn 229(l0): point = 133
   Insn 228(l0): point = 135
   Insn 227(l0): point = 137
   Insn 226(l0): point = 139
   Insn 225(l0): point = 141
   Insn 224(l0): point = 143
   Insn 220(l0): point = 146
   Insn 219(l0): point = 148
   Insn 217(l0): point = 151
   Insn 216(l0): point = 153
   Insn 215(l0): point = 155
   Insn 214(l0): point = 157
   Insn 213(l0): point = 159
   Insn 212(l0): point = 161
   Insn 211(l0): point = 163
   Insn 210(l0): point = 165
   Insn 209(l0): point = 167
   Insn 208(l0): point = 169
   Insn 207(l0): point = 171
   Insn 203(l0): point = 174
   Insn 202(l0): point = 176
   Insn 200(l0): point = 179
   Insn 199(l0): point = 181
   Insn 198(l0): point = 183
   Insn 197(l0): point = 185
   Insn 196(l0): point = 187
   Insn 195(l0): point = 189
   Insn 194(l0): point = 191
   Insn 193(l0): point = 193
   Insn 192(l0): point = 195
   Insn 191(l0): point = 197
   Insn 190(l0): point = 199
   Insn 186(l0): point = 202
   Insn 185(l0): point = 204
   Insn 183(l0): point = 207
   Insn 182(l0): point = 209
   Insn 181(l0): point = 211
   Insn 180(l0): point = 213
   Insn 179(l0): point = 215
   Insn 178(l0): point = 217
   Insn 177(l0): point = 219
   Insn 176(l0): point = 221
   Insn 175(l0): point = 223
   Insn 174(l0): point = 225
   Insn 173(l0): point = 227
   Insn 169(l0): point = 230
   Insn 168(l0): point = 232
   Insn 166(l0): point = 235
   Insn 165(l0): point = 237
   Insn 164(l0): point = 239
   Insn 163(l0): point = 241
   Insn 162(l0): point = 243
   Insn 161(l0): point = 245
   Insn 160(l0): point = 247
   Insn 159(l0): point = 249
   Insn 158(l0): point = 251
   Insn 157(l0): point = 253
   Insn 156(l0): point = 255
   Insn 152(l0): point = 258
   Insn 151(l0): point = 260
   Insn 149(l0): point = 263
   Insn 148(l0): point = 265
   Insn 147(l0): point = 267
   Insn 146(l0): point = 269
   Insn 145(l0): point = 271
   Insn 144(l0): point = 273
   Insn 143(l0): point = 275
   Insn 142(l0): point = 277
   Insn 141(l0): point = 279
   Insn 140(l0): point = 281
   Insn 139(l0): point = 283
   Insn 135(l0): point = 286
   Insn 134(l0): point = 288
   Insn 132(l0): point = 291
   Insn 131(l0): point = 293
   Insn 130(l0): point = 295
   Insn 129(l0): point = 297
   Insn 128(l0): point = 299
   Insn 127(l0): point = 301
   Insn 126(l0): point = 303
   Insn 125(l0): point = 305
   Insn 124(l0): point = 307
   Insn 123(l0): point = 309
   Insn 122(l0): point = 311
   Insn 118(l0): point = 314
   Insn 117(l0): point = 316
   Insn 115(l0): point = 319
   Insn 114(l0): point = 321
   Insn 113(l0): point = 323
   Insn 112(l0): point = 325
   Insn 111(l0): point = 327
   Insn 110(l0): point = 329
   Insn 109(l0): point = 331
   Insn 108(l0): point = 333
   Insn 107(l0): point = 335
   Insn 106(l0): point = 337
   Insn 105(l0): point = 339
   Insn 101(l0): point = 342
   Insn 100(l0): point = 344
   Insn 98(l0): point = 347
   Insn 97(l0): point = 349
   Insn 96(l0): point = 351
   Insn 95(l0): point = 353
   Insn 94(l0): point = 355
   Insn 93(l0): point = 357
   Insn 92(l0): point = 359
   Insn 91(l0): point = 361
   Insn 90(l0): point = 363
   Insn 89(l0): point = 365
   Insn 88(l0): point = 367
   Insn 84(l0): point = 370
   Insn 83(l0): point = 372
   Insn 81(l0): point = 375
   Insn 80(l0): point = 377
   Insn 79(l0): point = 379
   Insn 78(l0): point = 381
   Insn 77(l0): point = 383
   Insn 76(l0): point = 385
   Insn 75(l0): point = 387
   Insn 74(l0): point = 389
   Insn 73(l0): point = 391
   Insn 72(l0): point = 393
   Insn 71(l0): point = 395
   Insn 67(l0): point = 398
   Insn 66(l0): point = 400
   Insn 64(l0): point = 403
   Insn 63(l0): point = 405
   Insn 62(l0): point = 407
   Insn 61(l0): point = 409
   Insn 60(l0): point = 411
   Insn 59(l0): point = 413
   Insn 58(l0): point = 415
   Insn 57(l0): point = 417
   Insn 56(l0): point = 419
   Insn 55(l0): point = 421
   Insn 54(l0): point = 423
   Insn 50(l0): point = 426
   Insn 49(l0): point = 428
   Insn 47(l0): point = 431
   Insn 46(l0): point = 433
   Insn 45(l0): point = 435
   Insn 44(l0): point = 437
   Insn 43(l0): point = 439
   Insn 42(l0): point = 441
   Insn 41(l0): point = 443
   Insn 40(l0): point = 445
   Insn 37(l0): point = 447
   Insn 21(l0): point = 449
   Insn 20(l0): point = 451
   Insn 19(l0): point = 453
   Insn 18(l0): point = 455
   Insn 17(l0): point = 457
   Insn 16(l0): point = 459
   Insn 15(l0): point = 461
   Insn 14(l0): point = 463
   Insn 13(l0): point = 465
   Insn 12(l0): point = 467
   Insn 10(l0): point = 470
   Insn 9(l0): point = 473
   Insn 8(l0): point = 475
   Insn 7(l0): point = 477
   Insn 6(l0): point = 479
   Insn 5(l0): point = 482
   Insn 4(l0): point = 484
   Insn 3(l0): point = 486
   Insn 2(l0): point = 488
   Insn 35(l0): point = 490
 a0(r172): [8..35] [3..4]
 a1(r170): [431..453] [403..425] [375..397] [347..369] [319..341] [291..313] [263..285] [235..257] [207..229] [179..201] [151..173] [123..145] [55..117] [25..49] [14..17]
 a2(r171): [21..22]
 a3(r165): [473..488] [431..470] [403..425] [375..397] [347..369] [319..341] [291..313] [263..285] [235..257] [207..229] [179..201] [151..173] [123..145] [55..117] [23..49]
 a4(r166): [431..486] [403..425] [375..397] [347..369] [319..341] [291..313] [263..285] [235..257] [207..229] [179..201] [151..173] [123..145] [55..117] [34..49]
 a5(r85): [41..43] [36..38]
 a6(r164): [431..465] [403..425] [375..397] [347..369] [319..341] [291..313] [263..285] [235..257] [207..229] [179..201] [151..173] [123..145] [55..117]
 a7(r84): [44..45]
 a8(r203): [46..47]
 a9(r83): [91..92]
 a10(r202): [97..100]
 a11(r82): [99..102]
 a12(r200): [103..104]
 a13(r201): [105..106]
 a14(r159): [53..67]
 a15(r163): [58..59]
 a16(r162): [60..61]
 a17(r161): [62..63]
 a18(r160): [64..65]
 a19(r98): [68..69]
 a20(r199): [70..71]
 a21(r196): [70..77]
 a22(r197): [72..73]
 a23(r198): [74..75]
 a24(r195): [114..115]
 a25(r154): [121..135]
 a26(r158): [126..127]
 a27(r157): [128..129]
 a28(r156): [130..131]
 a29(r155): [132..133]
 a30(r97): [136..137]
 a31(r194): [138..139]
 a32(r193): [142..143]
 a33(r149): [149..163]
 a34(r153): [154..155]
 a35(r152): [156..157]
 a36(r151): [158..159]
 a37(r150): [160..161]
 a38(r96): [164..165]
 a39(r192): [166..167]
 a40(r191): [170..171]
 a41(r144): [177..191]
 a42(r148): [182..183]
 a43(r147): [184..185]
 a44(r146): [186..187]
 a45(r145): [188..189]
 a46(r95): [192..193]
 a47(r190): [194..195]
 a48(r189): [198..199]
 a49(r139): [205..219]
 a50(r143): [210..211]
 a51(r142): [212..213]
 a52(r141): [214..215]
 a53(r140): [216..217]
 a54(r94): [220..221]
 a55(r188): [222..223]
 a56(r187): [226..227]
 a57(r134): [233..247]
 a58(r138): [238..239]
 a59(r137): [240..241]
 a60(r136): [242..243]
 a61(r135): [244..245]
 a62(r93): [248..249]
 a63(r186): [250..251]
 a64(r185): [254..255]
 a65(r129): [261..275]
 a66(r133): [266..267]
 a67(r132): [268..269]
 a68(r131): [270..271]
 a69(r130): [272..273]
 a70(r92): [276..277]
 a71(r184): [278..279]
 a72(r183): [282..283]
 a73(r124): [289..303]
 a74(r128): [294..295]
 a75(r127): [296..297]
 a76(r126): [298..299]
 a77(r125): [300..301]
 a78(r91): [304..305]
 a79(r182): [306..307]
 a80(r181): [310..311]
 a81(r119): [317..331]
 a82(r123): [322..323]
 a83(r122): [324..325]
 a84(r121): [326..327]
 a85(r120): [328..329]
 a86(r90): [332..333]
 a87(r180): [334..335]
 a88(r179): [338..339]
 a89(r114): [345..359]
 a90(r118): [350..351]
 a91(r117): [352..353]
 a92(r116): [354..355]
 a93(r115): [356..357]
 a94(r89): [360..361]
 a95(r178): [362..363]
 a96(r177): [366..367]
 a97(r109): [373..387]
 a98(r113): [378..379]
 a99(r112): [380..381]
 a100(r111): [382..383]
 a101(r110): [384..385]
 a102(r88): [388..389]
 a103(r176): [390..391]
 a104(r175): [394..395]
 a105(r104): [401..415]
 a106(r108): [406..407]
 a107(r107): [408..409]
 a108(r106): [410..411]
 a109(r105): [412..413]
 a110(r87): [416..417]
 a111(r174): [418..419]
 a112(r173): [422..423]
 a113(r99): [429..443]
 a114(r103): [434..435]
 a115(r102): [436..437]
 a116(r101): [438..439]
 a117(r100): [440..441]
 a118(r86): [444..445]
 a119(r169): [456..457]
 a120(r168): [460..461]
 a121(r167): [466..467]
Compressing live ranges: from 493 to 214 - 43%
Ranges after the compression:
 a0(r172): [0..7]
 a1(r170): [6..205] [2..3]
 a2(r171): [4..5]
 a3(r165): [6..213]
 a4(r166): [6..213]
 a5(r85): [8..11]
 a6(r164): [16..209]
 a7(r84): [12..13]
 a8(r203): [14..15]
 a9(r83): [32..33]
 a10(r202): [34..35]
 a11(r82): [34..35]
 a12(r200): [36..37]
 a13(r201): [38..39]
 a14(r159): [16..23]
 a15(r163): [16..17]
 a16(r162): [18..19]
 a17(r161): [20..21]
 a18(r160): [22..23]
 a19(r98): [24..25]
 a20(r199): [26..27]
 a21(r196): [26..31]
 a22(r197): [28..29]
 a23(r198): [30..31]
 a24(r195): [40..41]
 a25(r154): [42..49]
 a26(r158): [42..43]
 a27(r157): [44..45]
 a28(r156): [46..47]
 a29(r155): [48..49]
 a30(r97): [50..51]
 a31(r194): [52..53]
 a32(r193): [54..55]
 a33(r149): [56..63]
 a34(r153): [56..57]
 a35(r152): [58..59]
 a36(r151): [60..61]
 a37(r150): [62..63]
 a38(r96): [64..65]
 a39(r192): [66..67]
 a40(r191): [68..69]
 a41(r144): [70..77]
 a42(r148): [70..71]
 a43(r147): [72..73]
 a44(r146): [74..75]
 a45(r145): [76..77]
 a46(r95): [78..79]
 a47(r190): [80..81]
 a48(r189): [82..83]
 a49(r139): [84..91]
 a50(r143): [84..85]
 a51(r142): [86..87]
 a52(r141): [88..89]
 a53(r140): [90..91]
 a54(r94): [92..93]
 a55(r188): [94..95]
 a56(r187): [96..97]
 a57(r134): [98..105]
 a58(r138): [98..99]
 a59(r137): [100..101]
 a60(r136): [102..103]
 a61(r135): [104..105]
 a62(r93): [106..107]
 a63(r186): [108..109]
 a64(r185): [110..111]
 a65(r129): [112..119]
 a66(r133): [112..113]
 a67(r132): [114..115]
 a68(r131): [116..117]
 a69(r130): [118..119]
 a70(r92): [120..121]
 a71(r184): [122..123]
 a72(r183): [124..125]
 a73(r124): [126..133]
 a74(r128): [126..127]
 a75(r127): [128..129]
 a76(r126): [130..131]
 a77(r125): [132..133]
 a78(r91): [134..135]
 a79(r182): [136..137]
 a80(r181): [138..139]
 a81(r119): [140..147]
 a82(r123): [140..141]
 a83(r122): [142..143]
 a84(r121): [144..145]
 a85(r120): [146..147]
 a86(r90): [148..149]
 a87(r180): [150..151]
 a88(r179): [152..153]
 a89(r114): [154..161]
 a90(r118): [154..155]
 a91(r117): [156..157]
 a92(r116): [158..159]
 a93(r115): [160..161]
 a94(r89): [162..163]
 a95(r178): [164..165]
 a96(r177): [166..167]
 a97(r109): [168..175]
 a98(r113): [168..169]
 a99(r112): [170..171]
 a100(r111): [172..173]
 a101(r110): [174..175]
 a102(r88): [176..177]
 a103(r176): [178..179]
 a104(r175): [180..181]
 a105(r104): [182..189]
 a106(r108): [182..183]
 a107(r107): [184..185]
 a108(r106): [186..187]
 a109(r105): [188..189]
 a110(r87): [190..191]
 a111(r174): [192..193]
 a112(r173): [194..195]
 a113(r99): [196..203]
 a114(r103): [196..197]
 a115(r102): [198..199]
 a116(r101): [200..201]
 a117(r100): [202..203]
 a118(r86): [204..205]
 a119(r169): [206..207]
 a120(r168): [208..209]
 a121(r167): [210..211]
  pref0:a10(r202)<-hr5@1500
  pref1:a0(r172)<-hr0@1500
  pref2:a3(r165)<-hr0@1500
  pref3:a14(r159)<-hr5@1500
  pref4:a25(r154)<-hr5@1500
  pref5:a33(r149)<-hr5@1500
  pref6:a41(r144)<-hr5@1500
  pref7:a49(r139)<-hr5@1500
  pref8:a57(r134)<-hr5@1500
  pref9:a65(r129)<-hr5@1500
  pref10:a73(r124)<-hr5@1500
  pref11:a81(r119)<-hr5@1500
  pref12:a89(r114)<-hr5@1500
  pref13:a97(r109)<-hr5@1500
  pref14:a105(r104)<-hr5@1500
  pref15:a113(r99)<-hr5@1500
  pref16:a9(r83)<-hr0@1500
  pref17:a11(r82)<-hr4@1500
  regions=1, blocks=43, points=214
    allocnos=122 (big 0), copies=0, conflicts=0, ranges=123
Disposition:
   11:r82  l0     1    9:r83  l0     0    7:r84  l0     0    5:r85  l0     0
  118:r86  l0     0  110:r87  l0     0  102:r88  l0     0   94:r89  l0     0
   86:r90  l0     0   78:r91  l0     0   70:r92  l0     0   62:r93  l0     0
   54:r94  l0     0   46:r95  l0     0   38:r96  l0     0   30:r97  l0     0
   19:r98  l0     0  113:r99  l0     0  117:r100 l0     1  116:r101 l0     1
  115:r102 l0     1  114:r103 l0     1  105:r104 l0     0  109:r105 l0     1
  108:r106 l0     1  107:r107 l0     1  106:r108 l0     1   97:r109 l0     0
  101:r110 l0     1  100:r111 l0     1   99:r112 l0     1   98:r113 l0     1
   89:r114 l0     0   93:r115 l0     1   92:r116 l0     1   91:r117 l0     1
   90:r118 l0     1   81:r119 l0     0   85:r120 l0     1   84:r121 l0     1
   83:r122 l0     1   82:r123 l0     1   73:r124 l0     0   77:r125 l0     1
   76:r126 l0     1   75:r127 l0     1   74:r128 l0     1   65:r129 l0     0
   69:r130 l0     1   68:r131 l0     1   67:r132 l0     1   66:r133 l0     1
   57:r134 l0     0   61:r135 l0     1   60:r136 l0     1   59:r137 l0     1
   58:r138 l0     1   49:r139 l0     0   53:r140 l0     1   52:r141 l0     1
   51:r142 l0     1   50:r143 l0     1   41:r144 l0     0   45:r145 l0     1
   44:r146 l0     1   43:r147 l0     1   42:r148 l0     1   33:r149 l0     0
   37:r150 l0     1   36:r151 l0     1   35:r152 l0     1   34:r153 l0     1
   25:r154 l0     0   29:r155 l0     1   28:r156 l0     1   27:r157 l0     1
   26:r158 l0     1   14:r159 l0     0   18:r160 l0     1   17:r161 l0     1
   16:r162 l0     1   15:r163 l0     1    6:r164 l0     3    3:r165 l0    40
    4:r166 l0    42  121:r167 l0     0  120:r168 l0     0  119:r169 l0     0
    1:r170 l0    41    2:r171 l0     0    0:r172 l0     1  112:r173 l0     0
  111:r174 l0     0  104:r175 l0     0  103:r176 l0     0   96:r177 l0     0
   95:r178 l0     0   88:r179 l0     0   87:r180 l0     0   80:r181 l0     0
   79:r182 l0     0   72:r183 l0     0   71:r184 l0     0   64:r185 l0     0
   63:r186 l0     0   56:r187 l0     0   55:r188 l0     0   48:r189 l0     0
   47:r190 l0     0   40:r191 l0     0   39:r192 l0     0   32:r193 l0     0
   31:r194 l0     0   24:r195 l0     0   21:r196 l0     0   22:r197 l0     1
   23:r198 l0     1   20:r199 l0     1   12:r200 l0     0   13:r201 l0     0
   10:r202 l0     0    8:r203 l0     0
+++Costs: overall 38000, reg 38000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


monthToNum

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={18d,5u} r1={17d} r2={17d} r4={18d,1u} r5={32d,16u} r6={1d,42u} r7={1d,58u} r8={16d} r9={16d} r10={16d} r11={16d} r12={16d} r13={16d} r14={16d} r15={16d} r16={1d,41u} r17={93d,19u} r18={16d} r19={1d,54u,1e} r20={17d} r21={17d} r22={17d} r23={17d} r24={17d} r25={17d} r26={17d} r27={17d} r28={16d} r29={16d} r30={16d} r31={16d} r32={16d} r33={16d} r34={16d} r35={16d} r36={17d} r37={17d} r38={16d} r39={16d} r44={16d} r45={16d} r46={16d} r47={16d} r48={16d} r49={16d} r50={16d} r51={16d} r52={16d} r53={16d} r54={16d} r55={16d} r56={16d} r57={16d} r58={16d} r59={16d} r60={16d} r61={16d} r62={16d} r63={16d} r64={16d} r65={16d} r66={16d} r67={16d} r68={16d} r69={16d} r70={16d} r71={16d} r72={16d} r73={16d} r74={16d} r75={16d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={2d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,2u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,2u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,2u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,2u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,2u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,2u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,2u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,2u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,2u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,2u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,2u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,2u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,2u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,26u} r165={2d,9u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,6u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} 
;;    total ref usage 1719{1309d,409u,1e} in 226{210 regular + 16 call} insns.
(note 1 0 38 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 165 166
(note 38 1 35 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 35 38 2 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -216 [0xffffffffffffff28])) [3 s+0 S8 A64])
        (reg:DI 5 di [ s ])) "queryTAD.c":38:29 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ s ])
        (nil)))
(insn 2 35 3 2 (parallel [
            (set (reg:DI 165)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":38:29 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 3 2 4 2 (set (reg:DI 166)
        (reg:DI 165)) "queryTAD.c":38:29 66 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (symbol_ref:DI ("__asan_option_detect_stack_use_after_return") [flags 0x40]  <var_decl 0x7fc58ec5e900 __asan_option_detect_stack_use_after_return>) [13 __asan_option_detect_stack_use_after_return+0 S4 A32])
            (const_int 0 [0]))) "queryTAD.c":38:29 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 5 4 309 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 11)
            (pc))) "queryTAD.c":38:29 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 11)
;;  succ:       5
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165 166

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165 166
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 309 5 6 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 6 309 7 3 (set (reg:DI 5 di)
        (const_int 160 [0xa0])) "queryTAD.c":38:29 66 {*movdi_internal}
     (nil))
(call_insn 7 6 8 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__asan_stack_malloc_2") [flags 0x41]) [0  S1 A8])
            (const_int 0 [0]))) "queryTAD.c":38:29 677 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
            (nil)))
    (expr_list (use (reg:DI 5 di))
        (nil)))
(insn 8 7 9 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax)
            (const_int 0 [0]))) "queryTAD.c":38:29 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 310 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 11)
            (pc))) "queryTAD.c":38:29 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 11)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165 166

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 166
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 165
(note 310 9 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 10 310 11 4 (set (reg:DI 165)
        (reg:DI 0 ax)) "queryTAD.c":38:29 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165 166

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       2
;;              3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165 166
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165
;; lr  def 	 17 [flags] 86 99 100 101 102 103 164 167 168 169 170
(code_label 11 10 311 5 14 (nil) [2 uses])
(note 311 11 12 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 12 311 13 5 (parallel [
            (set (reg:DI 167)
                (plus:DI (reg:DI 165)
                    (const_int 192 [0xc0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":38:29 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 13 12 14 5 (set (reg:DI 164)
        (reg:DI 167)) "queryTAD.c":38:29 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 167)
        (nil)))
(insn 14 13 15 5 (set (mem:DI (reg:DI 165) [0  S8 A8])
        (const_int 1102416563 [0x41b58ab3])) "queryTAD.c":38:29 66 {*movdi_internal}
     (nil))
(insn 15 14 16 5 (set (reg/f:DI 168)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fc58ec5e990 *.LC1>)) "queryTAD.c":38:29 66 {*movdi_internal}
     (nil))
(insn 16 15 17 5 (set (mem:DI (plus:DI (reg:DI 165)
                (const_int 8 [0x8])) [0  S8 A8])
        (reg/f:DI 168)) "queryTAD.c":38:29 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 168)
        (nil)))
(insn 17 16 18 5 (set (reg/f:DI 169)
        (symbol_ref:DI ("*.LASANPC3") [flags 0x2]  <var_decl 0x7fc58ec5ea20 *.LASANPC3>)) "queryTAD.c":38:29 66 {*movdi_internal}
     (nil))
(insn 18 17 19 5 (set (mem:DI (plus:DI (reg:DI 165)
                (const_int 16 [0x10])) [0  S8 A8])
        (reg/f:DI 169)) "queryTAD.c":38:29 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 169)
        (nil)))
(insn 19 18 20 5 (parallel [
            (set (reg:DI 170)
                (lshiftrt:DI (reg:DI 165)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":38:29 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 20 19 21 5 (set (mem:SI (plus:DI (reg:DI 170)
                (const_int 2147450880 [0x7fff8000])) [10  S4 A8])
        (const_int -235802127 [0xfffffffff1f1f1f1])) "queryTAD.c":38:29 67 {*movsi_internal}
     (nil))
(insn 21 20 36 5 (set (mem:SI (plus:DI (reg:DI 170)
                (const_int 2147450896 [0x7fff8010])) [10  S4 A8])
        (const_int -202116109 [0xfffffffff3f3f3f3])) "queryTAD.c":38:29 67 {*movsi_internal}
     (nil))
(note 36 21 37 5 NOTE_INSN_FUNCTION_BEG)
(insn 37 36 40 5 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -8 [0xfffffffffffffff8])) [12 D.3543+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":38:29 976 {stack_protect_set_di}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 40 37 41 5 (parallel [
            (set (reg/f:DI 86 [ _26 ])
                (plus:DI (reg:DI 164)
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 41 40 42 5 (set (reg:DI 99 [ _54 ])
        (reg/f:DI 86 [ _26 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 86 [ _26 ])
        (nil)))
(insn 42 41 43 5 (parallel [
            (set (reg:DI 100 [ _55 ])
                (lshiftrt:DI (reg:DI 99 [ _54 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 43 42 44 5 (parallel [
            (set (reg:DI 101 [ _56 ])
                (plus:DI (reg:DI 100 [ _55 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 100 [ _55 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 44 43 45 5 (set (reg/f:DI 102 [ _57 ])
        (reg:DI 101 [ _56 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 101 [ _56 ])
        (nil)))
(insn 45 44 46 5 (set (reg:QI 103 [ _58 ])
        (mem:QI (reg/f:DI 102 [ _57 ]) [10 *_57+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 102 [ _57 ])
        (nil)))
(insn 46 45 47 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 103 [ _58 ])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 103 [ _58 ])
        (nil)))
(jump_insn 47 46 48 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 52)
;;  succ:       7 [100.0% (guessed)] 
;;              6 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 99 164 165 166 170

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 [0.0% (guessed)]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 99
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 99
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 48 47 49 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 6 (set (reg:DI 5 di)
        (reg:DI 99 [ _54 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 99 [ _54 ])
        (nil)))
(call_insn 50 49 51 6 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 51 50 52)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       5 [100.0% (guessed)] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 87 104 105 106 107 108 173 174
(code_label 52 51 53 7 18 (nil) [1 uses])
(note 53 52 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 7 (set (reg/f:DI 173)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fc58ec5eab0 *.LC2>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 55 54 56 7 (set (mem/f/c:DI (plus:DI (reg:DI 164)
                (const_int -160 [0xffffffffffffff60])) [3 months+0 S8 A64])
        (reg/f:DI 173)) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 173)
        (nil)))
(insn 56 55 57 7 (parallel [
            (set (reg:DI 174)
                (plus:DI (reg:DI 164)
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 57 56 58 7 (parallel [
            (set (reg/f:DI 87 [ _27 ])
                (plus:DI (reg:DI 174)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 174)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 58 57 59 7 (set (reg:DI 104 [ _59 ])
        (reg/f:DI 87 [ _27 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ _27 ])
        (nil)))
(insn 59 58 60 7 (parallel [
            (set (reg:DI 105 [ _60 ])
                (lshiftrt:DI (reg:DI 104 [ _59 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 60 59 61 7 (parallel [
            (set (reg:DI 106 [ _61 ])
                (plus:DI (reg:DI 105 [ _60 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 105 [ _60 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 61 60 62 7 (set (reg/f:DI 107 [ _62 ])
        (reg:DI 106 [ _61 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 106 [ _61 ])
        (nil)))
(insn 62 61 63 7 (set (reg:QI 108 [ _63 ])
        (mem:QI (reg/f:DI 107 [ _62 ]) [10 *_62+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 107 [ _62 ])
        (nil)))
(insn 63 62 64 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 108 [ _63 ])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 108 [ _63 ])
        (nil)))
(jump_insn 64 63 65 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 69)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 69)
;;  succ:       9 [100.0% (guessed)] 
;;              8 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104 164 165 166 170

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 [0.0% (guessed)]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 65 64 66 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 8 (set (reg:DI 5 di)
        (reg:DI 104 [ _59 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 104 [ _59 ])
        (nil)))
(call_insn 67 66 68 8 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 68 67 69)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       7 [100.0% (guessed)] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 88 109 110 111 112 113 175 176
(code_label 69 68 70 9 19 (nil) [1 uses])
(note 70 69 71 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 9 (set (reg/f:DI 175)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fc58ec5eb40 *.LC3>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 72 71 73 9 (set (mem/f/c:DI (plus:DI (reg:DI 164)
                (const_int -152 [0xffffffffffffff68])) [3 months+8 S8 A64])
        (reg/f:DI 175)) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 175)
        (nil)))
(insn 73 72 74 9 (parallel [
            (set (reg:DI 176)
                (plus:DI (reg:DI 164)
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 74 73 75 9 (parallel [
            (set (reg/f:DI 88 [ _28 ])
                (plus:DI (reg:DI 176)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 176)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 75 74 76 9 (set (reg:DI 109 [ _64 ])
        (reg/f:DI 88 [ _28 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88 [ _28 ])
        (nil)))
(insn 76 75 77 9 (parallel [
            (set (reg:DI 110 [ _65 ])
                (lshiftrt:DI (reg:DI 109 [ _64 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 77 76 78 9 (parallel [
            (set (reg:DI 111 [ _66 ])
                (plus:DI (reg:DI 110 [ _65 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 110 [ _65 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 78 77 79 9 (set (reg/f:DI 112 [ _67 ])
        (reg:DI 111 [ _66 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 111 [ _66 ])
        (nil)))
(insn 79 78 80 9 (set (reg:QI 113 [ _68 ])
        (mem:QI (reg/f:DI 112 [ _67 ]) [10 *_67+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 112 [ _67 ])
        (nil)))
(insn 80 79 81 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 113 [ _68 ])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 113 [ _68 ])
        (nil)))
(jump_insn 81 80 82 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 86)
;;  succ:       11 [100.0% (guessed)] 
;;              10 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 109 164 165 166 170

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 [0.0% (guessed)]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 109
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 109
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 82 81 83 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 10 (set (reg:DI 5 di)
        (reg:DI 109 [ _64 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 109 [ _64 ])
        (nil)))
(call_insn 84 83 85 10 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 85 84 86)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       9 [100.0% (guessed)] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 89 114 115 116 117 118 177 178
(code_label 86 85 87 11 20 (nil) [1 uses])
(note 87 86 88 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 11 (set (reg/f:DI 177)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7fc58ec5ebd0 *.LC4>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 89 88 90 11 (set (mem/f/c:DI (plus:DI (reg:DI 164)
                (const_int -144 [0xffffffffffffff70])) [3 months+16 S8 A64])
        (reg/f:DI 177)) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 177)
        (nil)))
(insn 90 89 91 11 (parallel [
            (set (reg:DI 178)
                (plus:DI (reg:DI 164)
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 91 90 92 11 (parallel [
            (set (reg/f:DI 89 [ _29 ])
                (plus:DI (reg:DI 178)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 178)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 92 91 93 11 (set (reg:DI 114 [ _69 ])
        (reg/f:DI 89 [ _29 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 89 [ _29 ])
        (nil)))
(insn 93 92 94 11 (parallel [
            (set (reg:DI 115 [ _70 ])
                (lshiftrt:DI (reg:DI 114 [ _69 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 94 93 95 11 (parallel [
            (set (reg:DI 116 [ _71 ])
                (plus:DI (reg:DI 115 [ _70 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 115 [ _70 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 95 94 96 11 (set (reg/f:DI 117 [ _72 ])
        (reg:DI 116 [ _71 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 116 [ _71 ])
        (nil)))
(insn 96 95 97 11 (set (reg:QI 118 [ _73 ])
        (mem:QI (reg/f:DI 117 [ _72 ]) [10 *_72+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 117 [ _72 ])
        (nil)))
(insn 97 96 98 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 118 [ _73 ])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 118 [ _73 ])
        (nil)))
(jump_insn 98 97 99 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 103)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 103)
;;  succ:       13 [100.0% (guessed)] 
;;              12 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 114 164 165 166 170

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 [0.0% (guessed)]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 114
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 114
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 99 98 100 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 12 (set (reg:DI 5 di)
        (reg:DI 114 [ _69 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 114 [ _69 ])
        (nil)))
(call_insn 101 100 102 12 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 102 101 103)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       11 [100.0% (guessed)] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 90 119 120 121 122 123 179 180
(code_label 103 102 104 13 21 (nil) [1 uses])
(note 104 103 105 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 13 (set (reg/f:DI 179)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7fc58ec5ec60 *.LC5>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 106 105 107 13 (set (mem/f/c:DI (plus:DI (reg:DI 164)
                (const_int -136 [0xffffffffffffff78])) [3 months+24 S8 A64])
        (reg/f:DI 179)) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 179)
        (nil)))
(insn 107 106 108 13 (parallel [
            (set (reg:DI 180)
                (plus:DI (reg:DI 164)
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 108 107 109 13 (parallel [
            (set (reg/f:DI 90 [ _30 ])
                (plus:DI (reg:DI 180)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 180)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 109 108 110 13 (set (reg:DI 119 [ _74 ])
        (reg/f:DI 90 [ _30 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90 [ _30 ])
        (nil)))
(insn 110 109 111 13 (parallel [
            (set (reg:DI 120 [ _75 ])
                (lshiftrt:DI (reg:DI 119 [ _74 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 111 110 112 13 (parallel [
            (set (reg:DI 121 [ _76 ])
                (plus:DI (reg:DI 120 [ _75 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 120 [ _75 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 112 111 113 13 (set (reg/f:DI 122 [ _77 ])
        (reg:DI 121 [ _76 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 121 [ _76 ])
        (nil)))
(insn 113 112 114 13 (set (reg:QI 123 [ _78 ])
        (mem:QI (reg/f:DI 122 [ _77 ]) [10 *_77+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 122 [ _77 ])
        (nil)))
(insn 114 113 115 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 123 [ _78 ])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 123 [ _78 ])
        (nil)))
(jump_insn 115 114 116 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 120)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 120)
;;  succ:       15 [100.0% (guessed)] 
;;              14 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119 164 165 166 170

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 [0.0% (guessed)]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 116 115 117 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 14 (set (reg:DI 5 di)
        (reg:DI 119 [ _74 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 119 [ _74 ])
        (nil)))
(call_insn 118 117 119 14 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 119 118 120)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       13 [100.0% (guessed)] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 91 124 125 126 127 128 181 182
(code_label 120 119 121 15 22 (nil) [1 uses])
(note 121 120 122 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 15 (set (reg/f:DI 181)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7fc58ec5ecf0 *.LC6>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 123 122 124 15 (set (mem/f/c:DI (plus:DI (reg:DI 164)
                (const_int -128 [0xffffffffffffff80])) [3 months+32 S8 A64])
        (reg/f:DI 181)) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 181)
        (nil)))
(insn 124 123 125 15 (parallel [
            (set (reg:DI 182)
                (plus:DI (reg:DI 164)
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 125 124 126 15 (parallel [
            (set (reg/f:DI 91 [ _31 ])
                (plus:DI (reg:DI 182)
                    (const_int 40 [0x28])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 182)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 126 125 127 15 (set (reg:DI 124 [ _79 ])
        (reg/f:DI 91 [ _31 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91 [ _31 ])
        (nil)))
(insn 127 126 128 15 (parallel [
            (set (reg:DI 125 [ _80 ])
                (lshiftrt:DI (reg:DI 124 [ _79 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 128 127 129 15 (parallel [
            (set (reg:DI 126 [ _81 ])
                (plus:DI (reg:DI 125 [ _80 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 125 [ _80 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 129 128 130 15 (set (reg/f:DI 127 [ _82 ])
        (reg:DI 126 [ _81 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 126 [ _81 ])
        (nil)))
(insn 130 129 131 15 (set (reg:QI 128 [ _83 ])
        (mem:QI (reg/f:DI 127 [ _82 ]) [10 *_82+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 127 [ _82 ])
        (nil)))
(insn 131 130 132 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 128 [ _83 ])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 128 [ _83 ])
        (nil)))
(jump_insn 132 131 133 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 137)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 137)
;;  succ:       17 [100.0% (guessed)] 
;;              16 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 124 164 165 166 170

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 [0.0% (guessed)]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 124
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 124
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 133 132 134 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 134 133 135 16 (set (reg:DI 5 di)
        (reg:DI 124 [ _79 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 124 [ _79 ])
        (nil)))
(call_insn 135 134 136 16 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 136 135 137)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       15 [100.0% (guessed)] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 92 129 130 131 132 133 183 184
(code_label 137 136 138 17 23 (nil) [1 uses])
(note 138 137 139 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 17 (set (reg/f:DI 183)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7fc58ec5ed80 *.LC7>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 140 139 141 17 (set (mem/f/c:DI (plus:DI (reg:DI 164)
                (const_int -120 [0xffffffffffffff88])) [3 months+40 S8 A64])
        (reg/f:DI 183)) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 183)
        (nil)))
(insn 141 140 142 17 (parallel [
            (set (reg:DI 184)
                (plus:DI (reg:DI 164)
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 142 141 143 17 (parallel [
            (set (reg/f:DI 92 [ _32 ])
                (plus:DI (reg:DI 184)
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 184)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 143 142 144 17 (set (reg:DI 129 [ _84 ])
        (reg/f:DI 92 [ _32 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92 [ _32 ])
        (nil)))
(insn 144 143 145 17 (parallel [
            (set (reg:DI 130 [ _85 ])
                (lshiftrt:DI (reg:DI 129 [ _84 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 145 144 146 17 (parallel [
            (set (reg:DI 131 [ _86 ])
                (plus:DI (reg:DI 130 [ _85 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 130 [ _85 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 146 145 147 17 (set (reg/f:DI 132 [ _87 ])
        (reg:DI 131 [ _86 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 131 [ _86 ])
        (nil)))
(insn 147 146 148 17 (set (reg:QI 133 [ _88 ])
        (mem:QI (reg/f:DI 132 [ _87 ]) [10 *_87+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 132 [ _87 ])
        (nil)))
(insn 148 147 149 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 133 [ _88 ])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 133 [ _88 ])
        (nil)))
(jump_insn 149 148 150 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 154)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 154)
;;  succ:       19 [100.0% (guessed)] 
;;              18 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129 164 165 166 170

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       17 [0.0% (guessed)]  (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 150 149 151 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 151 150 152 18 (set (reg:DI 5 di)
        (reg:DI 129 [ _84 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 129 [ _84 ])
        (nil)))
(call_insn 152 151 153 18 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 153 152 154)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       17 [100.0% (guessed)] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 93 134 135 136 137 138 185 186
(code_label 154 153 155 19 24 (nil) [1 uses])
(note 155 154 156 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 156 155 157 19 (set (reg/f:DI 185)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7fc58ec5ee10 *.LC8>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 157 156 158 19 (set (mem/f/c:DI (plus:DI (reg:DI 164)
                (const_int -112 [0xffffffffffffff90])) [3 months+48 S8 A64])
        (reg/f:DI 185)) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 185)
        (nil)))
(insn 158 157 159 19 (parallel [
            (set (reg:DI 186)
                (plus:DI (reg:DI 164)
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 159 158 160 19 (parallel [
            (set (reg/f:DI 93 [ _33 ])
                (plus:DI (reg:DI 186)
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 186)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 160 159 161 19 (set (reg:DI 134 [ _89 ])
        (reg/f:DI 93 [ _33 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93 [ _33 ])
        (nil)))
(insn 161 160 162 19 (parallel [
            (set (reg:DI 135 [ _90 ])
                (lshiftrt:DI (reg:DI 134 [ _89 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 162 161 163 19 (parallel [
            (set (reg:DI 136 [ _91 ])
                (plus:DI (reg:DI 135 [ _90 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 135 [ _90 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 163 162 164 19 (set (reg/f:DI 137 [ _92 ])
        (reg:DI 136 [ _91 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 136 [ _91 ])
        (nil)))
(insn 164 163 165 19 (set (reg:QI 138 [ _93 ])
        (mem:QI (reg/f:DI 137 [ _92 ]) [10 *_92+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 137 [ _92 ])
        (nil)))
(insn 165 164 166 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 138 [ _93 ])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 138 [ _93 ])
        (nil)))
(jump_insn 166 165 167 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 171)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 171)
;;  succ:       21 [100.0% (guessed)] 
;;              20 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 134 164 165 166 170

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       19 [0.0% (guessed)]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 134
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 134
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 167 166 168 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 168 167 169 20 (set (reg:DI 5 di)
        (reg:DI 134 [ _89 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 134 [ _89 ])
        (nil)))
(call_insn 169 168 170 20 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 170 169 171)
;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL)
;;  pred:       19 [100.0% (guessed)] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 94 139 140 141 142 143 187 188
(code_label 171 170 172 21 25 (nil) [1 uses])
(note 172 171 173 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 173 172 174 21 (set (reg/f:DI 187)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7fc58ec5eea0 *.LC9>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 174 173 175 21 (set (mem/f/c:DI (plus:DI (reg:DI 164)
                (const_int -104 [0xffffffffffffff98])) [3 months+56 S8 A64])
        (reg/f:DI 187)) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 187)
        (nil)))
(insn 175 174 176 21 (parallel [
            (set (reg:DI 188)
                (plus:DI (reg:DI 164)
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 176 175 177 21 (parallel [
            (set (reg/f:DI 94 [ _34 ])
                (plus:DI (reg:DI 188)
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 188)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 177 176 178 21 (set (reg:DI 139 [ _94 ])
        (reg/f:DI 94 [ _34 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 94 [ _34 ])
        (nil)))
(insn 178 177 179 21 (parallel [
            (set (reg:DI 140 [ _95 ])
                (lshiftrt:DI (reg:DI 139 [ _94 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 179 178 180 21 (parallel [
            (set (reg:DI 141 [ _96 ])
                (plus:DI (reg:DI 140 [ _95 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 140 [ _95 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 180 179 181 21 (set (reg/f:DI 142 [ _97 ])
        (reg:DI 141 [ _96 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 141 [ _96 ])
        (nil)))
(insn 181 180 182 21 (set (reg:QI 143 [ _98 ])
        (mem:QI (reg/f:DI 142 [ _97 ]) [10 *_97+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 142 [ _97 ])
        (nil)))
(insn 182 181 183 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 143 [ _98 ])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 143 [ _98 ])
        (nil)))
(jump_insn 183 182 184 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 188)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 188)
;;  succ:       23 [100.0% (guessed)] 
;;              22 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139 164 165 166 170

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL)
;;  pred:       21 [0.0% (guessed)]  (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 184 183 185 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 185 184 186 22 (set (reg:DI 5 di)
        (reg:DI 139 [ _94 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 139 [ _94 ])
        (nil)))
(call_insn 186 185 187 22 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 187 186 188)
;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL)
;;  pred:       21 [100.0% (guessed)] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 95 144 145 146 147 148 189 190
(code_label 188 187 189 23 26 (nil) [1 uses])
(note 189 188 190 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 190 189 191 23 (set (reg/f:DI 189)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7fc58ec5ef30 *.LC10>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 191 190 192 23 (set (mem/f/c:DI (plus:DI (reg:DI 164)
                (const_int -96 [0xffffffffffffffa0])) [3 months+64 S8 A64])
        (reg/f:DI 189)) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 189)
        (nil)))
(insn 192 191 193 23 (parallel [
            (set (reg:DI 190)
                (plus:DI (reg:DI 164)
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 193 192 194 23 (parallel [
            (set (reg/f:DI 95 [ _35 ])
                (plus:DI (reg:DI 190)
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 190)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 194 193 195 23 (set (reg:DI 144 [ _99 ])
        (reg/f:DI 95 [ _35 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95 [ _35 ])
        (nil)))
(insn 195 194 196 23 (parallel [
            (set (reg:DI 145 [ _100 ])
                (lshiftrt:DI (reg:DI 144 [ _99 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 196 195 197 23 (parallel [
            (set (reg:DI 146 [ _101 ])
                (plus:DI (reg:DI 145 [ _100 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 145 [ _100 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 197 196 198 23 (set (reg/f:DI 147 [ _102 ])
        (reg:DI 146 [ _101 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 146 [ _101 ])
        (nil)))
(insn 198 197 199 23 (set (reg:QI 148 [ _103 ])
        (mem:QI (reg/f:DI 147 [ _102 ]) [10 *_102+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 147 [ _102 ])
        (nil)))
(insn 199 198 200 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 148 [ _103 ])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 148 [ _103 ])
        (nil)))
(jump_insn 200 199 201 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 205)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 205)
;;  succ:       25 [100.0% (guessed)] 
;;              24 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 144 164 165 166 170

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL)
;;  pred:       23 [0.0% (guessed)]  (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 144
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 144
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 201 200 202 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 202 201 203 24 (set (reg:DI 5 di)
        (reg:DI 144 [ _99 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 144 [ _99 ])
        (nil)))
(call_insn 203 202 204 24 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 204 203 205)
;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL)
;;  pred:       23 [100.0% (guessed)] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 96 149 150 151 152 153 191 192
(code_label 205 204 206 25 27 (nil) [1 uses])
(note 206 205 207 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 207 206 208 25 (set (reg/f:DI 191)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fc58ec72000 *.LC11>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 208 207 209 25 (set (mem/f/c:DI (plus:DI (reg:DI 164)
                (const_int -88 [0xffffffffffffffa8])) [3 months+72 S8 A64])
        (reg/f:DI 191)) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 191)
        (nil)))
(insn 209 208 210 25 (parallel [
            (set (reg:DI 192)
                (plus:DI (reg:DI 164)
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 210 209 211 25 (parallel [
            (set (reg/f:DI 96 [ _36 ])
                (plus:DI (reg:DI 192)
                    (const_int 80 [0x50])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 192)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 211 210 212 25 (set (reg:DI 149 [ _104 ])
        (reg/f:DI 96 [ _36 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96 [ _36 ])
        (nil)))
(insn 212 211 213 25 (parallel [
            (set (reg:DI 150 [ _105 ])
                (lshiftrt:DI (reg:DI 149 [ _104 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 213 212 214 25 (parallel [
            (set (reg:DI 151 [ _106 ])
                (plus:DI (reg:DI 150 [ _105 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 150 [ _105 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 214 213 215 25 (set (reg/f:DI 152 [ _107 ])
        (reg:DI 151 [ _106 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 151 [ _106 ])
        (nil)))
(insn 215 214 216 25 (set (reg:QI 153 [ _108 ])
        (mem:QI (reg/f:DI 152 [ _107 ]) [10 *_107+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 152 [ _107 ])
        (nil)))
(insn 216 215 217 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 153 [ _108 ])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 153 [ _108 ])
        (nil)))
(jump_insn 217 216 218 25 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 222)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 222)
;;  succ:       27 [100.0% (guessed)] 
;;              26 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 149 164 165 166 170

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL)
;;  pred:       25 [0.0% (guessed)]  (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 149
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 149
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 218 217 219 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 220 26 (set (reg:DI 5 di)
        (reg:DI 149 [ _104 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 149 [ _104 ])
        (nil)))
(call_insn 220 219 221 26 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 221 220 222)
;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL)
;;  pred:       25 [100.0% (guessed)] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 97 154 155 156 157 158 193 194
(code_label 222 221 223 27 28 (nil) [1 uses])
(note 223 222 224 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 27 (set (reg/f:DI 193)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7fc58ec72090 *.LC12>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 225 224 226 27 (set (mem/f/c:DI (plus:DI (reg:DI 164)
                (const_int -80 [0xffffffffffffffb0])) [3 months+80 S8 A64])
        (reg/f:DI 193)) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 193)
        (nil)))
(insn 226 225 227 27 (parallel [
            (set (reg:DI 194)
                (plus:DI (reg:DI 164)
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 227 226 228 27 (parallel [
            (set (reg/f:DI 97 [ _37 ])
                (plus:DI (reg:DI 194)
                    (const_int 88 [0x58])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 194)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 228 227 229 27 (set (reg:DI 154 [ _109 ])
        (reg/f:DI 97 [ _37 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97 [ _37 ])
        (nil)))
(insn 229 228 230 27 (parallel [
            (set (reg:DI 155 [ _110 ])
                (lshiftrt:DI (reg:DI 154 [ _109 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 230 229 231 27 (parallel [
            (set (reg:DI 156 [ _111 ])
                (plus:DI (reg:DI 155 [ _110 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 155 [ _110 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 231 230 232 27 (set (reg/f:DI 157 [ _112 ])
        (reg:DI 156 [ _111 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 156 [ _111 ])
        (nil)))
(insn 232 231 233 27 (set (reg:QI 158 [ _113 ])
        (mem:QI (reg/f:DI 157 [ _112 ]) [10 *_112+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 157 [ _112 ])
        (nil)))
(insn 233 232 234 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 158 [ _113 ])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 158 [ _113 ])
        (nil)))
(jump_insn 234 233 235 27 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 239)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 239)
;;  succ:       29 [100.0% (guessed)] 
;;              28 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 154 164 165 166 170

;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL)
;;  pred:       27 [0.0% (guessed)]  (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 154
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 154
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 235 234 236 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 28 (set (reg:DI 5 di)
        (reg:DI 154 [ _109 ])) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 154 [ _109 ])
        (nil)))
(call_insn 237 236 238 28 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 238 237 239)
;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL)
;;  pred:       27 [100.0% (guessed)] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 195
(code_label 239 238 240 29 29 (nil) [1 uses])
(note 240 239 241 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 241 240 242 29 (set (reg/f:DI 195)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7fc58ec72120 *.LC13>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 242 241 243 29 (set (mem/f/c:DI (plus:DI (reg:DI 164)
                (const_int -72 [0xffffffffffffffb8])) [3 months+88 S8 A64])
        (reg/f:DI 195)) "queryTAD.c":39:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 195)
        (nil)))
(insn 243 242 317 29 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -196 [0xffffffffffffff3c])) [13 i+0 S4 A32])
        (const_int 0 [0])) "queryTAD.c":40:14 67 {*movsi_internal}
     (nil))
(jump_insn 317 243 318 29 (set (pc)
        (label_ref 284)) "queryTAD.c":40:5 660 {jump}
     (nil)
 -> 284)
;;  succ:       35 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170

(barrier 318 317 286)
;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL)
;;  pred:       35
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 98 159 160 161 162 163 196 197 198 199
(code_label 286 318 246 30 34 (nil) [1 uses])
(note 246 286 247 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 247 246 248 30 (parallel [
            (set (reg:DI 196)
                (plus:DI (reg:DI 164)
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":41:33 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 248 247 249 30 (set (reg:SI 198)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -196 [0xffffffffffffff3c])) [13 i+0 S4 A32])) "queryTAD.c":41:33 67 {*movsi_internal}
     (nil))
(insn 249 248 250 30 (set (reg:DI 197)
        (sign_extend:DI (reg:SI 198))) "queryTAD.c":41:33 128 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 198)
        (nil)))
(insn 250 249 251 30 (parallel [
            (set (reg:DI 199)
                (ashift:DI (reg:DI 197)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":41:33 520 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 197)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 251 250 252 30 (parallel [
            (set (reg/f:DI 98 [ _38 ])
                (plus:DI (reg:DI 196)
                    (reg:DI 199)))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":41:33 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 199)
        (expr_list:REG_DEAD (reg:DI 196)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 252 251 253 30 (set (reg:DI 159 [ _114 ])
        (reg/f:DI 98 [ _38 ])) "queryTAD.c":41:33 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 98 [ _38 ])
        (nil)))
(insn 253 252 254 30 (parallel [
            (set (reg:DI 160 [ _115 ])
                (lshiftrt:DI (reg:DI 159 [ _114 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":41:33 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 254 253 255 30 (parallel [
            (set (reg:DI 161 [ _116 ])
                (plus:DI (reg:DI 160 [ _115 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":41:33 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 160 [ _115 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 255 254 256 30 (set (reg/f:DI 162 [ _117 ])
        (reg:DI 161 [ _116 ])) "queryTAD.c":41:33 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 161 [ _116 ])
        (nil)))
(insn 256 255 257 30 (set (reg:QI 163 [ _118 ])
        (mem:QI (reg/f:DI 162 [ _117 ]) [10 *_117+0 S1 A8])) "queryTAD.c":41:33 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 162 [ _117 ])
        (nil)))
(insn 257 256 258 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 163 [ _118 ])
            (const_int 0 [0]))) "queryTAD.c":41:33 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 163 [ _118 ])
        (nil)))
(jump_insn 258 257 259 30 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 263)
            (pc))) "queryTAD.c":41:33 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 263)
;;  succ:       32 [100.0% (guessed)] 
;;              31 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 159 164 165 166 170

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL)
;;  pred:       30 [0.0% (guessed)]  (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 159
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 159
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 259 258 260 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 260 259 261 31 (set (reg:DI 5 di)
        (reg:DI 159 [ _114 ])) "queryTAD.c":41:33 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 159 [ _114 ])
        (nil)))
(call_insn 261 260 262 31 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":41:33 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 262 261 263)
;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL)
;;  pred:       30 [100.0% (guessed)] 
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 82 83 200 201 202
(code_label 263 262 264 32 31 (nil) [1 uses])
(note 264 263 265 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 265 264 266 32 (set (reg:SI 201)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -196 [0xffffffffffffff3c])) [13 i+0 S4 A32])) "queryTAD.c":41:33 67 {*movsi_internal}
     (nil))
(insn 266 265 267 32 (set (reg:DI 200)
        (sign_extend:DI (reg:SI 201))) "queryTAD.c":41:33 128 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 201)
        (nil)))
(insn 267 266 268 32 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (plus:DI (plus:DI (mult:DI (reg:DI 200)
                        (const_int 8 [0x8]))
                    (reg:DI 164))
                (const_int -160 [0xffffffffffffff60])) [3 months S8 A64])) "queryTAD.c":41:33 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 200)
        (nil)))
(insn 268 267 269 32 (set (reg:DI 202)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -216 [0xffffffffffffff28])) [3 s+0 S8 A64])) "queryTAD.c":41:13 66 {*movdi_internal}
     (nil))
(insn 269 268 270 32 (set (reg:DI 4 si)
        (reg/f:DI 82 [ _1 ])) "queryTAD.c":41:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 82 [ _1 ])
        (nil)))
(insn 270 269 271 32 (set (reg:DI 5 di)
        (reg:DI 202)) "queryTAD.c":41:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 202)
        (nil)))
(call_insn/i 271 270 272 32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcasecmp") [flags 0x41]  <function_decl 0x7fc58ebf9400 strcasecmp>) [0 strcasecmp S1 A8])
            (const_int 0 [0]))) "queryTAD.c":41:13 677 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 272 271 273 32 (set (reg:SI 83 [ _2 ])
        (reg:SI 0 ax)) "queryTAD.c":41:13 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 273 272 274 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 83 [ _2 ])
            (const_int 0 [0]))) "queryTAD.c":41:12 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 83 [ _2 ])
        (nil)))
(jump_insn 274 273 275 32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 281)
            (pc))) "queryTAD.c":41:12 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 281)
;;  succ:       33 (FALLTHRU)
;;              34
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 84 85 203
(note 275 274 276 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 33 (set (reg:SI 203)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -196 [0xffffffffffffff3c])) [13 i+0 S4 A32])) "queryTAD.c":42:21 67 {*movsi_internal}
     (nil))
(insn 277 276 278 33 (parallel [
            (set (reg:SI 84 [ _3 ])
                (plus:SI (reg:SI 203)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":42:21 190 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 203)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -196 [0xffffffffffffff3c])) [13 i+0 S4 A32])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 278 277 319 33 (set (reg:DI 85 [ _5 ])
        (sign_extend:DI (reg:SI 84 [ _3 ]))) "queryTAD.c":42:21 128 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 84 [ _3 ])
        (nil)))
(jump_insn 319 278 320 33 (set (pc)
        (label_ref 295)) "queryTAD.c":42:21 660 {jump}
     (nil)
 -> 295)
;;  succ:       37 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 165 166 170

(barrier 320 319 281)
;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL)
;;  pred:       32
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 281 320 282 34 32 (nil) [1 uses])
(note 282 281 283 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 283 282 284 34 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -196 [0xffffffffffffff3c])) [13 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -196 [0xffffffffffffff3c])) [13 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":40:26 190 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       35 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170

;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL)
;;  pred:       34 (FALLTHRU,DFS_BACK)
;;              29 [always] 
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 284 283 285 35 30 (nil) [1 uses])
(note 285 284 289 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 289 285 290 35 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -196 [0xffffffffffffff3c])) [13 i+0 S4 A32])
            (const_int 11 [0xb]))) "queryTAD.c":40:5 11 {*cmpsi_1}
     (nil))
(jump_insn 290 289 291 35 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 286)
            (pc))) "queryTAD.c":40:5 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 286)
;;  succ:       30
;;              36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (RTL)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 85
(note 291 290 292 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 292 291 295 36 (set (reg:DI 85 [ _5 ])
        (const_int -1 [0xffffffffffffffff])) "queryTAD.c":45:12 66 {*movdi_internal}
     (nil))
;;  succ:       37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 165 166 170

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 38, flags: (RTL)
;;  pred:       36 (FALLTHRU)
;;              33 [always] 
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 165 166
;; lr  def 	 17 [flags] 172
(code_label 295 292 296 37 35 (nil) [1 uses])
(note 296 295 297 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 297 296 22 37 (set (reg:DI 172 [ <retval> ])
        (reg:DI 85 [ _5 ])) 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 85 [ _5 ])
        (nil)))
(insn 22 297 23 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 166)
            (reg:DI 165))) "queryTAD.c":38:29 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 166)
        (nil)))
(jump_insn 23 22 312 37 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) "queryTAD.c":38:29 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 31)
;;  succ:       39
;;              38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165 170 172

;; basic block 38, loop depth 0, maybe hot
;;  prev block 37, next block 39, flags: (RTL)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165 170 172
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165 170
;; lr  def 	 171
(note 312 23 24 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 24 312 25 38 (set (mem:DI (reg:DI 165) [0  S8 A8])
        (const_int 1172321806 [0x45e0360e])) "queryTAD.c":38:29 66 {*movdi_internal}
     (nil))
(insn 25 24 26 38 (set (mem:TI (plus:DI (reg:DI 170)
                (const_int 2147450880 [0x7fff8000])) [10  S16 A8])
        (const_wide_int 0xf5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5)) "queryTAD.c":38:29 65 {*movti_internal}
     (nil))
(insn 26 25 27 38 (set (mem:SI (plus:DI (reg:DI 170)
                (const_int 2147450896 [0x7fff8010])) [10  S4 A8])
        (const_int -168430091 [0xfffffffff5f5f5f5])) "queryTAD.c":38:29 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 170)
        (nil)))
(insn 27 26 28 38 (set (reg:DI 171)
        (mem:DI (plus:DI (reg:DI 165)
                (const_int 248 [0xf8])) [0  S8 A8])) "queryTAD.c":38:29 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 165)
        (nil)))
(insn 28 27 321 38 (set (mem:QI (reg:DI 171) [0  S1 A8])
        (const_int 0 [0])) "queryTAD.c":38:29 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 171)
        (nil)))
(jump_insn 321 28 322 38 (set (pc)
        (label_ref 34)) 660 {jump}
     (nil)
 -> 34)
;;  succ:       40 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172

(barrier 322 321 31)
;; basic block 39, loop depth 0, maybe hot
;;  prev block 38, next block 40, flags: (RTL)
;;  pred:       37
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 170 172
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 170
;; lr  def 	
(code_label 31 322 313 39 15 (nil) [1 uses])
(note 313 31 32 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 32 313 33 39 (set (mem:SI (plus:DI (reg:DI 170)
                (const_int 2147450880 [0x7fff8000])) [10  S4 A8])
        (const_int 0 [0])) "queryTAD.c":38:29 67 {*movsi_internal}
     (nil))
(insn 33 32 34 39 (set (mem:SI (plus:DI (reg:DI 170)
                (const_int 2147450896 [0x7fff8010])) [10  S4 A8])
        (const_int 0 [0])) "queryTAD.c":38:29 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 170)
        (nil)))
;;  succ:       40 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172

;; basic block 40, loop depth 0, maybe hot
;;  prev block 39, next block 41, flags: (RTL)
;;  pred:       39 (FALLTHRU)
;;              38 [always] 
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 34 33 314 40 16 (nil) [1 uses])
(note 314 34 301 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 301 314 302 40 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -8 [0xfffffffffffffff8])) [12 D.3543+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (scratch:DI))
        ]) "queryTAD.c":46:1 978 {stack_protect_test_di}
     (nil))
(jump_insn 302 301 315 40 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 305)
            (pc))) "queryTAD.c":46:1 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 305)
;;  succ:       42
;;              41 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172

;; basic block 41, loop depth 0, maybe hot
;;  prev block 40, next block 42, flags: (RTL)
;;  pred:       40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 315 302 303 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(call_insn 303 315 304 41 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fc58ec4c100 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "queryTAD.c":46:1 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 304 303 305)
;; basic block 42, loop depth 0, maybe hot
;;  prev block 41, next block 1, flags: (RTL)
;;  pred:       40
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172
;; lr  def 	 0 [ax]
(code_label 305 304 316 42 36 (nil) [1 uses])
(note 316 305 306 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 306 316 307 42 (set (reg/i:DI 0 ax)
        (reg:DI 172 [ <retval> ])) "queryTAD.c":46:1 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 172 [ <retval> ])
        (nil)))
(insn 307 306 0 42 (use (reg/i:DI 0 ax)) "queryTAD.c":46:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function dateCmp (dateCmp, funcdef_no=4, decl_uid=3427, cgraph_uid=5, symbol_order=4)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 22 n_edges 31 count 22 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
;; 2 succs { 4 3 }
;; 3 succs { }
;; 4 succs { 5 6 }
;; 5 succs { 21 }
;; 6 succs { 7 8 }
;; 7 succs { 21 }
;; 8 succs { 9 13 }
;; 9 succs { 10 13 }
;; 10 succs { 11 13 }
;; 11 succs { 12 13 }
;; 12 succs { 21 }
;; 13 succs { 14 15 }
;; 14 succs { 21 }
;; 15 succs { 16 18 }
;; 16 succs { 17 18 }
;; 17 succs { 21 }
;; 18 succs { 19 20 }
;; 19 succs { 21 }
;; 20 succs { 21 }
;; 21 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 27.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r96,l0) best AREG, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a18 (r86,l0) best DIREG, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r96,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:7000
  a1(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:8000
  a2(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:6000
  a3(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:6000
  a6(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a11(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a16(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a17(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a18(r86,l0) costs: AREG:6000 DREG:6000 CREG:6000 BREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 CLOBBERED_REGS:6000 Q_REGS:6000 TLS_GOTBASE_REGS:6000 GENERAL_REGS:6000 SSE_FIRST_REG:36000 NO_REX_SSE_REGS:36000 SSE_REGS:36000 MMX_REGS:55000 INT_SSE_REGS:55000 ALL_REGS:746000 MEM:26000
  a19(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a20(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a21(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a22(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:17000
  a23(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:6000
  a24(r92,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:8000
  a25(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a26(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a27(r87,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000

   Insn 118(l0): point = 0
   Insn 117(l0): point = 2
   Insn 113(l0): point = 4
   Insn 110(l0): point = 7
   Insn 130(l0): point = 10
   Insn 105(l0): point = 12
   Insn 104(l0): point = 14
   Insn 103(l0): point = 16
   Insn 102(l0): point = 18
   Insn 100(l0): point = 21
   Insn 99(l0): point = 23
   Insn 98(l0): point = 25
   Insn 128(l0): point = 28
   Insn 93(l0): point = 30
   Insn 92(l0): point = 32
   Insn 91(l0): point = 34
   Insn 90(l0): point = 36
   Insn 88(l0): point = 39
   Insn 87(l0): point = 41
   Insn 86(l0): point = 43
   Insn 84(l0): point = 46
   Insn 83(l0): point = 48
   Insn 82(l0): point = 50
   Insn 126(l0): point = 53
   Insn 77(l0): point = 55
   Insn 75(l0): point = 58
   Insn 74(l0): point = 60
   Insn 73(l0): point = 62
   Insn 124(l0): point = 65
   Insn 68(l0): point = 67
   Insn 66(l0): point = 70
   Insn 65(l0): point = 72
   Insn 64(l0): point = 74
   Insn 62(l0): point = 77
   Insn 61(l0): point = 79
   Insn 60(l0): point = 81
   Insn 58(l0): point = 84
   Insn 57(l0): point = 86
   Insn 56(l0): point = 88
   Insn 54(l0): point = 91
   Insn 53(l0): point = 93
   Insn 52(l0): point = 95
   Insn 122(l0): point = 98
   Insn 47(l0): point = 100
   Insn 45(l0): point = 103
   Insn 44(l0): point = 105
   Insn 43(l0): point = 107
   Insn 120(l0): point = 110
   Insn 38(l0): point = 112
   Insn 37(l0): point = 114
   Insn 36(l0): point = 116
   Insn 34(l0): point = 119
   Insn 33(l0): point = 121
   Insn 32(l0): point = 123
   Insn 31(l0): point = 125
   Insn 27(l0): point = 128
   Insn 26(l0): point = 130
   Insn 24(l0): point = 133
   Insn 23(l0): point = 135
   Insn 22(l0): point = 137
   Insn 21(l0): point = 139
   Insn 20(l0): point = 141
   Insn 19(l0): point = 143
   Insn 18(l0): point = 145
   Insn 17(l0): point = 147
   Insn 16(l0): point = 149
   Insn 15(l0): point = 151
   Insn 14(l0): point = 153
   Insn 13(l0): point = 155
   Insn 12(l0): point = 157
   Insn 11(l0): point = 159
   Insn 7(l0): point = 161
   Insn 6(l0): point = 163
   Insn 5(l0): point = 165
   Insn 4(l0): point = 167
   Insn 3(l0): point = 169
   Insn 2(l0): point = 171
 a0(r96): [3..4]
 a1(r85): [110..112] [98..100] [65..67] [53..55] [28..30] [10..12] [5..7]
 a2(r84): [13..14]
 a3(r109): [17..18]
 a4(r108): [24..25]
 a5(r83): [31..32]
 a6(r107): [35..36]
 a7(r106): [42..43]
 a8(r105): [49..50]
 a9(r104): [61..62]
 a10(r103): [73..74]
 a11(r102): [80..81]
 a12(r101): [87..88]
 a13(r100): [94..95]
 a14(r99): [106..107]
 a15(r98): [115..116]
 a16(r82): [122..123]
 a17(r97): [124..125]
 a18(r86): [131..159]
 a19(r95): [136..137]
 a20(r94): [138..139]
 a21(r91): [138..147]
 a22(r90): [142..151]
 a23(r93): [142..143]
 a24(r92): [144..145]
 a25(r89): [152..153]
 a26(r88): [154..155]
 a27(r87): [156..157]
Compressing live ranges: from 174 to 62 - 35%
Ranges after the compression:
 a0(r96): [0..1]
 a1(r85): [40..41] [36..37] [26..27] [22..23] [12..13] [2..5]
 a2(r84): [6..7]
 a3(r109): [8..9]
 a4(r108): [10..11]
 a5(r83): [14..15]
 a6(r107): [16..17]
 a7(r106): [18..19]
 a8(r105): [20..21]
 a9(r104): [24..25]
 a10(r103): [28..29]
 a11(r102): [30..31]
 a12(r101): [32..33]
 a13(r100): [34..35]
 a14(r99): [38..39]
 a15(r98): [42..43]
 a16(r82): [44..45]
 a17(r97): [46..47]
 a18(r86): [48..61]
 a19(r95): [48..49]
 a20(r94): [50..51]
 a21(r91): [50..55]
 a22(r90): [52..55]
 a23(r93): [52..53]
 a24(r92): [54..55]
 a25(r89): [56..57]
 a26(r88): [58..59]
 a27(r87): [60..61]
  pref0:a0(r96)<-hr0@1500
  pref1:a18(r86)<-hr5@1500
  regions=1, blocks=22, points=62
    allocnos=28 (big 0), copies=0, conflicts=0, ranges=33
Disposition:
   16:r82  l0     0    5:r83  l0     0    2:r84  l0     0    1:r85  l0     0
   18:r86  l0     0   27:r87  l0     1   26:r88  l0     1   25:r89  l0     1
   22:r90  l0     1   21:r91  l0     2   24:r92  l0     4   23:r93  l0     4
   20:r94  l0     1   19:r95  l0     1    0:r96  l0     0   17:r97  l0     0
   15:r98  l0     0   14:r99  l0     0   13:r100 l0     0   12:r101 l0     0
   11:r102 l0     0   10:r103 l0     0    9:r104 l0     0    8:r105 l0     0
    7:r106 l0     0    6:r107 l0     0    4:r108 l0     0    3:r109 l0     0
+++Costs: overall 6000, reg 6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


dateCmp

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8] 37 [r9]
;;  ref usage 	r0={3d,2u} r1={2d,1u} r2={2d,1u} r4={2d,1u} r5={3d,2u} r6={1d,21u} r7={1d,22u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,27u} r17={20d,15u} r18={1d} r19={1d,45u} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d,1u} r37={2d,1u} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={7d,1u} r86={1d,3u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,2u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} 
;;    total ref usage 311{141d,170u,0e} in 77{76 regular + 1 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8] 37 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8] 37 [r9]
;; lr  def 	 17 [flags] 86 87 88 89 90 91 92 93 94 95
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 year1+0 S8 A64])
        (reg:DI 5 di [ year1 ])) "queryTAD.c":48:149 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ year1 ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 year2+0 S8 A64])
        (reg:DI 4 si [ year2 ])) "queryTAD.c":48:149 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ year2 ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 month1+0 S8 A64])
        (reg:DI 1 dx [ month1 ])) "queryTAD.c":48:149 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ month1 ])
        (nil)))
(insn 5 4 6 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 day1+0 S8 A64])
        (reg:DI 2 cx [ day1 ])) "queryTAD.c":48:149 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ day1 ])
        (nil)))
(insn 6 5 7 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [2 month2+0 S8 A64])
        (reg:DI 36 r8 [ month2 ])) "queryTAD.c":48:149 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 36 r8 [ month2 ])
        (nil)))
(insn 7 6 8 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [2 day2+0 S8 A64])
        (reg:DI 37 r9 [ day2 ])) "queryTAD.c":48:149 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r9 [ day2 ])
        (nil)))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg:DI 86 [ _25 ])
        (mem/f/c:DI (reg/f:DI 16 argp) [3 usedFlag+0 S8 A64])) "queryTAD.c":49:8 66 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:DI 87 [ _26 ])
                (lshiftrt:DI (reg:DI 86 [ _25 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":49:8 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 88 [ _27 ])
                (plus:DI (reg:DI 87 [ _26 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":49:8 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 87 [ _26 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 14 13 15 2 (set (reg/f:DI 89 [ _28 ])
        (reg:DI 88 [ _27 ])) "queryTAD.c":49:8 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 88 [ _27 ])
        (nil)))
(insn 15 14 16 2 (set (reg:QI 90 [ _29 ])
        (mem:QI (reg/f:DI 89 [ _28 ]) [10 *_28+0 S1 A8])) "queryTAD.c":49:8 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 89 [ _28 ])
        (nil)))
(insn 16 15 17 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 90 [ _29 ])
            (const_int 0 [0]))) "queryTAD.c":49:8 5 {*cmpqi_ccno_1}
     (nil))
(insn 17 16 18 2 (set (reg:QI 91 [ _30 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "queryTAD.c":49:8 655 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 18 17 19 2 (parallel [
            (set (reg:DI 92 [ _31 ])
                (and:DI (reg:DI 86 [ _25 ])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":49:8 391 {*anddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 19 18 20 2 (set (reg:QI 93 [ _32 ])
        (subreg:QI (reg:DI 92 [ _31 ]) 0)) "queryTAD.c":49:8 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 92 [ _31 ])
        (nil)))
(insn 20 19 21 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:QI 93 [ _32 ])
            (reg:QI 90 [ _29 ]))) "queryTAD.c":49:8 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 93 [ _32 ])
        (expr_list:REG_DEAD (reg:QI 90 [ _29 ])
            (nil))))
(insn 21 20 22 2 (set (reg:QI 94 [ _33 ])
        (ge:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "queryTAD.c":49:8 655 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 22 21 23 2 (parallel [
            (set (reg:QI 95 [ _34 ])
                (and:QI (reg:QI 91 [ _30 ])
                    (reg:QI 94 [ _33 ])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":49:8 396 {*andqi_1}
     (expr_list:REG_DEAD (reg:QI 94 [ _33 ])
        (expr_list:REG_DEAD (reg:QI 91 [ _30 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 23 22 24 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 95 [ _34 ])
            (const_int 0 [0]))) "queryTAD.c":49:8 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 95 [ _34 ])
        (nil)))
(jump_insn 24 23 25 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "queryTAD.c":49:8 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 29)
;;  succ:       4 [100.0% (guessed)] 
;;              3 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [0.0% (guessed)]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 25 24 26 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 3 (set (reg:DI 5 di)
        (reg:DI 86 [ _25 ])) "queryTAD.c":49:8 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 86 [ _25 ])
        (nil)))
(call_insn 27 26 28 3 (call (mem:QI (symbol_ref:DI ("__asan_report_load1") [flags 0x41]  <function_decl 0x7fc58eea5600 __builtin___asan_report_load1>) [0 __builtin___asan_report_load1 S1 A8])
        (const_int 0 [0])) "queryTAD.c":49:8 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 28 27 29)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2 [100.0% (guessed)] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 97
(code_label 29 28 30 4 38 (nil) [1 uses])
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg/f:DI 97)
        (mem/f/c:DI (reg/f:DI 16 argp) [3 usedFlag+0 S8 A64])) "queryTAD.c":49:8 66 {*movdi_internal}
     (nil))
(insn 32 31 33 4 (set (reg:QI 82 [ _1 ])
        (mem:QI (reg/f:DI 97) [0 *usedFlag_7(D)+0 S1 A8])) "queryTAD.c":49:8 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97)
        (nil)))
(insn 33 32 34 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 82 [ _1 ])
            (const_int 0 [0]))) "queryTAD.c":49:7 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 82 [ _1 ])
        (nil)))
(jump_insn 34 33 35 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 41)
            (pc))) "queryTAD.c":49:7 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 41)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 85 98
(note 35 34 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 5 (set (reg/f:DI 98)
        (mem/f/c:DI (reg/f:DI 16 argp) [3 usedFlag+0 S8 A64])) "queryTAD.c":50:19 66 {*movdi_internal}
     (nil))
(insn 37 36 38 5 (set (mem:QI (reg/f:DI 98) [0 *usedFlag_7(D)+0 S1 A8])
        (const_int 1 [0x1])) "queryTAD.c":50:19 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 98)
        (nil)))
(insn 38 37 120 5 (set (reg:QI 85 [ _4 ])
        (const_int -1 [0xffffffffffffffff])) "queryTAD.c":51:16 69 {*movqi_internal}
     (nil))
(jump_insn 120 38 121 5 (set (pc)
        (label_ref 111)) "queryTAD.c":51:16 660 {jump}
     (nil)
 -> 111)
;;  succ:       21 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85

(barrier 121 120 41)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 99
(code_label 41 121 42 6 39 (nil) [1 uses])
(note 42 41 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 6 (set (reg:DI 99)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 year1+0 S8 A64])) "queryTAD.c":53:8 66 {*movdi_internal}
     (nil))
(insn 44 43 45 6 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 99)
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 year2+0 S8 A64]))) "queryTAD.c":53:8 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 99)
        (nil)))
(jump_insn 45 44 46 6 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) "queryTAD.c":53:8 659 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 50)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 85
(note 46 45 47 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 122 7 (set (reg:QI 85 [ _4 ])
        (const_int 1 [0x1])) "queryTAD.c":54:16 69 {*movqi_internal}
     (nil))
(jump_insn 122 47 123 7 (set (pc)
        (label_ref 111)) "queryTAD.c":54:16 660 {jump}
     (nil)
 -> 111)
;;  succ:       21 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85

(barrier 123 122 50)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 100
(code_label 50 123 51 8 41 (nil) [1 uses])
(note 51 50 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 8 (set (reg:DI 100)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 month1+0 S8 A64])) "queryTAD.c":56:7 66 {*movdi_internal}
     (nil))
(insn 53 52 54 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 100)
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -40 [0xffffffffffffffd8])) [2 month2+0 S8 A64]))) "queryTAD.c":56:7 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 100)
        (nil)))
(jump_insn 54 53 55 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) "queryTAD.c":56:7 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 71)
;;  succ:       9 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 101
(note 55 54 56 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 9 (set (reg:DI 101)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 day1+0 S8 A64])) "queryTAD.c":56:25 66 {*movdi_internal}
     (nil))
(insn 57 56 58 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 101)
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -48 [0xffffffffffffffd0])) [2 day2+0 S8 A64]))) "queryTAD.c":56:25 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 101)
        (nil)))
(jump_insn 58 57 59 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) "queryTAD.c":56:25 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 71)
;;  succ:       10 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 102
(note 59 58 60 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 10 (set (reg:DI 102)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 year1+0 S8 A64])) "queryTAD.c":56:39 66 {*movdi_internal}
     (nil))
(insn 61 60 62 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 102)
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 year2+0 S8 A64]))) "queryTAD.c":56:39 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 102)
        (nil)))
(jump_insn 62 61 63 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) "queryTAD.c":56:39 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 71)
;;  succ:       11 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 103
(note 63 62 64 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 11 (set (reg:DI 103)
        (mem/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [2 time1+0 S8 A64])) "queryTAD.c":56:55 66 {*movdi_internal}
     (nil))
(insn 65 64 66 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 103)
            (mem/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [2 time2+0 S8 A64]))) "queryTAD.c":56:55 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 103)
        (nil)))
(jump_insn 66 65 67 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) "queryTAD.c":56:55 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 71)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 85
(note 67 66 68 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 124 12 (set (reg:QI 85 [ _4 ])
        (const_int 0 [0])) "queryTAD.c":57:16 69 {*movqi_internal}
     (nil))
(jump_insn 124 68 125 12 (set (pc)
        (label_ref 111)) "queryTAD.c":57:16 660 {jump}
     (nil)
 -> 111)
;;  succ:       21 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85

(barrier 125 124 71)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       8
;;              9
;;              10
;;              11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 104
(code_label 71 125 72 13 42 (nil) [4 uses])
(note 72 71 73 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 13 (set (reg:DI 104)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 month1+0 S8 A64])) "queryTAD.c":59:8 66 {*movdi_internal}
     (nil))
(insn 74 73 75 13 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 104)
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -40 [0xffffffffffffffd8])) [2 month2+0 S8 A64]))) "queryTAD.c":59:8 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 104)
        (nil)))
(jump_insn 75 74 76 13 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 80)
            (pc))) "queryTAD.c":59:8 659 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 80)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 85
(note 76 75 77 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 126 14 (set (reg:QI 85 [ _4 ])
        (const_int 1 [0x1])) "queryTAD.c":60:16 69 {*movqi_internal}
     (nil))
(jump_insn 126 77 127 14 (set (pc)
        (label_ref 111)) "queryTAD.c":60:16 660 {jump}
     (nil)
 -> 111)
;;  succ:       21 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85

(barrier 127 126 80)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 105
(code_label 80 127 81 15 43 (nil) [1 uses])
(note 81 80 82 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 15 (set (reg:DI 105)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 month1+0 S8 A64])) "queryTAD.c":62:7 66 {*movdi_internal}
     (nil))
(insn 83 82 84 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 105)
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -40 [0xffffffffffffffd8])) [2 month2+0 S8 A64]))) "queryTAD.c":62:7 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 105)
        (nil)))
(jump_insn 84 83 85 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 96)
            (pc))) "queryTAD.c":62:7 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 96)
;;  succ:       16 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 106
(note 85 84 86 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 16 (set (reg:DI 106)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 day1+0 S8 A64])) "queryTAD.c":62:25 66 {*movdi_internal}
     (nil))
(insn 87 86 88 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 106)
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -48 [0xffffffffffffffd0])) [2 day2+0 S8 A64]))) "queryTAD.c":62:25 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 106)
        (nil)))
(jump_insn 88 87 89 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 96)
            (pc))) "queryTAD.c":62:25 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 96)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 83 85 107
(note 89 88 90 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 17 (set (reg:DI 107)
        (mem/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [2 time1+0 S8 A64])) "queryTAD.c":63:21 66 {*movdi_internal}
     (nil))
(insn 91 90 92 17 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 107)
            (mem/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [2 time2+0 S8 A64]))) "queryTAD.c":63:21 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 107)
        (nil)))
(insn 92 91 93 17 (set (reg:QI 83 [ _2 ])
        (ltu:QI (reg:CC 17 flags)
            (const_int 0 [0]))) "queryTAD.c":63:21 655 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil)))
(insn 93 92 128 17 (set (reg:QI 85 [ _4 ])
        (reg:QI 83 [ _2 ])) "queryTAD.c":63:21 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 83 [ _2 ])
        (nil)))
(jump_insn 128 93 129 17 (set (pc)
        (label_ref 111)) "queryTAD.c":63:21 660 {jump}
     (nil)
 -> 111)
;;  succ:       21 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85

(barrier 129 128 96)
;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       15
;;              16
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 108
(code_label 96 129 97 18 44 (nil) [2 uses])
(note 97 96 98 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 18 (set (reg:DI 108)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 month1+0 S8 A64])) "queryTAD.c":65:8 66 {*movdi_internal}
     (nil))
(insn 99 98 100 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 108)
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -40 [0xffffffffffffffd8])) [2 month2+0 S8 A64]))) "queryTAD.c":65:8 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 108)
        (nil)))
(jump_insn 100 99 101 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 108)
            (pc))) "queryTAD.c":65:8 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 108)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 84 85 109
(note 101 100 102 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 19 (set (reg:DI 109)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 day1+0 S8 A64])) "queryTAD.c":66:21 66 {*movdi_internal}
     (nil))
(insn 103 102 104 19 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 109)
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -48 [0xffffffffffffffd0])) [2 day2+0 S8 A64]))) "queryTAD.c":66:21 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 109)
        (nil)))
(insn 104 103 105 19 (set (reg:QI 84 [ _3 ])
        (ltu:QI (reg:CC 17 flags)
            (const_int 0 [0]))) "queryTAD.c":66:21 655 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil)))
(insn 105 104 130 19 (set (reg:QI 85 [ _4 ])
        (reg:QI 84 [ _3 ])) "queryTAD.c":66:21 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 84 [ _3 ])
        (nil)))
(jump_insn 130 105 131 19 (set (pc)
        (label_ref 111)) "queryTAD.c":66:21 660 {jump}
     (nil)
 -> 111)
;;  succ:       21 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85

(barrier 131 130 108)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 85
(code_label 108 131 109 20 45 (nil) [1 uses])
(note 109 108 110 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 111 20 (set (reg:QI 85 [ _4 ])
        (const_int -1 [0xffffffffffffffff])) "queryTAD.c":68:12 69 {*movqi_internal}
     (nil))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 1, flags: (RTL)
;;  pred:       20 (FALLTHRU)
;;              5 [always] 
;;              7 [always] 
;;              12 [always] 
;;              14 [always] 
;;              17 [always] 
;;              19 [always] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  def 	 0 [ax] 96
(code_label 111 110 112 21 40 (nil) [6 uses])
(note 112 111 113 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 117 21 (set (reg:QI 96 [ <retval> ])
        (reg:QI 85 [ _4 ])) 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 85 [ _4 ])
        (nil)))
(insn 117 113 118 21 (set (reg/i:QI 0 ax)
        (reg:QI 96 [ <retval> ])) "queryTAD.c":69:1 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 96 [ <retval> ])
        (nil)))
(insn 118 117 0 21 (use (reg/i:QI 0 ax)) "queryTAD.c":69:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function addOldest (addOldest, funcdef_no=5, decl_uid=3382, cgraph_uid=6, symbol_order=5)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 28 n_edges 28 count 28 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 27 26
;; 2 succs { 4 3 }
;; 3 succs { }
;; 4 succs { 6 5 }
;; 5 succs { }
;; 6 succs { 8 7 }
;; 7 succs { }
;; 8 succs { 10 9 }
;; 9 succs { }
;; 10 succs { 12 11 }
;; 11 succs { }
;; 12 succs { 13 27 }
;; 13 succs { 15 14 }
;; 14 succs { }
;; 15 succs { 17 16 }
;; 16 succs { }
;; 17 succs { 19 18 }
;; 18 succs { }
;; 19 succs { 21 20 }
;; 20 succs { }
;; 21 succs { 23 22 }
;; 22 succs { }
;; 23 succs { 25 24 }
;; 24 succs { }
;; 25 succs { 27 }
;; 27 succs { 26 }
;; 26 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 47.
verify found no changes in insn with uid = 85.
verify found no changes in insn with uid = 111.
verify found no changes in insn with uid = 137.
verify found no changes in insn with uid = 154.
verify found no changes in insn with uid = 173.
verify found no changes in insn with uid = 198.
verify found no changes in insn with uid = 225.
verify found no changes in insn with uid = 252.
verify found no changes in insn with uid = 279.
verify found no changes in insn with uid = 306.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r243: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r243,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r242: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r242,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r241,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r240: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r240,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r239,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r238,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r237,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r236: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r236,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r235,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r234,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r233,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r232,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r231,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r230,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r229,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r228,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r227,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r226,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r225,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r224,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r223,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r222,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r221,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r220,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r219,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r218,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r217,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r216: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a86 (r216,l0) best CREG, allocno GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r215,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r214,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r213,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r212,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r211,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r210,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r209,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r208,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a118 (r207,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a130 (r206,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a129 (r205,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a131 (r204,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a132 (r203,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a138 (r202,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a137 (r201,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a139 (r200,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a140 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a152 (r198,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a151 (r197,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a153 (r196,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a154 (r195,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a161 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r193,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r189,l0) best DIREG, allocno GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a17 (r184,l0) best DIREG, allocno GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r182,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a32 (r179,l0) best DIREG, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a47 (r174,l0) best DIREG, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a62 (r169,l0) best DIREG, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a75 (r164,l0) best DIREG, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a92 (r159,l0) best DIREG, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a106 (r154,l0) best DIREG, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a121 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a122 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a123 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a124 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a120 (r149,l0) best DIREG, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a143 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a144 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a145 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a146 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a142 (r144,l0) best DIREG, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a156 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a157 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a158 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a159 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a155 (r139,l0) best DIREG, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a125 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a147 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a160 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a83 (r107,l0) best AREG, allocno GENERAL_REGS
    r106: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a84 (r106,l0) best DIREG, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a85 (r101,l0) best DREG, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a105 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a112 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a113 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a119 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a126 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a128 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a127 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a133 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a134 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a136 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a135 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a141 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a148 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a150 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a149 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:39000 INT_SSE_REGS:39000 ALL_REGS:636000 MEM:17000
  a1(r243,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a2(r189,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a3(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a4(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a5(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a6(r190,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a7(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a8(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a9(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a10(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a11(r241,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:52000 NO_REX_SSE_REGS:52000 SSE_REGS:52000 MMX_REGS:90000 INT_SSE_REGS:90000 ALL_REGS:1472000 MEM:32000
  a12(r242,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a13(r240,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:16000
  a14(r239,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:39000 INT_SSE_REGS:39000 ALL_REGS:636000 MEM:17000
  a16(r238,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a17(r184,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a18(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a19(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a20(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a21(r185,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a22(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a23(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a24(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a25(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a26(r236,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:52000 NO_REX_SSE_REGS:52000 SSE_REGS:52000 MMX_REGS:90000 INT_SSE_REGS:90000 ALL_REGS:1472000 MEM:32000
  a27(r237,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a28(r235,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:16000
  a29(r234,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a30(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:39000 INT_SSE_REGS:39000 ALL_REGS:636000 MEM:17000
  a31(r233,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a32(r179,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a33(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a34(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a35(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a36(r180,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a37(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a38(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a39(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a40(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a41(r231,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:52000 NO_REX_SSE_REGS:52000 SSE_REGS:52000 MMX_REGS:90000 INT_SSE_REGS:90000 ALL_REGS:1472000 MEM:32000
  a42(r232,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a43(r230,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:16000
  a44(r229,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a45(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:39000 INT_SSE_REGS:39000 ALL_REGS:636000 MEM:17000
  a46(r228,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a47(r174,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a48(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a49(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a50(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a51(r175,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a52(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a53(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a54(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a55(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a56(r226,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:52000 NO_REX_SSE_REGS:52000 SSE_REGS:52000 MMX_REGS:90000 INT_SSE_REGS:90000 ALL_REGS:1472000 MEM:32000
  a57(r227,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a58(r225,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:16000
  a59(r224,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a60(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:39000 INT_SSE_REGS:39000 ALL_REGS:636000 MEM:17000
  a61(r223,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a62(r169,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a63(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a64(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a65(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a66(r170,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a67(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a68(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a69(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a70(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a71(r221,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:52000 NO_REX_SSE_REGS:52000 SSE_REGS:52000 MMX_REGS:90000 INT_SSE_REGS:90000 ALL_REGS:1472000 MEM:32000
  a72(r222,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a73(r220,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:16000
  a74(r219,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a75(r164,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a76(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a77(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a78(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a79(r165,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a80(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a81(r218,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a82(r217,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a83(r107,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:11000
  a84(r106,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a85(r101,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a86(r216,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a87(r96,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a88(r215,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a89(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a90(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a91(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:39000 INT_SSE_REGS:39000 ALL_REGS:636000 MEM:17000
  a92(r159,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a93(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a94(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a95(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a96(r160,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a97(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a98(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a99(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a100(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a101(r213,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:52000 NO_REX_SSE_REGS:52000 SSE_REGS:52000 MMX_REGS:90000 INT_SSE_REGS:90000 ALL_REGS:1472000 MEM:32000
  a102(r214,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a103(r212,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:16000
  a104(r211,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a105(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:39000 INT_SSE_REGS:39000 ALL_REGS:636000 MEM:17000
  a106(r154,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a107(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a108(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a109(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a110(r155,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a111(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a112(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a113(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a114(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a115(r209,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:52000 NO_REX_SSE_REGS:52000 SSE_REGS:52000 MMX_REGS:90000 INT_SSE_REGS:90000 ALL_REGS:1472000 MEM:32000
  a116(r210,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a117(r208,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:16000
  a118(r207,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a119(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:39000 INT_SSE_REGS:39000 ALL_REGS:636000 MEM:17000
  a120(r149,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a121(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a122(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a123(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a124(r150,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a125(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a126(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a127(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a128(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a129(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:52000 NO_REX_SSE_REGS:52000 SSE_REGS:52000 MMX_REGS:90000 INT_SSE_REGS:90000 ALL_REGS:1472000 MEM:32000
  a130(r206,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a131(r204,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:16000
  a132(r203,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a133(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a134(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a135(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a136(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a137(r201,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:52000 NO_REX_SSE_REGS:52000 SSE_REGS:52000 MMX_REGS:90000 INT_SSE_REGS:90000 ALL_REGS:1472000 MEM:32000
  a138(r202,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a139(r200,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:16000
  a140(r199,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a141(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:39000 INT_SSE_REGS:39000 ALL_REGS:636000 MEM:17000
  a142(r144,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a143(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a144(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a145(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a146(r145,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a147(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a148(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a149(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a150(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a151(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:52000 NO_REX_SSE_REGS:52000 SSE_REGS:52000 MMX_REGS:90000 INT_SSE_REGS:90000 ALL_REGS:1472000 MEM:32000
  a152(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a153(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:16000
  a154(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a155(r139,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a156(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a157(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a158(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a159(r140,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a160(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a161(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000

   Insn 320(l0): point = 1
   Insn 311(l0): point = 4
   Insn 310(l0): point = 6
   Insn 306(l0): point = 9
   Insn 305(l0): point = 11
   Insn 303(l0): point = 14
   Insn 302(l0): point = 16
   Insn 301(l0): point = 18
   Insn 300(l0): point = 20
   Insn 299(l0): point = 22
   Insn 298(l0): point = 24
   Insn 297(l0): point = 26
   Insn 296(l0): point = 28
   Insn 295(l0): point = 30
   Insn 294(l0): point = 32
   Insn 293(l0): point = 34
   Insn 292(l0): point = 36
   Insn 291(l0): point = 38
   Insn 290(l0): point = 40
   Insn 289(l0): point = 42
   Insn 288(l0): point = 44
   Insn 287(l0): point = 46
   Insn 286(l0): point = 48
   Insn 285(l0): point = 50
   Insn 284(l0): point = 52
   Insn 283(l0): point = 54
   Insn 279(l0): point = 57
   Insn 278(l0): point = 59
   Insn 276(l0): point = 62
   Insn 275(l0): point = 64
   Insn 274(l0): point = 66
   Insn 273(l0): point = 68
   Insn 272(l0): point = 70
   Insn 271(l0): point = 72
   Insn 270(l0): point = 74
   Insn 269(l0): point = 76
   Insn 268(l0): point = 78
   Insn 267(l0): point = 80
   Insn 266(l0): point = 82
   Insn 265(l0): point = 84
   Insn 264(l0): point = 86
   Insn 263(l0): point = 88
   Insn 262(l0): point = 90
   Insn 261(l0): point = 92
   Insn 260(l0): point = 94
   Insn 259(l0): point = 96
   Insn 258(l0): point = 98
   Insn 257(l0): point = 100
   Insn 256(l0): point = 102
   Insn 252(l0): point = 105
   Insn 251(l0): point = 107
   Insn 249(l0): point = 110
   Insn 248(l0): point = 112
   Insn 247(l0): point = 114
   Insn 246(l0): point = 116
   Insn 245(l0): point = 118
   Insn 244(l0): point = 120
   Insn 243(l0): point = 122
   Insn 242(l0): point = 124
   Insn 241(l0): point = 126
   Insn 240(l0): point = 128
   Insn 239(l0): point = 130
   Insn 238(l0): point = 132
   Insn 237(l0): point = 134
   Insn 236(l0): point = 136
   Insn 235(l0): point = 138
   Insn 234(l0): point = 140
   Insn 233(l0): point = 142
   Insn 232(l0): point = 144
   Insn 231(l0): point = 146
   Insn 230(l0): point = 148
   Insn 229(l0): point = 150
   Insn 225(l0): point = 153
   Insn 224(l0): point = 155
   Insn 222(l0): point = 158
   Insn 221(l0): point = 160
   Insn 220(l0): point = 162
   Insn 219(l0): point = 164
   Insn 218(l0): point = 166
   Insn 217(l0): point = 168
   Insn 216(l0): point = 170
   Insn 215(l0): point = 172
   Insn 214(l0): point = 174
   Insn 213(l0): point = 176
   Insn 212(l0): point = 178
   Insn 211(l0): point = 180
   Insn 210(l0): point = 182
   Insn 209(l0): point = 184
   Insn 208(l0): point = 186
   Insn 207(l0): point = 188
   Insn 206(l0): point = 190
   Insn 205(l0): point = 192
   Insn 204(l0): point = 194
   Insn 203(l0): point = 196
   Insn 202(l0): point = 198
   Insn 198(l0): point = 201
   Insn 197(l0): point = 203
   Insn 195(l0): point = 206
   Insn 194(l0): point = 208
   Insn 193(l0): point = 210
   Insn 192(l0): point = 212
   Insn 191(l0): point = 214
   Insn 190(l0): point = 216
   Insn 189(l0): point = 218
   Insn 188(l0): point = 220
   Insn 187(l0): point = 222
   Insn 186(l0): point = 224
   Insn 185(l0): point = 226
   Insn 184(l0): point = 228
   Insn 183(l0): point = 230
   Insn 182(l0): point = 232
   Insn 181(l0): point = 234
   Insn 180(l0): point = 236
   Insn 179(l0): point = 238
   Insn 178(l0): point = 240
   Insn 177(l0): point = 242
   Insn 173(l0): point = 245
   Insn 172(l0): point = 247
   Insn 170(l0): point = 250
   Insn 169(l0): point = 252
   Insn 168(l0): point = 254
   Insn 167(l0): point = 256
   Insn 166(l0): point = 258
   Insn 165(l0): point = 260
   Insn 164(l0): point = 262
   Insn 163(l0): point = 264
   Insn 162(l0): point = 266
   Insn 160(l0): point = 269
   Insn 159(l0): point = 271
   Insn 158(l0): point = 273
   Insn 157(l0): point = 275
   Insn 156(l0): point = 277
   Insn 155(l0): point = 279
   Insn 154(l0): point = 281
   Insn 153(l0): point = 283
   Insn 152(l0): point = 285
   Insn 151(l0): point = 287
   Insn 150(l0): point = 289
   Insn 149(l0): point = 291
   Insn 148(l0): point = 293
   Insn 147(l0): point = 295
   Insn 146(l0): point = 297
   Insn 145(l0): point = 299
   Insn 144(l0): point = 301
   Insn 143(l0): point = 303
   Insn 142(l0): point = 305
   Insn 141(l0): point = 307
   Insn 137(l0): point = 310
   Insn 136(l0): point = 312
   Insn 134(l0): point = 315
   Insn 133(l0): point = 317
   Insn 132(l0): point = 319
   Insn 131(l0): point = 321
   Insn 130(l0): point = 323
   Insn 129(l0): point = 325
   Insn 128(l0): point = 327
   Insn 127(l0): point = 329
   Insn 126(l0): point = 331
   Insn 125(l0): point = 333
   Insn 124(l0): point = 335
   Insn 123(l0): point = 337
   Insn 122(l0): point = 339
   Insn 121(l0): point = 341
   Insn 120(l0): point = 343
   Insn 119(l0): point = 345
   Insn 118(l0): point = 347
   Insn 117(l0): point = 349
   Insn 116(l0): point = 351
   Insn 115(l0): point = 353
   Insn 111(l0): point = 356
   Insn 110(l0): point = 358
   Insn 108(l0): point = 361
   Insn 107(l0): point = 363
   Insn 106(l0): point = 365
   Insn 105(l0): point = 367
   Insn 104(l0): point = 369
   Insn 103(l0): point = 371
   Insn 102(l0): point = 373
   Insn 101(l0): point = 375
   Insn 100(l0): point = 377
   Insn 99(l0): point = 379
   Insn 98(l0): point = 381
   Insn 97(l0): point = 383
   Insn 96(l0): point = 385
   Insn 95(l0): point = 387
   Insn 94(l0): point = 389
   Insn 93(l0): point = 391
   Insn 92(l0): point = 393
   Insn 91(l0): point = 395
   Insn 90(l0): point = 397
   Insn 89(l0): point = 399
   Insn 85(l0): point = 402
   Insn 84(l0): point = 404
   Insn 82(l0): point = 407
   Insn 81(l0): point = 409
   Insn 80(l0): point = 411
   Insn 79(l0): point = 413
   Insn 78(l0): point = 415
   Insn 77(l0): point = 417
   Insn 76(l0): point = 419
   Insn 75(l0): point = 421
   Insn 74(l0): point = 423
   Insn 73(l0): point = 425
   Insn 72(l0): point = 427
   Insn 71(l0): point = 429
   Insn 70(l0): point = 431
   Insn 69(l0): point = 433
   Insn 68(l0): point = 435
   Insn 67(l0): point = 437
   Insn 66(l0): point = 439
   Insn 65(l0): point = 441
   Insn 64(l0): point = 443
   Insn 63(l0): point = 445
   Insn 62(l0): point = 447
   Insn 61(l0): point = 449
   Insn 60(l0): point = 451
   Insn 59(l0): point = 453
   Insn 58(l0): point = 455
   Insn 57(l0): point = 457
   Insn 56(l0): point = 459
   Insn 55(l0): point = 461
   Insn 54(l0): point = 463
   Insn 53(l0): point = 465
   Insn 52(l0): point = 467
   Insn 51(l0): point = 469
   Insn 47(l0): point = 472
   Insn 46(l0): point = 474
   Insn 44(l0): point = 477
   Insn 43(l0): point = 479
   Insn 42(l0): point = 481
   Insn 41(l0): point = 483
   Insn 40(l0): point = 485
   Insn 39(l0): point = 487
   Insn 38(l0): point = 489
   Insn 37(l0): point = 491
   Insn 36(l0): point = 493
   Insn 35(l0): point = 495
   Insn 34(l0): point = 497
   Insn 33(l0): point = 499
   Insn 32(l0): point = 501
   Insn 31(l0): point = 503
   Insn 30(l0): point = 505
   Insn 29(l0): point = 507
   Insn 28(l0): point = 509
   Insn 27(l0): point = 511
   Insn 26(l0): point = 513
   Insn 22(l0): point = 516
   Insn 21(l0): point = 518
   Insn 19(l0): point = 521
   Insn 18(l0): point = 523
   Insn 17(l0): point = 525
   Insn 16(l0): point = 527
   Insn 15(l0): point = 529
   Insn 14(l0): point = 531
   Insn 13(l0): point = 533
   Insn 12(l0): point = 535
   Insn 11(l0): point = 537
   Insn 7(l0): point = 539
   Insn 6(l0): point = 541
   Insn 5(l0): point = 543
   Insn 4(l0): point = 545
   Insn 3(l0): point = 547
   Insn 2(l0): point = 549
 a0(r127): [14..30] [5..8]
 a1(r243): [5..6]
 a2(r189): [12..26]
 a3(r193): [17..18]
 a4(r192): [19..20]
 a5(r191): [21..22]
 a6(r190): [23..24]
 a7(r138): [27..28]
 a8(r126): [31..32]
 a9(r124): [31..48]
 a10(r125): [33..34]
 a11(r241): [39..44] [35..36]
 a12(r242): [37..38]
 a13(r240): [41..46]
 a14(r239): [49..50]
 a15(r123): [62..78] [53..56]
 a16(r238): [53..54]
 a17(r184): [60..74]
 a18(r188): [65..66]
 a19(r187): [67..68]
 a20(r186): [69..70]
 a21(r185): [71..72]
 a22(r137): [75..76]
 a23(r122): [79..80]
 a24(r120): [79..96]
 a25(r121): [81..82]
 a26(r236): [87..92] [83..84]
 a27(r237): [85..86]
 a28(r235): [89..94]
 a29(r234): [97..98]
 a30(r119): [110..126] [101..104]
 a31(r233): [101..102]
 a32(r179): [108..122]
 a33(r183): [113..114]
 a34(r182): [115..116]
 a35(r181): [117..118]
 a36(r180): [119..120]
 a37(r136): [123..124]
 a38(r118): [127..128]
 a39(r116): [127..144]
 a40(r117): [129..130]
 a41(r231): [135..140] [131..132]
 a42(r232): [133..134]
 a43(r230): [137..142]
 a44(r229): [145..146]
 a45(r115): [158..174] [149..152]
 a46(r228): [149..150]
 a47(r174): [156..170]
 a48(r178): [161..162]
 a49(r177): [163..164]
 a50(r176): [165..166]
 a51(r175): [167..168]
 a52(r135): [171..172]
 a53(r114): [175..176]
 a54(r112): [175..192]
 a55(r113): [177..178]
 a56(r226): [183..188] [179..180]
 a57(r227): [181..182]
 a58(r225): [185..190]
 a59(r224): [193..194]
 a60(r111): [206..222] [197..200]
 a61(r223): [197..198]
 a62(r169): [204..218]
 a63(r173): [209..210]
 a64(r172): [211..212]
 a65(r171): [213..214]
 a66(r170): [215..216]
 a67(r134): [219..220]
 a68(r110): [223..224]
 a69(r108): [223..240]
 a70(r109): [225..226]
 a71(r221): [231..236] [227..228]
 a72(r222): [229..230]
 a73(r220): [233..238]
 a74(r219): [241..242]
 a75(r164): [248..262]
 a76(r168): [253..254]
 a77(r167): [255..256]
 a78(r166): [257..258]
 a79(r165): [259..260]
 a80(r133): [263..264]
 a81(r218): [265..266]
 a82(r217): [274..275]
 a83(r107): [276..277]
 a84(r106): [284..307]
 a85(r101): [315..353] [288..309]
 a86(r216): [290..303]
 a87(r96): [361..399] [315..355] [292..309]
 a88(r215): [294..305]
 a89(r91): [407..445] [361..401] [315..355] [296..309]
 a90(r86): [407..469] [361..401] [315..355] [298..309]
 a91(r105): [315..331] [308..309]
 a92(r159): [313..327]
 a93(r163): [318..319]
 a94(r162): [320..321]
 a95(r161): [322..323]
 a96(r160): [324..325]
 a97(r132): [328..329]
 a98(r104): [332..333]
 a99(r102): [332..349]
 a100(r103): [334..335]
 a101(r213): [340..345] [336..337]
 a102(r214): [338..339]
 a103(r212): [342..347]
 a104(r211): [350..351]
 a105(r100): [361..377] [354..355]
 a106(r154): [359..373]
 a107(r158): [364..365]
 a108(r157): [366..367]
 a109(r156): [368..369]
 a110(r155): [370..371]
 a111(r131): [374..375]
 a112(r99): [378..379]
 a113(r97): [378..395]
 a114(r98): [380..381]
 a115(r209): [386..391] [382..383]
 a116(r210): [384..385]
 a117(r208): [388..393]
 a118(r207): [396..397]
 a119(r95): [407..423] [400..401]
 a120(r149): [405..419]
 a121(r153): [410..411]
 a122(r152): [412..413]
 a123(r151): [414..415]
 a124(r150): [416..417]
 a125(r130): [420..421]
 a126(r94): [424..425]
 a127(r92): [424..441]
 a128(r93): [426..427]
 a129(r205): [432..437] [428..429]
 a130(r206): [430..431]
 a131(r204): [434..439]
 a132(r203): [442..443]
 a133(r90): [446..447]
 a134(r89): [448..449]
 a135(r87): [448..465]
 a136(r88): [450..451]
 a137(r201): [456..461] [452..453]
 a138(r202): [454..455]
 a139(r200): [458..463]
 a140(r199): [466..467]
 a141(r85): [477..493] [470..471]
 a142(r144): [475..489]
 a143(r148): [480..481]
 a144(r147): [482..483]
 a145(r146): [484..485]
 a146(r145): [486..487]
 a147(r129): [490..491]
 a148(r84): [494..495]
 a149(r82): [494..511]
 a150(r83): [496..497]
 a151(r197): [502..507] [498..499]
 a152(r198): [500..501]
 a153(r196): [504..509]
 a154(r195): [512..513]
 a155(r139): [519..533]
 a156(r143): [524..525]
 a157(r142): [526..527]
 a158(r141): [528..529]
 a159(r140): [530..531]
 a160(r128): [534..535]
 a161(r194): [536..537]
Compressing live ranges: from 552 to 260 - 47%
Ranges after the compression:
 a0(r127): [0..11]
 a1(r243): [0..1]
 a2(r189): [2..9]
 a3(r193): [2..3]
 a4(r192): [4..5]
 a5(r191): [6..7]
 a6(r190): [8..9]
 a7(r138): [10..11]
 a8(r126): [12..13]
 a9(r124): [12..21]
 a10(r125): [14..15]
 a11(r241): [20..21] [16..17]
 a12(r242): [18..19]
 a13(r240): [20..21]
 a14(r239): [22..23]
 a15(r123): [24..35]
 a16(r238): [24..25]
 a17(r184): [26..33]
 a18(r188): [26..27]
 a19(r187): [28..29]
 a20(r186): [30..31]
 a21(r185): [32..33]
 a22(r137): [34..35]
 a23(r122): [36..37]
 a24(r120): [36..45]
 a25(r121): [38..39]
 a26(r236): [44..45] [40..41]
 a27(r237): [42..43]
 a28(r235): [44..45]
 a29(r234): [46..47]
 a30(r119): [48..59]
 a31(r233): [48..49]
 a32(r179): [50..57]
 a33(r183): [50..51]
 a34(r182): [52..53]
 a35(r181): [54..55]
 a36(r180): [56..57]
 a37(r136): [58..59]
 a38(r118): [60..61]
 a39(r116): [60..69]
 a40(r117): [62..63]
 a41(r231): [68..69] [64..65]
 a42(r232): [66..67]
 a43(r230): [68..69]
 a44(r229): [70..71]
 a45(r115): [72..83]
 a46(r228): [72..73]
 a47(r174): [74..81]
 a48(r178): [74..75]
 a49(r177): [76..77]
 a50(r176): [78..79]
 a51(r175): [80..81]
 a52(r135): [82..83]
 a53(r114): [84..85]
 a54(r112): [84..93]
 a55(r113): [86..87]
 a56(r226): [92..93] [88..89]
 a57(r227): [90..91]
 a58(r225): [92..93]
 a59(r224): [94..95]
 a60(r111): [96..107]
 a61(r223): [96..97]
 a62(r169): [98..105]
 a63(r173): [98..99]
 a64(r172): [100..101]
 a65(r171): [102..103]
 a66(r170): [104..105]
 a67(r134): [106..107]
 a68(r110): [108..109]
 a69(r108): [108..117]
 a70(r109): [110..111]
 a71(r221): [116..117] [112..113]
 a72(r222): [114..115]
 a73(r220): [116..117]
 a74(r219): [118..119]
 a75(r164): [120..127]
 a76(r168): [120..121]
 a77(r167): [122..123]
 a78(r166): [124..125]
 a79(r165): [126..127]
 a80(r133): [128..129]
 a81(r218): [130..131]
 a82(r217): [132..133]
 a83(r107): [134..135]
 a84(r106): [136..137]
 a85(r101): [136..161]
 a86(r216): [136..137]
 a87(r96): [136..185]
 a88(r215): [136..137]
 a89(r91): [136..209]
 a90(r86): [136..223]
 a91(r105): [138..149]
 a92(r159): [140..147]
 a93(r163): [140..141]
 a94(r162): [142..143]
 a95(r161): [144..145]
 a96(r160): [146..147]
 a97(r132): [148..149]
 a98(r104): [150..151]
 a99(r102): [150..159]
 a100(r103): [152..153]
 a101(r213): [158..159] [154..155]
 a102(r214): [156..157]
 a103(r212): [158..159]
 a104(r211): [160..161]
 a105(r100): [162..173]
 a106(r154): [164..171]
 a107(r158): [164..165]
 a108(r157): [166..167]
 a109(r156): [168..169]
 a110(r155): [170..171]
 a111(r131): [172..173]
 a112(r99): [174..175]
 a113(r97): [174..183]
 a114(r98): [176..177]
 a115(r209): [182..183] [178..179]
 a116(r210): [180..181]
 a117(r208): [182..183]
 a118(r207): [184..185]
 a119(r95): [186..197]
 a120(r149): [188..195]
 a121(r153): [188..189]
 a122(r152): [190..191]
 a123(r151): [192..193]
 a124(r150): [194..195]
 a125(r130): [196..197]
 a126(r94): [198..199]
 a127(r92): [198..207]
 a128(r93): [200..201]
 a129(r205): [206..207] [202..203]
 a130(r206): [204..205]
 a131(r204): [206..207]
 a132(r203): [208..209]
 a133(r90): [210..211]
 a134(r89): [212..213]
 a135(r87): [212..221]
 a136(r88): [214..215]
 a137(r201): [220..221] [216..217]
 a138(r202): [218..219]
 a139(r200): [220..221]
 a140(r199): [222..223]
 a141(r85): [224..235]
 a142(r144): [226..233]
 a143(r148): [226..227]
 a144(r147): [228..229]
 a145(r146): [230..231]
 a146(r145): [232..233]
 a147(r129): [234..235]
 a148(r84): [236..237]
 a149(r82): [236..245]
 a150(r83): [238..239]
 a151(r197): [244..245] [240..241]
 a152(r198): [242..243]
 a153(r196): [244..245]
 a154(r195): [246..247]
 a155(r139): [248..255]
 a156(r143): [248..249]
 a157(r142): [250..251]
 a158(r141): [252..253]
 a159(r140): [254..255]
 a160(r128): [256..257]
 a161(r194): [258..259]
  pref0:a86(r216)<-hr2@1500
  pref1:a2(r189)<-hr5@1500
  pref2:a17(r184)<-hr5@1500
  pref3:a32(r179)<-hr5@1500
  pref4:a47(r174)<-hr5@1500
  pref5:a62(r169)<-hr5@1500
  pref6:a75(r164)<-hr5@1500
  pref7:a92(r159)<-hr5@1500
  pref8:a106(r154)<-hr5@1500
  pref9:a120(r149)<-hr5@1500
  pref10:a142(r144)<-hr5@1500
  pref11:a155(r139)<-hr5@1500
  pref12:a83(r107)<-hr0@1500
  pref13:a84(r106)<-hr5@1500
  pref14:a85(r101)<-hr1@1500
  regions=1, blocks=28, points=260
    allocnos=162 (big 0), copies=0, conflicts=0, ranges=172
Disposition:
  149:r82  l0     2  150:r83  l0     0  148:r84  l0     0  141:r85  l0     0
   90:r86  l0     2  135:r87  l0     4  136:r88  l0     0  134:r89  l0     0
  133:r90  l0     0   89:r91  l0    36  127:r92  l0     4  128:r93  l0     0
  126:r94  l0     0  119:r95  l0     0   87:r96  l0    38  113:r97  l0     4
  114:r98  l0     0  112:r99  l0     0  105:r100 l0     0   85:r101 l0     4
   99:r102 l0     5  100:r103 l0     0   98:r104 l0     0   91:r105 l0     0
   84:r106 l0     0   83:r107 l0     0   69:r108 l0     2   70:r109 l0     0
   68:r110 l0     0   60:r111 l0     0   54:r112 l0     2   55:r113 l0     0
   53:r114 l0     0   45:r115 l0     0   39:r116 l0     2   40:r117 l0     0
   38:r118 l0     0   30:r119 l0     0   24:r120 l0     2   25:r121 l0     0
   23:r122 l0     0   15:r123 l0     0    9:r124 l0     2   10:r125 l0     0
    8:r126 l0     0    0:r127 l0     0  160:r128 l0     0  147:r129 l0     1
  125:r130 l0     1  111:r131 l0     1   97:r132 l0     1   80:r133 l0     0
   67:r134 l0     1   52:r135 l0     1   37:r136 l0     1   22:r137 l0     1
    7:r138 l0     1  155:r139 l0     0  159:r140 l0     1  158:r141 l0     1
  157:r142 l0     1  156:r143 l0     1  142:r144 l0     1  146:r145 l0     2
  145:r146 l0     2  144:r147 l0     2  143:r148 l0     2  120:r149 l0     1
  124:r150 l0     4  123:r151 l0     4  122:r152 l0     4  121:r153 l0     4
  106:r154 l0     1  110:r155 l0     4  109:r156 l0     4  108:r157 l0     4
  107:r158 l0     4   92:r159 l0     1   96:r160 l0     5   95:r161 l0     5
   94:r162 l0     5   93:r163 l0     5   75:r164 l0     0   79:r165 l0     1
   78:r166 l0     1   77:r167 l0     1   76:r168 l0     1   62:r169 l0     1
   66:r170 l0     2   65:r171 l0     2   64:r172 l0     2   63:r173 l0     2
   47:r174 l0     1   51:r175 l0     2   50:r176 l0     2   49:r177 l0     2
   48:r178 l0     2   32:r179 l0     1   36:r180 l0     2   35:r181 l0     2
   34:r182 l0     2   33:r183 l0     2   17:r184 l0     1   21:r185 l0     2
   20:r186 l0     2   19:r187 l0     2   18:r188 l0     2    2:r189 l0     1
    6:r190 l0     2    5:r191 l0     2    4:r192 l0     2    3:r193 l0     2
  161:r194 l0     0  154:r195 l0     0  153:r196 l0     1  151:r197 l0     0
  152:r198 l0     0  140:r199 l0     0  139:r200 l0     1  137:r201 l0     0
  138:r202 l0     0  132:r203 l0     0  131:r204 l0     1  129:r205 l0     0
  130:r206 l0     0  118:r207 l0     0  117:r208 l0     1  115:r209 l0     0
  116:r210 l0     0  104:r211 l0     0  103:r212 l0     1  101:r213 l0     0
  102:r214 l0     0   88:r215 l0     5   86:r216 l0     1   82:r217 l0     0
   81:r218 l0     0   74:r219 l0     0   73:r220 l0     1   71:r221 l0     0
   72:r222 l0     0   61:r223 l0     1   59:r224 l0     0   58:r225 l0     1
   56:r226 l0     0   57:r227 l0     0   46:r228 l0     1   44:r229 l0     0
   43:r230 l0     1   41:r231 l0     0   42:r232 l0     0   31:r233 l0     1
   29:r234 l0     0   28:r235 l0     1   26:r236 l0     0   27:r237 l0     0
   16:r238 l0     1   14:r239 l0     0   13:r240 l0     1   11:r241 l0     0
   12:r242 l0     0    1:r243 l0     1
+++Costs: overall 33000, reg 33000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


addOldest

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8] 37 [r9]
;;  ref usage 	r0={13d,1u} r1={14d,2u} r2={14d,2u} r4={14d,2u} r5={25d,13u} r6={1d,27u} r7={6d,46u} r8={12d} r9={12d} r10={12d} r11={12d} r12={12d} r13={12d} r14={12d} r15={12d} r16={1d,28u} r17={110d,12u} r18={12d} r19={1d,64u,2e} r20={13d} r21={13d} r22={13d} r23={13d} r24={13d} r25={13d} r26={13d} r27={13d} r28={12d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={14d,2u} r37={14d,2u} r38={12d} r39={12d} r44={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} r53={12d} r54={12d} r55={12d} r56={12d} r57={12d} r58={12d} r59={12d} r60={12d} r61={12d} r62={12d} r63={12d} r64={12d} r65={12d} r66={12d} r67={12d} r68={12d} r69={12d} r70={12d} r71={12d} r72={12d} r73={12d} r74={12d} r75={12d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,2u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,2u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,2u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,2u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,2u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,2u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,2u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,2u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,2u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,2u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,2u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,2u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,2u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,2u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,2u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,2u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,2u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,2u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,2u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,2u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,2u,1e} r197={4d,4u} r198={1d,1u} r199={1d,1u} r200={1d,2u,1e} r201={4d,4u} r202={1d,1u} r203={1d,1u} r204={1d,2u,1e} r205={4d,4u} r206={1d,1u} r207={1d,1u} r208={1d,2u,1e} r209={4d,4u} r210={1d,1u} r211={1d,1u} r212={1d,2u,1e} r213={4d,4u} r214={1d,1u} r215={1d,1u} r216={1d,1u} r217={1d,1u} r218={1d,1u} r219={1d,1u} r220={1d,2u,1e} r221={4d,4u} r222={1d,1u} r223={1d,1u} r224={1d,1u} r225={1d,2u,1e} r226={4d,4u} r227={1d,1u} r228={1d,1u} r229={1d,1u} r230={1d,2u,1e} r231={4d,4u} r232={1d,1u} r233={1d,1u} r234={1d,1u} r235={1d,2u,1e} r236={4d,4u} r237={1d,1u} r238={1d,1u} r239={1d,1u} r240={1d,2u,1e} r241={4d,4u} r242={1d,1u} r243={1d,1u} 
;;    total ref usage 1570{1135d,423u,12e} in 263{251 regular + 12 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8] 37 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8] 37 [r9]
;; lr  def 	 17 [flags] 128 139 140 141 142 143 194
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])
        (reg:DI 5 di [ q ])) "queryTAD.c":71:111 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ q ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])
        (reg:DI 4 si [ ID ])) "queryTAD.c":71:111 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ ID ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [2 month+0 S8 A64])
        (reg:DI 1 dx [ month ])) "queryTAD.c":71:111 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ month ])
        (nil)))
(insn 5 4 6 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [2 dayN+0 S8 A64])
        (reg:DI 2 cx [ dayN ])) "queryTAD.c":71:111 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ dayN ])
        (nil)))
(insn 6 5 7 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -56 [0xffffffffffffffc8])) [2 time+0 S8 A64])
        (reg:DI 36 r8 [ time ])) "queryTAD.c":71:111 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 36 r8 [ time ])
        (nil)))
(insn 7 6 8 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [2 pedestrians+0 S8 A64])
        (reg:DI 37 r9 [ pedestrians ])) "queryTAD.c":71:111 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r9 [ pedestrians ])
        (nil)))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg/f:DI 194)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":72:177 66 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg/f:DI 128 [ _63 ])
                (plus:DI (reg/f:DI 194)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:177 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 194)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])
                    (const_int 24 [0x18]))
                (nil)))))
(insn 13 12 14 2 (set (reg:DI 139 [ _85 ])
        (reg/f:DI 128 [ _63 ])) "queryTAD.c":72:177 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 128 [ _63 ])
        (nil)))
(insn 14 13 15 2 (parallel [
            (set (reg:DI 140 [ _86 ])
                (lshiftrt:DI (reg:DI 139 [ _85 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:177 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 15 14 16 2 (parallel [
            (set (reg:DI 141 [ _87 ])
                (plus:DI (reg:DI 140 [ _86 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:177 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 140 [ _86 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 16 15 17 2 (set (reg/f:DI 142 [ _88 ])
        (reg:DI 141 [ _87 ])) "queryTAD.c":72:177 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 141 [ _87 ])
        (nil)))
(insn 17 16 18 2 (set (reg:QI 143 [ _89 ])
        (mem:QI (reg/f:DI 142 [ _88 ]) [10 *_88+0 S1 A8])) "queryTAD.c":72:177 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 142 [ _88 ])
        (nil)))
(insn 18 17 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 143 [ _89 ])
            (const_int 0 [0]))) "queryTAD.c":72:177 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 143 [ _89 ])
        (nil)))
(jump_insn 19 18 20 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) "queryTAD.c":72:177 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 24)
;;  succ:       4 [100.0% (guessed)] 
;;              3 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [0.0% (guessed)]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (set (reg:DI 5 di)
        (reg:DI 139 [ _85 ])) "queryTAD.c":72:177 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 139 [ _85 ])
        (nil)))
(call_insn 22 21 23 3 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":72:177 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 23 22 24)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2 [100.0% (guessed)] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 83 84 85 129 144 145 146 147 148 195 196 197 198
(code_label 24 23 25 4 47 (nil) [1 uses])
(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 4 (set (reg/f:DI 195)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":72:177 66 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 195)
                (const_int 24 [0x18])) [7 q_49(D)->sensorsID+0 S8 A64])) "queryTAD.c":72:177 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 195)
        (nil)))
(insn 28 27 29 4 (set (reg:DI 196)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])) "queryTAD.c":72:188 66 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:DI 197)
        (reg:DI 196)) "queryTAD.c":72:188 66 {*movdi_internal}
     (nil))
(insn 30 29 31 4 (parallel [
            (set (reg:DI 197)
                (ashift:DI (reg:DI 197)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:188 520 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 31 30 32 4 (parallel [
            (set (reg:DI 197)
                (plus:DI (reg:DI 197)
                    (reg:DI 196)))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:188 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 196)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 196)
                    (const_int 5 [0x5]))
                (nil)))))
(insn 32 31 33 4 (parallel [
            (set (reg:DI 198)
                (ashift:DI (reg:DI 197)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:188 520 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 197)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 33 32 34 4 (set (reg:DI 197)
        (reg:DI 198)) "queryTAD.c":72:188 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 198)
        (nil)))
(insn 34 33 35 4 (set (reg:DI 83 [ _2 ])
        (reg:DI 197)) "queryTAD.c":72:188 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 197)
        (nil)))
(insn 35 34 36 4 (parallel [
            (set (reg:DI 84 [ _3 ])
                (plus:DI (reg:DI 83 [ _2 ])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:188 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 83 [ _2 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 36 35 37 4 (parallel [
            (set (reg/f:DI 85 [ _4 ])
                (plus:DI (reg/f:DI 82 [ _1 ])
                    (reg:DI 84 [ _3 ])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:188 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 84 [ _3 ])
        (expr_list:REG_DEAD (reg/f:DI 82 [ _1 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 37 36 38 4 (parallel [
            (set (reg/f:DI 129 [ _64 ])
                (plus:DI (reg/f:DI 85 [ _4 ])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 38 37 39 4 (set (reg:DI 144 [ _90 ])
        (reg/f:DI 129 [ _64 ])) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 129 [ _64 ])
        (nil)))
(insn 39 38 40 4 (parallel [
            (set (reg:DI 145 [ _91 ])
                (lshiftrt:DI (reg:DI 144 [ _90 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 40 39 41 4 (parallel [
            (set (reg:DI 146 [ _92 ])
                (plus:DI (reg:DI 145 [ _91 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 145 [ _91 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 41 40 42 4 (set (reg/f:DI 147 [ _93 ])
        (reg:DI 146 [ _92 ])) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 146 [ _92 ])
        (nil)))
(insn 42 41 43 4 (set (reg:QI 148 [ _94 ])
        (mem:QI (reg/f:DI 147 [ _93 ]) [10 *_93+0 S1 A8])) "queryTAD.c":72:13 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 147 [ _93 ])
        (nil)))
(insn 43 42 44 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 148 [ _94 ])
            (const_int 0 [0]))) "queryTAD.c":72:13 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 148 [ _94 ])
        (nil)))
(jump_insn 44 43 45 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) "queryTAD.c":72:13 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 49)
;;  succ:       6 [100.0% (guessed)] 
;;              5 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 144

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 [0.0% (guessed)]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 144
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 144
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 45 44 46 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 5 (set (reg:DI 5 di)
        (reg:DI 144 [ _90 ])) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 144 [ _90 ])
        (nil)))
(call_insn 47 46 48 5 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":72:13 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 48 47 49)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4 [100.0% (guessed)] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  def 	 17 [flags] 86 87 88 89 90 91 92 93 94 95 130 149 150 151 152 153 199 200 201 202 203 204 205 206
(code_label 49 48 50 6 48 (nil) [1 uses])
(note 50 49 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 6 (set (reg:DI 86 [ _5 ])
        (mem:DI (plus:DI (reg/f:DI 85 [ _4 ])
                (const_int 48 [0x30])) [2 _4->oldest.time+0 S8 A64])) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 85 [ _4 ])
        (nil)))
(insn 52 51 53 6 (set (reg/f:DI 199)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":72:145 66 {*movdi_internal}
     (nil))
(insn 53 52 54 6 (set (reg/f:DI 87 [ _6 ])
        (mem/f:DI (plus:DI (reg/f:DI 199)
                (const_int 24 [0x18])) [7 q_49(D)->sensorsID+0 S8 A64])) "queryTAD.c":72:145 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 199)
        (nil)))
(insn 54 53 55 6 (set (reg:DI 200)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])) "queryTAD.c":72:156 66 {*movdi_internal}
     (nil))
(insn 55 54 56 6 (set (reg:DI 201)
        (reg:DI 200)) "queryTAD.c":72:156 66 {*movdi_internal}
     (nil))
(insn 56 55 57 6 (parallel [
            (set (reg:DI 201)
                (ashift:DI (reg:DI 201)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:156 520 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 57 56 58 6 (parallel [
            (set (reg:DI 201)
                (plus:DI (reg:DI 201)
                    (reg:DI 200)))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:156 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 200)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 200)
                    (const_int 5 [0x5]))
                (nil)))))
(insn 58 57 59 6 (parallel [
            (set (reg:DI 202)
                (ashift:DI (reg:DI 201)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:156 520 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 201)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 59 58 60 6 (set (reg:DI 201)
        (reg:DI 202)) "queryTAD.c":72:156 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 202)
        (nil)))
(insn 60 59 61 6 (set (reg:DI 88 [ _7 ])
        (reg:DI 201)) "queryTAD.c":72:156 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 201)
        (nil)))
(insn 61 60 62 6 (parallel [
            (set (reg:DI 89 [ _8 ])
                (plus:DI (reg:DI 88 [ _7 ])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:156 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 88 [ _7 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 62 61 63 6 (parallel [
            (set (reg/f:DI 90 [ _9 ])
                (plus:DI (reg/f:DI 87 [ _6 ])
                    (reg:DI 89 [ _8 ])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:156 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 89 [ _8 ])
        (expr_list:REG_DEAD (reg/f:DI 87 [ _6 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 63 62 64 6 (parallel [
            (set (reg/f:DI 91 [ _10 ])
                (plus:DI (reg/f:DI 90 [ _9 ])
                    (const_int 40 [0x28])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 90 [ _9 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 64 63 65 6 (set (reg/f:DI 203)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":72:103 66 {*movdi_internal}
     (nil))
(insn 65 64 66 6 (set (reg/f:DI 92 [ _11 ])
        (mem/f:DI (plus:DI (reg/f:DI 203)
                (const_int 24 [0x18])) [7 q_49(D)->sensorsID+0 S8 A64])) "queryTAD.c":72:103 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 203)
        (nil)))
(insn 66 65 67 6 (set (reg:DI 204)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])) "queryTAD.c":72:114 66 {*movdi_internal}
     (nil))
(insn 67 66 68 6 (set (reg:DI 205)
        (reg:DI 204)) "queryTAD.c":72:114 66 {*movdi_internal}
     (nil))
(insn 68 67 69 6 (parallel [
            (set (reg:DI 205)
                (ashift:DI (reg:DI 205)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:114 520 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 69 68 70 6 (parallel [
            (set (reg:DI 205)
                (plus:DI (reg:DI 205)
                    (reg:DI 204)))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:114 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 204)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 204)
                    (const_int 5 [0x5]))
                (nil)))))
(insn 70 69 71 6 (parallel [
            (set (reg:DI 206)
                (ashift:DI (reg:DI 205)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:114 520 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 205)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 71 70 72 6 (set (reg:DI 205)
        (reg:DI 206)) "queryTAD.c":72:114 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 206)
        (nil)))
(insn 72 71 73 6 (set (reg:DI 93 [ _12 ])
        (reg:DI 205)) "queryTAD.c":72:114 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 205)
        (nil)))
(insn 73 72 74 6 (parallel [
            (set (reg:DI 94 [ _13 ])
                (plus:DI (reg:DI 93 [ _12 ])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:114 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 93 [ _12 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 74 73 75 6 (parallel [
            (set (reg/f:DI 95 [ _14 ])
                (plus:DI (reg/f:DI 92 [ _11 ])
                    (reg:DI 94 [ _13 ])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:114 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 94 [ _13 ])
        (expr_list:REG_DEAD (reg/f:DI 92 [ _11 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 75 74 76 6 (parallel [
            (set (reg/f:DI 130 [ _65 ])
                (plus:DI (reg/f:DI 95 [ _14 ])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 76 75 77 6 (set (reg:DI 149 [ _95 ])
        (reg/f:DI 130 [ _65 ])) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 130 [ _65 ])
        (nil)))
(insn 77 76 78 6 (parallel [
            (set (reg:DI 150 [ _96 ])
                (lshiftrt:DI (reg:DI 149 [ _95 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 78 77 79 6 (parallel [
            (set (reg:DI 151 [ _97 ])
                (plus:DI (reg:DI 150 [ _96 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 150 [ _96 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 79 78 80 6 (set (reg/f:DI 152 [ _98 ])
        (reg:DI 151 [ _97 ])) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 151 [ _97 ])
        (nil)))
(insn 80 79 81 6 (set (reg:QI 153 [ _99 ])
        (mem:QI (reg/f:DI 152 [ _98 ]) [10 *_98+0 S1 A8])) "queryTAD.c":72:13 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 152 [ _98 ])
        (nil)))
(insn 81 80 82 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 153 [ _99 ])
            (const_int 0 [0]))) "queryTAD.c":72:13 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 153 [ _99 ])
        (nil)))
(jump_insn 82 81 83 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 87)
            (pc))) "queryTAD.c":72:13 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 87)
;;  succ:       8 [100.0% (guessed)] 
;;              7 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 91 95 149

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 [0.0% (guessed)]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 149
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 149
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 83 82 84 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 7 (set (reg:DI 5 di)
        (reg:DI 149 [ _95 ])) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 149 [ _95 ])
        (nil)))
(call_insn 85 84 86 7 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":72:13 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 86 85 87)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       6 [100.0% (guessed)] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 91 95
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 95
;; lr  def 	 17 [flags] 96 97 98 99 100 131 154 155 156 157 158 207 208 209 210
(code_label 87 86 88 8 49 (nil) [1 uses])
(note 88 87 89 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 8 (set (reg:DI 96 [ _15 ])
        (mem:DI (plus:DI (reg/f:DI 95 [ _14 ])
                (const_int 72 [0x48])) [2 _14->oldest.dayN+0 S8 A64])) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95 [ _14 ])
        (nil)))
(insn 90 89 91 8 (set (reg/f:DI 207)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":72:61 66 {*movdi_internal}
     (nil))
(insn 91 90 92 8 (set (reg/f:DI 97 [ _16 ])
        (mem/f:DI (plus:DI (reg/f:DI 207)
                (const_int 24 [0x18])) [7 q_49(D)->sensorsID+0 S8 A64])) "queryTAD.c":72:61 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 207)
        (nil)))
(insn 92 91 93 8 (set (reg:DI 208)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])) "queryTAD.c":72:72 66 {*movdi_internal}
     (nil))
(insn 93 92 94 8 (set (reg:DI 209)
        (reg:DI 208)) "queryTAD.c":72:72 66 {*movdi_internal}
     (nil))
(insn 94 93 95 8 (parallel [
            (set (reg:DI 209)
                (ashift:DI (reg:DI 209)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:72 520 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 95 94 96 8 (parallel [
            (set (reg:DI 209)
                (plus:DI (reg:DI 209)
                    (reg:DI 208)))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:72 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 208)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 208)
                    (const_int 5 [0x5]))
                (nil)))))
(insn 96 95 97 8 (parallel [
            (set (reg:DI 210)
                (ashift:DI (reg:DI 209)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:72 520 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 209)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 97 96 98 8 (set (reg:DI 209)
        (reg:DI 210)) "queryTAD.c":72:72 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 210)
        (nil)))
(insn 98 97 99 8 (set (reg:DI 98 [ _17 ])
        (reg:DI 209)) "queryTAD.c":72:72 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 209)
        (nil)))
(insn 99 98 100 8 (parallel [
            (set (reg:DI 99 [ _18 ])
                (plus:DI (reg:DI 98 [ _17 ])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:72 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 98 [ _17 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 100 99 101 8 (parallel [
            (set (reg/f:DI 100 [ _19 ])
                (plus:DI (reg/f:DI 97 [ _16 ])
                    (reg:DI 99 [ _18 ])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:72 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 99 [ _18 ])
        (expr_list:REG_DEAD (reg/f:DI 97 [ _16 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 101 100 102 8 (parallel [
            (set (reg/f:DI 131 [ _66 ])
                (plus:DI (reg/f:DI 100 [ _19 ])
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 102 101 103 8 (set (reg:DI 154 [ _100 ])
        (reg/f:DI 131 [ _66 ])) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 131 [ _66 ])
        (nil)))
(insn 103 102 104 8 (parallel [
            (set (reg:DI 155 [ _101 ])
                (lshiftrt:DI (reg:DI 154 [ _100 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 104 103 105 8 (parallel [
            (set (reg:DI 156 [ _102 ])
                (plus:DI (reg:DI 155 [ _101 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 155 [ _101 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 105 104 106 8 (set (reg/f:DI 157 [ _103 ])
        (reg:DI 156 [ _102 ])) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 156 [ _102 ])
        (nil)))
(insn 106 105 107 8 (set (reg:QI 158 [ _104 ])
        (mem:QI (reg/f:DI 157 [ _103 ]) [10 *_103+0 S1 A8])) "queryTAD.c":72:13 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 157 [ _103 ])
        (nil)))
(insn 107 106 108 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 158 [ _104 ])
            (const_int 0 [0]))) "queryTAD.c":72:13 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 158 [ _104 ])
        (nil)))
(jump_insn 108 107 109 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 113)
            (pc))) "queryTAD.c":72:13 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 113)
;;  succ:       10 [100.0% (guessed)] 
;;              9 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 91 96 100 154

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 [0.0% (guessed)]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 154
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 154
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 109 108 110 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 111 9 (set (reg:DI 5 di)
        (reg:DI 154 [ _100 ])) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 154 [ _100 ])
        (nil)))
(call_insn 111 110 112 9 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":72:13 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 112 111 113)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       8 [100.0% (guessed)] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 91 96 100
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 100
;; lr  def 	 17 [flags] 101 102 103 104 105 132 159 160 161 162 163 211 212 213 214
(code_label 113 112 114 10 50 (nil) [1 uses])
(note 114 113 115 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 115 114 116 10 (set (reg:DI 101 [ _20 ])
        (mem:DI (plus:DI (reg/f:DI 100 [ _19 ])
                (const_int 64 [0x40])) [2 _19->oldest.month+0 S8 A64])) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 100 [ _19 ])
        (nil)))
(insn 116 115 117 10 (set (reg/f:DI 211)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":72:22 66 {*movdi_internal}
     (nil))
(insn 117 116 118 10 (set (reg/f:DI 102 [ _21 ])
        (mem/f:DI (plus:DI (reg/f:DI 211)
                (const_int 24 [0x18])) [7 q_49(D)->sensorsID+0 S8 A64])) "queryTAD.c":72:22 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 211)
        (nil)))
(insn 118 117 119 10 (set (reg:DI 212)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])) "queryTAD.c":72:33 66 {*movdi_internal}
     (nil))
(insn 119 118 120 10 (set (reg:DI 213)
        (reg:DI 212)) "queryTAD.c":72:33 66 {*movdi_internal}
     (nil))
(insn 120 119 121 10 (parallel [
            (set (reg:DI 213)
                (ashift:DI (reg:DI 213)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:33 520 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 121 120 122 10 (parallel [
            (set (reg:DI 213)
                (plus:DI (reg:DI 213)
                    (reg:DI 212)))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:33 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 212)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 212)
                    (const_int 5 [0x5]))
                (nil)))))
(insn 122 121 123 10 (parallel [
            (set (reg:DI 214)
                (ashift:DI (reg:DI 213)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:33 520 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 213)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 123 122 124 10 (set (reg:DI 213)
        (reg:DI 214)) "queryTAD.c":72:33 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 214)
        (nil)))
(insn 124 123 125 10 (set (reg:DI 103 [ _22 ])
        (reg:DI 213)) "queryTAD.c":72:33 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 213)
        (nil)))
(insn 125 124 126 10 (parallel [
            (set (reg:DI 104 [ _23 ])
                (plus:DI (reg:DI 103 [ _22 ])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:33 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 103 [ _22 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 126 125 127 10 (parallel [
            (set (reg/f:DI 105 [ _24 ])
                (plus:DI (reg/f:DI 102 [ _21 ])
                    (reg:DI 104 [ _23 ])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:33 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 104 [ _23 ])
        (expr_list:REG_DEAD (reg/f:DI 102 [ _21 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 127 126 128 10 (parallel [
            (set (reg/f:DI 132 [ _67 ])
                (plus:DI (reg/f:DI 105 [ _24 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 128 127 129 10 (set (reg:DI 159 [ _105 ])
        (reg/f:DI 132 [ _67 ])) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 132 [ _67 ])
        (nil)))
(insn 129 128 130 10 (parallel [
            (set (reg:DI 160 [ _106 ])
                (lshiftrt:DI (reg:DI 159 [ _105 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 130 129 131 10 (parallel [
            (set (reg:DI 161 [ _107 ])
                (plus:DI (reg:DI 160 [ _106 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 160 [ _106 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 131 130 132 10 (set (reg/f:DI 162 [ _108 ])
        (reg:DI 161 [ _107 ])) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 161 [ _107 ])
        (nil)))
(insn 132 131 133 10 (set (reg:QI 163 [ _109 ])
        (mem:QI (reg/f:DI 162 [ _108 ]) [10 *_108+0 S1 A8])) "queryTAD.c":72:13 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 162 [ _108 ])
        (nil)))
(insn 133 132 134 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 163 [ _109 ])
            (const_int 0 [0]))) "queryTAD.c":72:13 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 163 [ _109 ])
        (nil)))
(jump_insn 134 133 135 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 139)
            (pc))) "queryTAD.c":72:13 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 139)
;;  succ:       12 [100.0% (guessed)] 
;;              11 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 91 96 101 105 159

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 [0.0% (guessed)]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 159
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 159
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 135 134 136 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 136 135 137 11 (set (reg:DI 5 di)
        (reg:DI 159 [ _105 ])) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 159 [ _105 ])
        (nil)))
(call_insn 137 136 138 11 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":72:13 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 138 137 139)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       10 [100.0% (guessed)] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 91 96 101 105
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 91 96 101 105
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 106 107 215 216 217
(code_label 139 138 140 12 51 (nil) [1 uses])
(note 140 139 141 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 141 140 142 12 (set (reg:DI 106 [ _25 ])
        (mem:DI (plus:DI (reg/f:DI 105 [ _24 ])
                (const_int 32 [0x20])) [2 _24->oldest.year+0 S8 A64])) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 105 [ _24 ])
        (nil)))
(insn 142 141 143 12 (set (reg:DI 215)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [2 dayN+0 S8 A64])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(insn 143 142 144 12 (set (reg:DI 216)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [2 month+0 S8 A64])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(insn 144 143 145 12 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
            (nil))))
(insn 145 144 146 12 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [2  S8 A64])
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -56 [0xffffffffffffffc8])) [2 time+0 S8 A64])) "queryTAD.c":72:13 42 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 146 145 147 12 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [2  S8 A64])
        (reg:DI 86 [ _5 ])) "queryTAD.c":72:13 42 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 86 [ _5 ])
        (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
            (nil))))
(insn 147 146 148 12 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [3  S8 A64])
        (reg/f:DI 91 [ _10 ])) "queryTAD.c":72:13 42 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg/f:DI 91 [ _10 ])
        (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
            (nil))))
(insn 148 147 149 12 (set (reg:DI 37 r9)
        (reg:DI 215)) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 215)
        (nil)))
(insn 149 148 150 12 (set (reg:DI 36 r8)
        (reg:DI 96 [ _15 ])) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 96 [ _15 ])
        (nil)))
(insn 150 149 151 12 (set (reg:DI 2 cx)
        (reg:DI 216)) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 216)
        (nil)))
(insn 151 150 152 12 (set (reg:DI 1 dx)
        (reg:DI 101 [ _20 ])) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 101 [ _20 ])
        (nil)))
(insn 152 151 153 12 (set (reg:DI 4 si)
        (mem/c:DI (reg/f:DI 16 argp) [2 year+0 S8 A64])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(insn 153 152 154 12 (set (reg:DI 5 di)
        (reg:DI 106 [ _25 ])) "queryTAD.c":72:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 106 [ _25 ])
        (nil)))
(call_insn 154 153 155 12 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dateCmp") [flags 0x3]  <function_decl 0x7fc58ec06800 dateCmp>) [0 dateCmp S1 A8])
            (const_int 32 [0x20]))) "queryTAD.c":72:13 677 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r9)
        (expr_list:REG_DEAD (reg:DI 36 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (expr_list:DI (use (reg:DI 37 r9))
                            (nil))))))))
(insn 155 154 156 12 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 156 155 157 12 (set (reg:QI 107 [ _26 ])
        (reg:QI 0 ax)) "queryTAD.c":72:13 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax)
        (nil)))
(insn 157 156 158 12 (set (reg:SI 217)
        (sign_extend:SI (reg:QI 107 [ _26 ]))) "queryTAD.c":72:9 134 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 107 [ _26 ])
        (nil)))
(insn 158 157 159 12 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [13 c+0 S4 A32])
        (reg:SI 217)) "queryTAD.c":72:9 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 217)
        (nil)))
(insn 159 158 160 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [13 c+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))) "queryTAD.c":74:7 11 {*cmpsi_1}
     (nil))
(jump_insn 160 159 161 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 319)
            (pc))) "queryTAD.c":74:7 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 319)
;;  succ:       13 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 133 164 165 166 167 168 218
(note 161 160 162 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 162 161 163 13 (set (reg/f:DI 218)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":75:10 66 {*movdi_internal}
     (nil))
(insn 163 162 164 13 (parallel [
            (set (reg/f:DI 133 [ _68 ])
                (plus:DI (reg/f:DI 218)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:10 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 218)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])
                    (const_int 24 [0x18]))
                (nil)))))
(insn 164 163 165 13 (set (reg:DI 164 [ _110 ])
        (reg/f:DI 133 [ _68 ])) "queryTAD.c":75:10 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 133 [ _68 ])
        (nil)))
(insn 165 164 166 13 (parallel [
            (set (reg:DI 165 [ _111 ])
                (lshiftrt:DI (reg:DI 164 [ _110 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:10 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 166 165 167 13 (parallel [
            (set (reg:DI 166 [ _112 ])
                (plus:DI (reg:DI 165 [ _111 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:10 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 165 [ _111 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 167 166 168 13 (set (reg/f:DI 167 [ _113 ])
        (reg:DI 166 [ _112 ])) "queryTAD.c":75:10 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 166 [ _112 ])
        (nil)))
(insn 168 167 169 13 (set (reg:QI 168 [ _114 ])
        (mem:QI (reg/f:DI 167 [ _113 ]) [10 *_113+0 S1 A8])) "queryTAD.c":75:10 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 167 [ _113 ])
        (nil)))
(insn 169 168 170 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 168 [ _114 ])
            (const_int 0 [0]))) "queryTAD.c":75:10 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 168 [ _114 ])
        (nil)))
(jump_insn 170 169 171 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 175)
            (pc))) "queryTAD.c":75:10 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 175)
;;  succ:       15 [100.0% (guessed)] 
;;              14 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 [0.0% (guessed)]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 171 170 172 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 172 171 173 14 (set (reg:DI 5 di)
        (reg:DI 164 [ _110 ])) "queryTAD.c":75:10 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 164 [ _110 ])
        (nil)))
(call_insn 173 172 174 14 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":75:10 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 174 173 175)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       13 [100.0% (guessed)] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 108 109 110 111 134 169 170 171 172 173 219 220 221 222
(code_label 175 174 176 15 53 (nil) [1 uses])
(note 176 175 177 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 177 176 178 15 (set (reg/f:DI 219)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":75:10 66 {*movdi_internal}
     (nil))
(insn 178 177 179 15 (set (reg/f:DI 108 [ _27 ])
        (mem/f:DI (plus:DI (reg/f:DI 219)
                (const_int 24 [0x18])) [7 q_49(D)->sensorsID+0 S8 A64])) "queryTAD.c":75:10 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 219)
        (nil)))
(insn 179 178 180 15 (set (reg:DI 220)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])) "queryTAD.c":75:21 66 {*movdi_internal}
     (nil))
(insn 180 179 181 15 (set (reg:DI 221)
        (reg:DI 220)) "queryTAD.c":75:21 66 {*movdi_internal}
     (nil))
(insn 181 180 182 15 (parallel [
            (set (reg:DI 221)
                (ashift:DI (reg:DI 221)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:21 520 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 182 181 183 15 (parallel [
            (set (reg:DI 221)
                (plus:DI (reg:DI 221)
                    (reg:DI 220)))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:21 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 220)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 220)
                    (const_int 5 [0x5]))
                (nil)))))
(insn 183 182 184 15 (parallel [
            (set (reg:DI 222)
                (ashift:DI (reg:DI 221)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:21 520 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 221)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 184 183 185 15 (set (reg:DI 221)
        (reg:DI 222)) "queryTAD.c":75:21 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 222)
        (nil)))
(insn 185 184 186 15 (set (reg:DI 109 [ _28 ])
        (reg:DI 221)) "queryTAD.c":75:21 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 221)
        (nil)))
(insn 186 185 187 15 (parallel [
            (set (reg:DI 110 [ _29 ])
                (plus:DI (reg:DI 109 [ _28 ])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:21 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 109 [ _28 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 187 186 188 15 (parallel [
            (set (reg/f:DI 111 [ _30 ])
                (plus:DI (reg/f:DI 108 [ _27 ])
                    (reg:DI 110 [ _29 ])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:21 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 110 [ _29 ])
        (expr_list:REG_DEAD (reg/f:DI 108 [ _27 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 188 187 189 15 (parallel [
            (set (reg/f:DI 134 [ _69 ])
                (plus:DI (reg/f:DI 111 [ _30 ])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:40 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 189 188 190 15 (set (reg:DI 169 [ _115 ])
        (reg/f:DI 134 [ _69 ])) "queryTAD.c":75:40 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 134 [ _69 ])
        (nil)))
(insn 190 189 191 15 (parallel [
            (set (reg:DI 170 [ _116 ])
                (lshiftrt:DI (reg:DI 169 [ _115 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:40 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 191 190 192 15 (parallel [
            (set (reg:DI 171 [ _117 ])
                (plus:DI (reg:DI 170 [ _116 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:40 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 170 [ _116 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 192 191 193 15 (set (reg/f:DI 172 [ _118 ])
        (reg:DI 171 [ _117 ])) "queryTAD.c":75:40 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 171 [ _117 ])
        (nil)))
(insn 193 192 194 15 (set (reg:QI 173 [ _119 ])
        (mem:QI (reg/f:DI 172 [ _118 ]) [10 *_118+0 S1 A8])) "queryTAD.c":75:40 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 172 [ _118 ])
        (nil)))
(insn 194 193 195 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 173 [ _119 ])
            (const_int 0 [0]))) "queryTAD.c":75:40 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 173 [ _119 ])
        (nil)))
(jump_insn 195 194 196 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 200)
            (pc))) "queryTAD.c":75:40 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 200)
;;  succ:       17 [100.0% (guessed)] 
;;              16 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 111 169

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 [0.0% (guessed)]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 169
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 169
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 196 195 197 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 197 196 198 16 (set (reg:DI 5 di)
        (reg:DI 169 [ _115 ])) "queryTAD.c":75:40 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 169 [ _115 ])
        (nil)))
(call_insn 198 197 199 16 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":75:40 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 199 198 200)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       15 [100.0% (guessed)] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 111
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 111
;; lr  def 	 17 [flags] 112 113 114 115 135 174 175 176 177 178 223 224 225 226 227
(code_label 200 199 201 17 54 (nil) [1 uses])
(note 201 200 202 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 202 201 203 17 (set (reg:DI 223)
        (mem/c:DI (reg/f:DI 16 argp) [2 year+0 S8 A64])) "queryTAD.c":75:40 66 {*movdi_internal}
     (nil))
(insn 203 202 204 17 (set (mem:DI (plus:DI (reg/f:DI 111 [ _30 ])
                (const_int 32 [0x20])) [2 _30->oldest.year+0 S8 A64])
        (reg:DI 223)) "queryTAD.c":75:40 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 223)
        (expr_list:REG_DEAD (reg/f:DI 111 [ _30 ])
            (nil))))
(insn 204 203 205 17 (set (reg/f:DI 224)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":76:10 66 {*movdi_internal}
     (nil))
(insn 205 204 206 17 (set (reg/f:DI 112 [ _31 ])
        (mem/f:DI (plus:DI (reg/f:DI 224)
                (const_int 24 [0x18])) [7 q_49(D)->sensorsID+0 S8 A64])) "queryTAD.c":76:10 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 224)
        (nil)))
(insn 206 205 207 17 (set (reg:DI 225)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])) "queryTAD.c":76:21 66 {*movdi_internal}
     (nil))
(insn 207 206 208 17 (set (reg:DI 226)
        (reg:DI 225)) "queryTAD.c":76:21 66 {*movdi_internal}
     (nil))
(insn 208 207 209 17 (parallel [
            (set (reg:DI 226)
                (ashift:DI (reg:DI 226)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":76:21 520 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 209 208 210 17 (parallel [
            (set (reg:DI 226)
                (plus:DI (reg:DI 226)
                    (reg:DI 225)))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":76:21 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 225)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 225)
                    (const_int 5 [0x5]))
                (nil)))))
(insn 210 209 211 17 (parallel [
            (set (reg:DI 227)
                (ashift:DI (reg:DI 226)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":76:21 520 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 226)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 211 210 212 17 (set (reg:DI 226)
        (reg:DI 227)) "queryTAD.c":76:21 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 227)
        (nil)))
(insn 212 211 213 17 (set (reg:DI 113 [ _32 ])
        (reg:DI 226)) "queryTAD.c":76:21 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 226)
        (nil)))
(insn 213 212 214 17 (parallel [
            (set (reg:DI 114 [ _33 ])
                (plus:DI (reg:DI 113 [ _32 ])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":76:21 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 113 [ _32 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 214 213 215 17 (parallel [
            (set (reg/f:DI 115 [ _34 ])
                (plus:DI (reg/f:DI 112 [ _31 ])
                    (reg:DI 114 [ _33 ])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":76:21 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 114 [ _33 ])
        (expr_list:REG_DEAD (reg/f:DI 112 [ _31 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 215 214 216 17 (parallel [
            (set (reg/f:DI 135 [ _70 ])
                (plus:DI (reg/f:DI 115 [ _34 ])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":76:45 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 216 215 217 17 (set (reg:DI 174 [ _120 ])
        (reg/f:DI 135 [ _70 ])) "queryTAD.c":76:45 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 135 [ _70 ])
        (nil)))
(insn 217 216 218 17 (parallel [
            (set (reg:DI 175 [ _121 ])
                (lshiftrt:DI (reg:DI 174 [ _120 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":76:45 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 218 217 219 17 (parallel [
            (set (reg:DI 176 [ _122 ])
                (plus:DI (reg:DI 175 [ _121 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":76:45 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 175 [ _121 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 219 218 220 17 (set (reg/f:DI 177 [ _123 ])
        (reg:DI 176 [ _122 ])) "queryTAD.c":76:45 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 176 [ _122 ])
        (nil)))
(insn 220 219 221 17 (set (reg:QI 178 [ _124 ])
        (mem:QI (reg/f:DI 177 [ _123 ]) [10 *_123+0 S1 A8])) "queryTAD.c":76:45 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 177 [ _123 ])
        (nil)))
(insn 221 220 222 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 178 [ _124 ])
            (const_int 0 [0]))) "queryTAD.c":76:45 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 178 [ _124 ])
        (nil)))
(jump_insn 222 221 223 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 227)
            (pc))) "queryTAD.c":76:45 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 227)
;;  succ:       19 [100.0% (guessed)] 
;;              18 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 115 174

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       17 [0.0% (guessed)]  (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 174
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 174
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 223 222 224 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 18 (set (reg:DI 5 di)
        (reg:DI 174 [ _120 ])) "queryTAD.c":76:45 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 174 [ _120 ])
        (nil)))
(call_insn 225 224 226 18 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":76:45 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 226 225 227)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       17 [100.0% (guessed)] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 115
;; lr  def 	 17 [flags] 116 117 118 119 136 179 180 181 182 183 228 229 230 231 232
(code_label 227 226 228 19 55 (nil) [1 uses])
(note 228 227 229 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 229 228 230 19 (set (reg:DI 228)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [2 pedestrians+0 S8 A64])) "queryTAD.c":76:45 66 {*movdi_internal}
     (nil))
(insn 230 229 231 19 (set (mem:DI (plus:DI (reg/f:DI 115 [ _34 ])
                (const_int 56 [0x38])) [2 _34->oldest.old_count+0 S8 A64])
        (reg:DI 228)) "queryTAD.c":76:45 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 228)
        (expr_list:REG_DEAD (reg/f:DI 115 [ _34 ])
            (nil))))
(insn 231 230 232 19 (set (reg/f:DI 229)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":77:10 66 {*movdi_internal}
     (nil))
(insn 232 231 233 19 (set (reg/f:DI 116 [ _35 ])
        (mem/f:DI (plus:DI (reg/f:DI 229)
                (const_int 24 [0x18])) [7 q_49(D)->sensorsID+0 S8 A64])) "queryTAD.c":77:10 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 229)
        (nil)))
(insn 233 232 234 19 (set (reg:DI 230)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])) "queryTAD.c":77:21 66 {*movdi_internal}
     (nil))
(insn 234 233 235 19 (set (reg:DI 231)
        (reg:DI 230)) "queryTAD.c":77:21 66 {*movdi_internal}
     (nil))
(insn 235 234 236 19 (parallel [
            (set (reg:DI 231)
                (ashift:DI (reg:DI 231)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":77:21 520 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 236 235 237 19 (parallel [
            (set (reg:DI 231)
                (plus:DI (reg:DI 231)
                    (reg:DI 230)))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":77:21 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 230)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 230)
                    (const_int 5 [0x5]))
                (nil)))))
(insn 237 236 238 19 (parallel [
            (set (reg:DI 232)
                (ashift:DI (reg:DI 231)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":77:21 520 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 231)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 238 237 239 19 (set (reg:DI 231)
        (reg:DI 232)) "queryTAD.c":77:21 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 232)
        (nil)))
(insn 239 238 240 19 (set (reg:DI 117 [ _36 ])
        (reg:DI 231)) "queryTAD.c":77:21 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 231)
        (nil)))
(insn 240 239 241 19 (parallel [
            (set (reg:DI 118 [ _37 ])
                (plus:DI (reg:DI 117 [ _36 ])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":77:21 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 117 [ _36 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 241 240 242 19 (parallel [
            (set (reg/f:DI 119 [ _38 ])
                (plus:DI (reg/f:DI 116 [ _35 ])
                    (reg:DI 118 [ _37 ])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":77:21 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 118 [ _37 ])
        (expr_list:REG_DEAD (reg/f:DI 116 [ _35 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 242 241 243 19 (parallel [
            (set (reg/f:DI 136 [ _71 ])
                (plus:DI (reg/f:DI 119 [ _38 ])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":77:40 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 243 242 244 19 (set (reg:DI 179 [ _125 ])
        (reg/f:DI 136 [ _71 ])) "queryTAD.c":77:40 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 136 [ _71 ])
        (nil)))
(insn 244 243 245 19 (parallel [
            (set (reg:DI 180 [ _126 ])
                (lshiftrt:DI (reg:DI 179 [ _125 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":77:40 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 245 244 246 19 (parallel [
            (set (reg:DI 181 [ _127 ])
                (plus:DI (reg:DI 180 [ _126 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":77:40 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 180 [ _126 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 246 245 247 19 (set (reg/f:DI 182 [ _128 ])
        (reg:DI 181 [ _127 ])) "queryTAD.c":77:40 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 181 [ _127 ])
        (nil)))
(insn 247 246 248 19 (set (reg:QI 183 [ _129 ])
        (mem:QI (reg/f:DI 182 [ _128 ]) [10 *_128+0 S1 A8])) "queryTAD.c":77:40 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 182 [ _128 ])
        (nil)))
(insn 248 247 249 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 183 [ _129 ])
            (const_int 0 [0]))) "queryTAD.c":77:40 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 183 [ _129 ])
        (nil)))
(jump_insn 249 248 250 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 254)
            (pc))) "queryTAD.c":77:40 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 254)
;;  succ:       21 [100.0% (guessed)] 
;;              20 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119 179

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       19 [0.0% (guessed)]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 179
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 179
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 250 249 251 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 251 250 252 20 (set (reg:DI 5 di)
        (reg:DI 179 [ _125 ])) "queryTAD.c":77:40 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 179 [ _125 ])
        (nil)))
(call_insn 252 251 253 20 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":77:40 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 253 252 254)
;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL)
;;  pred:       19 [100.0% (guessed)] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119
;; lr  def 	 17 [flags] 120 121 122 123 137 184 185 186 187 188 233 234 235 236 237
(code_label 254 253 255 21 56 (nil) [1 uses])
(note 255 254 256 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 256 255 257 21 (set (reg:DI 233)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [2 dayN+0 S8 A64])) "queryTAD.c":77:40 66 {*movdi_internal}
     (nil))
(insn 257 256 258 21 (set (mem:DI (plus:DI (reg/f:DI 119 [ _38 ])
                (const_int 72 [0x48])) [2 _38->oldest.dayN+0 S8 A64])
        (reg:DI 233)) "queryTAD.c":77:40 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 233)
        (expr_list:REG_DEAD (reg/f:DI 119 [ _38 ])
            (nil))))
(insn 258 257 259 21 (set (reg/f:DI 234)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":78:10 66 {*movdi_internal}
     (nil))
(insn 259 258 260 21 (set (reg/f:DI 120 [ _39 ])
        (mem/f:DI (plus:DI (reg/f:DI 234)
                (const_int 24 [0x18])) [7 q_49(D)->sensorsID+0 S8 A64])) "queryTAD.c":78:10 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 234)
        (nil)))
(insn 260 259 261 21 (set (reg:DI 235)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])) "queryTAD.c":78:21 66 {*movdi_internal}
     (nil))
(insn 261 260 262 21 (set (reg:DI 236)
        (reg:DI 235)) "queryTAD.c":78:21 66 {*movdi_internal}
     (nil))
(insn 262 261 263 21 (parallel [
            (set (reg:DI 236)
                (ashift:DI (reg:DI 236)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":78:21 520 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 263 262 264 21 (parallel [
            (set (reg:DI 236)
                (plus:DI (reg:DI 236)
                    (reg:DI 235)))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":78:21 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 235)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 235)
                    (const_int 5 [0x5]))
                (nil)))))
(insn 264 263 265 21 (parallel [
            (set (reg:DI 237)
                (ashift:DI (reg:DI 236)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":78:21 520 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 236)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 265 264 266 21 (set (reg:DI 236)
        (reg:DI 237)) "queryTAD.c":78:21 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 237)
        (nil)))
(insn 266 265 267 21 (set (reg:DI 121 [ _40 ])
        (reg:DI 236)) "queryTAD.c":78:21 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 236)
        (nil)))
(insn 267 266 268 21 (parallel [
            (set (reg:DI 122 [ _41 ])
                (plus:DI (reg:DI 121 [ _40 ])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":78:21 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 121 [ _40 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 268 267 269 21 (parallel [
            (set (reg/f:DI 123 [ _42 ])
                (plus:DI (reg/f:DI 120 [ _39 ])
                    (reg:DI 122 [ _41 ])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":78:21 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 122 [ _41 ])
        (expr_list:REG_DEAD (reg/f:DI 120 [ _39 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 269 268 270 21 (parallel [
            (set (reg/f:DI 137 [ _72 ])
                (plus:DI (reg/f:DI 123 [ _42 ])
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":78:41 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 270 269 271 21 (set (reg:DI 184 [ _130 ])
        (reg/f:DI 137 [ _72 ])) "queryTAD.c":78:41 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 137 [ _72 ])
        (nil)))
(insn 271 270 272 21 (parallel [
            (set (reg:DI 185 [ _131 ])
                (lshiftrt:DI (reg:DI 184 [ _130 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":78:41 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 272 271 273 21 (parallel [
            (set (reg:DI 186 [ _132 ])
                (plus:DI (reg:DI 185 [ _131 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":78:41 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 185 [ _131 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 273 272 274 21 (set (reg/f:DI 187 [ _133 ])
        (reg:DI 186 [ _132 ])) "queryTAD.c":78:41 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 186 [ _132 ])
        (nil)))
(insn 274 273 275 21 (set (reg:QI 188 [ _134 ])
        (mem:QI (reg/f:DI 187 [ _133 ]) [10 *_133+0 S1 A8])) "queryTAD.c":78:41 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 187 [ _133 ])
        (nil)))
(insn 275 274 276 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 188 [ _134 ])
            (const_int 0 [0]))) "queryTAD.c":78:41 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 188 [ _134 ])
        (nil)))
(jump_insn 276 275 277 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 281)
            (pc))) "queryTAD.c":78:41 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 281)
;;  succ:       23 [100.0% (guessed)] 
;;              22 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 123 184

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL)
;;  pred:       21 [0.0% (guessed)]  (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 184
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 184
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 277 276 278 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 278 277 279 22 (set (reg:DI 5 di)
        (reg:DI 184 [ _130 ])) "queryTAD.c":78:41 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 184 [ _130 ])
        (nil)))
(call_insn 279 278 280 22 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":78:41 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 280 279 281)
;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL)
;;  pred:       21 [100.0% (guessed)] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 123
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 123
;; lr  def 	 17 [flags] 124 125 126 127 138 189 190 191 192 193 238 239 240 241 242
(code_label 281 280 282 23 57 (nil) [1 uses])
(note 282 281 283 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 283 282 284 23 (set (reg:DI 238)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [2 month+0 S8 A64])) "queryTAD.c":78:41 66 {*movdi_internal}
     (nil))
(insn 284 283 285 23 (set (mem:DI (plus:DI (reg/f:DI 123 [ _42 ])
                (const_int 64 [0x40])) [2 _42->oldest.month+0 S8 A64])
        (reg:DI 238)) "queryTAD.c":78:41 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 238)
        (expr_list:REG_DEAD (reg/f:DI 123 [ _42 ])
            (nil))))
(insn 285 284 286 23 (set (reg/f:DI 239)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":79:10 66 {*movdi_internal}
     (nil))
(insn 286 285 287 23 (set (reg/f:DI 124 [ _43 ])
        (mem/f:DI (plus:DI (reg/f:DI 239)
                (const_int 24 [0x18])) [7 q_49(D)->sensorsID+0 S8 A64])) "queryTAD.c":79:10 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 239)
        (nil)))
(insn 287 286 288 23 (set (reg:DI 240)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])) "queryTAD.c":79:21 66 {*movdi_internal}
     (nil))
(insn 288 287 289 23 (set (reg:DI 241)
        (reg:DI 240)) "queryTAD.c":79:21 66 {*movdi_internal}
     (nil))
(insn 289 288 290 23 (parallel [
            (set (reg:DI 241)
                (ashift:DI (reg:DI 241)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":79:21 520 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 290 289 291 23 (parallel [
            (set (reg:DI 241)
                (plus:DI (reg:DI 241)
                    (reg:DI 240)))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":79:21 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 240)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 240)
                    (const_int 5 [0x5]))
                (nil)))))
(insn 291 290 292 23 (parallel [
            (set (reg:DI 242)
                (ashift:DI (reg:DI 241)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":79:21 520 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 241)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 292 291 293 23 (set (reg:DI 241)
        (reg:DI 242)) "queryTAD.c":79:21 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 242)
        (nil)))
(insn 293 292 294 23 (set (reg:DI 125 [ _44 ])
        (reg:DI 241)) "queryTAD.c":79:21 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 241)
        (nil)))
(insn 294 293 295 23 (parallel [
            (set (reg:DI 126 [ _45 ])
                (plus:DI (reg:DI 125 [ _44 ])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":79:21 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 125 [ _44 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 295 294 296 23 (parallel [
            (set (reg/f:DI 127 [ _46 ])
                (plus:DI (reg/f:DI 124 [ _43 ])
                    (reg:DI 126 [ _45 ])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":79:21 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 126 [ _45 ])
        (expr_list:REG_DEAD (reg/f:DI 124 [ _43 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 296 295 297 23 (parallel [
            (set (reg/f:DI 138 [ _73 ])
                (plus:DI (reg/f:DI 127 [ _46 ])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":79:40 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 297 296 298 23 (set (reg:DI 189 [ _135 ])
        (reg/f:DI 138 [ _73 ])) "queryTAD.c":79:40 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 138 [ _73 ])
        (nil)))
(insn 298 297 299 23 (parallel [
            (set (reg:DI 190 [ _136 ])
                (lshiftrt:DI (reg:DI 189 [ _135 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":79:40 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 299 298 300 23 (parallel [
            (set (reg:DI 191 [ _137 ])
                (plus:DI (reg:DI 190 [ _136 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":79:40 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 190 [ _136 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 300 299 301 23 (set (reg/f:DI 192 [ _138 ])
        (reg:DI 191 [ _137 ])) "queryTAD.c":79:40 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 191 [ _137 ])
        (nil)))
(insn 301 300 302 23 (set (reg:QI 193 [ _139 ])
        (mem:QI (reg/f:DI 192 [ _138 ]) [10 *_138+0 S1 A8])) "queryTAD.c":79:40 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 192 [ _138 ])
        (nil)))
(insn 302 301 303 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 193 [ _139 ])
            (const_int 0 [0]))) "queryTAD.c":79:40 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 193 [ _139 ])
        (nil)))
(jump_insn 303 302 304 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 308)
            (pc))) "queryTAD.c":79:40 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 308)
;;  succ:       25 [100.0% (guessed)] 
;;              24 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 127 189

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL)
;;  pred:       23 [0.0% (guessed)]  (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 189
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 189
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 304 303 305 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 305 304 306 24 (set (reg:DI 5 di)
        (reg:DI 189 [ _135 ])) "queryTAD.c":79:40 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 189 [ _135 ])
        (nil)))
(call_insn 306 305 307 24 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":79:40 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 307 306 308)
;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 27, flags: (RTL)
;;  pred:       23 [100.0% (guessed)] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 127
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 127
;; lr  def 	 243
(code_label 308 307 309 25 58 (nil) [1 uses])
(note 309 308 310 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 310 309 311 25 (set (reg:DI 243)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -56 [0xffffffffffffffc8])) [2 time+0 S8 A64])) "queryTAD.c":79:40 66 {*movdi_internal}
     (nil))
(insn 311 310 319 25 (set (mem:DI (plus:DI (reg/f:DI 127 [ _46 ])
                (const_int 48 [0x30])) [2 _46->oldest.time+0 S8 A64])
        (reg:DI 243)) "queryTAD.c":79:40 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 243)
        (expr_list:REG_DEAD (reg/f:DI 127 [ _46 ])
            (nil))))
;;  succ:       27 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 27, loop depth 0, maybe hot
;;  prev block 25, next block 26, flags: (RTL)
;;  pred:       12
;;              25 [always]  (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 319 311 318 27 59 (nil) [1 uses])
(note 318 319 320 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 320 318 314 27 (const_int 0 [0]) "queryTAD.c":89:1 696 {nop}
     (nil))
;;  succ:       26 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 27, next block 1, flags: (RTL)
;;  pred:       27 [always]  (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 314 320 315 26 46 (nil) [0 uses])
(note 315 314 0 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function insertYearL (insertYearL, funcdef_no=6, decl_uid=3371, cgraph_uid=7, symbol_order=6)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 5 count 6 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 4 3 }
;; 3 succs { }
;; 4 succs { 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 18.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r83,l0) best DIREG, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a2(r83,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a3(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a4(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a5(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a6(r84,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a7(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a8(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000

   Insn 28(l0): point = 0
   Insn 24(l0): point = 3
   Insn 23(l0): point = 5
   Insn 22(l0): point = 7
   Insn 18(l0): point = 10
   Insn 17(l0): point = 12
   Insn 15(l0): point = 15
   Insn 14(l0): point = 17
   Insn 13(l0): point = 19
   Insn 12(l0): point = 21
   Insn 11(l0): point = 23
   Insn 10(l0): point = 25
   Insn 9(l0): point = 27
   Insn 8(l0): point = 29
   Insn 7(l0): point = 31
   Insn 3(l0): point = 33
   Insn 2(l0): point = 35
 a0(r89): [4..7]
 a1(r90): [4..5]
 a2(r83): [13..27]
 a3(r87): [18..19]
 a4(r86): [20..21]
 a5(r85): [22..23]
 a6(r84): [24..25]
 a7(r82): [28..29]
 a8(r88): [30..31]
Compressing live ranges: from 38 to 14 - 36%
Ranges after the compression:
 a0(r89): [0..1]
 a1(r90): [0..1]
 a2(r83): [2..9]
 a3(r87): [2..3]
 a4(r86): [4..5]
 a5(r85): [6..7]
 a6(r84): [8..9]
 a7(r82): [10..11]
 a8(r88): [12..13]
  pref0:a2(r83)<-hr5@1500
  regions=1, blocks=6, points=14
    allocnos=9 (big 0), copies=0, conflicts=0, ranges=9
Disposition:
    7:r82  l0     0    2:r83  l0     0    6:r84  l0     1    5:r85  l0     1
    4:r86  l0     1    3:r87  l0     1    8:r88  l0     0    0:r89  l0     0
    1:r90  l0     1
+++Costs: overall 3000, reg 3000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


insertYearL

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d,1u} r5={3d,2u} r6={1d,5u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,4u} r17={5d,1u} r18={1d} r19={1d,10u,1e} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r82={1d,1u} r83={1d,2u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} 
;;    total ref usage 140{100d,39u,1e} in 17{16 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 83 84 85 86 87 88
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 query+0 S8 A64])
        (reg:DI 5 di [ query ])) "queryTAD.c":91:48 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ query ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [6 years+0 S8 A64])
        (reg:DI 4 si [ years ])) "queryTAD.c":91:48 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ years ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 query+0 S8 A64])) "queryTAD.c":92:18 66 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg/f:DI 82 [ _5 ])
                (plus:DI (reg/f:DI 88)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":92:18 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 88)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -8 [0xfffffffffffffff8])) [11 query+0 S8 A64])
                    (const_int 16 [0x10]))
                (nil)))))
(insn 9 8 10 2 (set (reg:DI 83 [ _7 ])
        (reg/f:DI 82 [ _5 ])) "queryTAD.c":92:18 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 82 [ _5 ])
        (nil)))
(insn 10 9 11 2 (parallel [
            (set (reg:DI 84 [ _8 ])
                (lshiftrt:DI (reg:DI 83 [ _7 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":92:18 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 11 10 12 2 (parallel [
            (set (reg:DI 85 [ _9 ])
                (plus:DI (reg:DI 84 [ _8 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":92:18 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 84 [ _8 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 12 11 13 2 (set (reg/f:DI 86 [ _10 ])
        (reg:DI 85 [ _9 ])) "queryTAD.c":92:18 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 85 [ _9 ])
        (nil)))
(insn 13 12 14 2 (set (reg:QI 87 [ _11 ])
        (mem:QI (reg/f:DI 86 [ _10 ]) [10 *_10+0 S1 A8])) "queryTAD.c":92:18 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 86 [ _10 ])
        (nil)))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 87 [ _11 ])
            (const_int 0 [0]))) "queryTAD.c":92:18 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 87 [ _11 ])
        (nil)))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "queryTAD.c":92:18 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 20)
;;  succ:       4 [100.0% (guessed)] 
;;              3 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [0.0% (guessed)]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:DI 5 di)
        (reg:DI 83 [ _7 ])) "queryTAD.c":92:18 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 83 [ _7 ])
        (nil)))
(call_insn 18 17 19 3 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":92:18 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 19 18 20)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2 [100.0% (guessed)] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 89 90
(code_label 20 19 21 4 61 (nil) [1 uses])
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 query+0 S8 A64])) "queryTAD.c":92:18 66 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [6 years+0 S8 A64])) "queryTAD.c":92:18 66 {*movdi_internal}
     (nil))
(insn 24 23 27 4 (set (mem/f:DI (plus:DI (reg/f:DI 89)
                (const_int 16 [0x10])) [6 query_2(D)->years+0 S8 A64])
        (reg/f:DI 90)) "queryTAD.c":92:18 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90)
        (expr_list:REG_DEAD (reg/f:DI 89)
            (nil))))
;;  succ:       5 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 [always]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 27 24 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 0 5 (const_int 0 [0]) "queryTAD.c":93:1 696 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function makeSenLRec (makeSenLRec, funcdef_no=7, decl_uid=3389, cgraph_uid=8, symbol_order=7)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 25 n_edges 28 count 25 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
;; 2 succs { 16 3 }
;; 3 succs { 5 4 }
;; 4 succs { }
;; 5 succs { 7 6 }
;; 6 succs { }
;; 7 succs { 16 8 }
;; 8 succs { 9 19 }
;; 9 succs { 11 10 }
;; 10 succs { }
;; 11 succs { 13 12 }
;; 12 succs { }
;; 13 succs { 15 14 }
;; 14 succs { }
;; 15 succs { 16 19 }
;; 16 succs { 18 17 }
;; 17 succs { }
;; 18 succs { 24 }
;; 19 succs { 21 20 }
;; 20 succs { }
;; 21 succs { 23 22 }
;; 22 succs { }
;; 23 succs { 24 }
;; 24 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 90.
verify found no changes in insn with uid = 115.
verify found no changes in insn with uid = 122.
verify found no changes in insn with uid = 141.
verify found no changes in insn with uid = 164.
verify found no changes in insn with uid = 177.
verify found no changes in insn with uid = 190.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r168,l0) best SIREG, allocno GENERAL_REGS
    r167: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r167,l0) best DREG, allocno GENERAL_REGS
    r166: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a14 (r166,l0) best CREG, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r146,l0) best AREG, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r141,l0) best DIREG, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r136,l0) best DIREG, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a25 (r131,l0) best DIREG, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a36 (r126,l0) best DIREG, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a49 (r121,l0) best DIREG, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a56 (r116,l0) best DIREG, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a74 (r111,l0) best DIREG, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a82 (r106,l0) best DIREG, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r96,l0) best AREG, allocno GENERAL_REGS
    r95: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r95,l0) best DIREG, allocno GENERAL_REGS
    r94: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a32 (r94,l0) best AREG, allocno GENERAL_REGS
    r93: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a33 (r93,l0) best DIREG, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a34 (r88,l0) best SIREG, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r146,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a1(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:37000 INT_SSE_REGS:37000 ALL_REGS:424000 MEM:17000
  a2(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r96,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a4(r141,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a5(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a6(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a7(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a8(r142,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a9(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a10(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a11(r95,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r168,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r167,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r166,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a16(r136,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a17(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a18(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a19(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a20(r137,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a21(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a22(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a23(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a24(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a25(r131,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a26(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a27(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a28(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a29(r132,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a30(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a31(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a32(r94,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a33(r93,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a34(r88,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a35(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:39000 INT_SSE_REGS:39000 ALL_REGS:636000 MEM:17000
  a36(r126,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a37(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a38(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a39(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a40(r127,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a41(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a42(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a43(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a44(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a45(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:52000 NO_REX_SSE_REGS:52000 SSE_REGS:52000 MMX_REGS:90000 INT_SSE_REGS:90000 ALL_REGS:1472000 MEM:32000
  a46(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a47(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:16000
  a48(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a49(r121,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a50(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a51(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a52(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a53(r122,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a54(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a55(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:39000 INT_SSE_REGS:39000 ALL_REGS:636000 MEM:17000
  a56(r116,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a57(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a58(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a59(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a60(r117,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a61(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a62(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a63(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a64(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:52000 NO_REX_SSE_REGS:52000 SSE_REGS:52000 MMX_REGS:90000 INT_SSE_REGS:90000 ALL_REGS:1472000 MEM:32000
  a65(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a66(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:16000
  a67(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a68(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a69(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a70(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a71(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a72(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a73(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a74(r111,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a75(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a76(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a77(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a78(r112,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a79(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a80(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a81(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a82(r106,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a83(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a84(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a85(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a86(r107,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a87(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a88(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000

   Insn 204(l0): point = 0
   Insn 203(l0): point = 2
   Insn 199(l0): point = 4
   Insn 196(l0): point = 7
   Insn 195(l0): point = 9
   Insn 194(l0): point = 11
   Insn 190(l0): point = 14
   Insn 189(l0): point = 16
   Insn 187(l0): point = 19
   Insn 186(l0): point = 21
   Insn 185(l0): point = 23
   Insn 184(l0): point = 25
   Insn 183(l0): point = 27
   Insn 182(l0): point = 29
   Insn 181(l0): point = 31
   Insn 180(l0): point = 33
   Insn 179(l0): point = 35
   Insn 178(l0): point = 37
   Insn 177(l0): point = 39
   Insn 176(l0): point = 41
   Insn 175(l0): point = 43
   Insn 174(l0): point = 45
   Insn 173(l0): point = 47
   Insn 172(l0): point = 49
   Insn 171(l0): point = 51
   Insn 170(l0): point = 53
   Insn 169(l0): point = 55
   Insn 168(l0): point = 57
   Insn 164(l0): point = 60
   Insn 163(l0): point = 62
   Insn 161(l0): point = 65
   Insn 160(l0): point = 67
   Insn 159(l0): point = 69
   Insn 158(l0): point = 71
   Insn 157(l0): point = 73
   Insn 156(l0): point = 75
   Insn 155(l0): point = 77
   Insn 154(l0): point = 79
   Insn 153(l0): point = 81
   Insn 206(l0): point = 84
   Insn 148(l0): point = 86
   Insn 147(l0): point = 88
   Insn 146(l0): point = 90
   Insn 145(l0): point = 92
   Insn 141(l0): point = 95
   Insn 140(l0): point = 97
   Insn 138(l0): point = 100
   Insn 137(l0): point = 102
   Insn 136(l0): point = 104
   Insn 135(l0): point = 106
   Insn 134(l0): point = 108
   Insn 133(l0): point = 110
   Insn 132(l0): point = 112
   Insn 131(l0): point = 114
   Insn 130(l0): point = 116
   Insn 127(l0): point = 119
   Insn 126(l0): point = 121
   Insn 123(l0): point = 123
   Insn 122(l0): point = 125
   Insn 121(l0): point = 127
   Insn 120(l0): point = 129
   Insn 119(l0): point = 131
   Insn 115(l0): point = 134
   Insn 114(l0): point = 136
   Insn 112(l0): point = 139
   Insn 111(l0): point = 141
   Insn 110(l0): point = 143
   Insn 109(l0): point = 145
   Insn 108(l0): point = 147
   Insn 107(l0): point = 149
   Insn 106(l0): point = 151
   Insn 105(l0): point = 153
   Insn 104(l0): point = 155
   Insn 103(l0): point = 157
   Insn 102(l0): point = 159
   Insn 101(l0): point = 161
   Insn 100(l0): point = 163
   Insn 99(l0): point = 165
   Insn 98(l0): point = 167
   Insn 97(l0): point = 169
   Insn 96(l0): point = 171
   Insn 95(l0): point = 173
   Insn 94(l0): point = 175
   Insn 90(l0): point = 178
   Insn 89(l0): point = 180
   Insn 87(l0): point = 183
   Insn 86(l0): point = 185
   Insn 85(l0): point = 187
   Insn 84(l0): point = 189
   Insn 83(l0): point = 191
   Insn 82(l0): point = 193
   Insn 81(l0): point = 195
   Insn 80(l0): point = 197
   Insn 79(l0): point = 199
   Insn 75(l0): point = 202
   Insn 74(l0): point = 204
   Insn 72(l0): point = 207
   Insn 71(l0): point = 209
   Insn 70(l0): point = 211
   Insn 69(l0): point = 213
   Insn 68(l0): point = 215
   Insn 67(l0): point = 217
   Insn 66(l0): point = 219
   Insn 65(l0): point = 221
   Insn 64(l0): point = 223
   Insn 63(l0): point = 225
   Insn 62(l0): point = 227
   Insn 61(l0): point = 229
   Insn 60(l0): point = 231
   Insn 59(l0): point = 233
   Insn 58(l0): point = 235
   Insn 57(l0): point = 237
   Insn 56(l0): point = 239
   Insn 54(l0): point = 242
   Insn 53(l0): point = 244
   Insn 52(l0): point = 246
   Insn 51(l0): point = 248
   Insn 50(l0): point = 250
   Insn 49(l0): point = 252
   Insn 47(l0): point = 255
   Insn 46(l0): point = 257
   Insn 45(l0): point = 259
   Insn 44(l0): point = 261
   Insn 40(l0): point = 264
   Insn 39(l0): point = 266
   Insn 37(l0): point = 269
   Insn 36(l0): point = 271
   Insn 35(l0): point = 273
   Insn 34(l0): point = 275
   Insn 33(l0): point = 277
   Insn 32(l0): point = 279
   Insn 31(l0): point = 281
   Insn 30(l0): point = 283
   Insn 29(l0): point = 285
   Insn 28(l0): point = 287
   Insn 27(l0): point = 289
   Insn 23(l0): point = 292
   Insn 22(l0): point = 294
   Insn 20(l0): point = 297
   Insn 19(l0): point = 299
   Insn 18(l0): point = 301
   Insn 17(l0): point = 303
   Insn 16(l0): point = 305
   Insn 15(l0): point = 307
   Insn 14(l0): point = 309
   Insn 13(l0): point = 311
   Insn 12(l0): point = 313
   Insn 10(l0): point = 316
   Insn 9(l0): point = 318
   Insn 5(l0): point = 320
   Insn 4(l0): point = 322
   Insn 3(l0): point = 324
   Insn 2(l0): point = 326
 a0(r146): [3..4]
 a1(r97): [84..86] [5..7]
 a2(r170): [10..11]
 a3(r96): [19..37] [10..13]
 a4(r141): [17..31]
 a5(r145): [22..23]
 a6(r144): [24..25]
 a7(r143): [26..27]
 a8(r142): [28..29]
 a9(r105): [32..33]
 a10(r169): [34..35]
 a11(r95): [42..55]
 a12(r168): [44..49]
 a13(r167): [46..51]
 a14(r166): [48..53]
 a15(r165): [56..57]
 a16(r136): [63..77]
 a17(r140): [68..69]
 a18(r139): [70..71]
 a19(r138): [72..73]
 a20(r137): [74..75]
 a21(r104): [78..79]
 a22(r164): [80..81]
 a23(r162): [89..92]
 a24(r163): [89..90]
 a25(r131): [98..112]
 a26(r135): [103..104]
 a27(r134): [105..106]
 a28(r133): [107..108]
 a29(r132): [109..110]
 a30(r103): [113..114]
 a31(r161): [115..116]
 a32(r94): [122..123]
 a33(r93): [128..131]
 a34(r88): [183..199] [139..177] [130..133]
 a35(r92): [139..155] [132..133]
 a36(r126): [137..151]
 a37(r130): [142..143]
 a38(r129): [144..145]
 a39(r128): [146..147]
 a40(r127): [148..149]
 a41(r102): [152..153]
 a42(r160): [156..157]
 a43(r91): [156..159]
 a44(r90): [160..161]
 a45(r158): [166..171] [162..163]
 a46(r159): [164..165]
 a47(r89): [168..173]
 a48(r157): [174..175]
 a49(r121): [181..195]
 a50(r125): [186..187]
 a51(r124): [188..189]
 a52(r123): [190..191]
 a53(r122): [192..193]
 a54(r101): [196..197]
 a55(r87): [207..223] [200..201]
 a56(r116): [205..219]
 a57(r120): [210..211]
 a58(r119): [212..213]
 a59(r118): [214..215]
 a60(r117): [216..217]
 a61(r100): [220..221]
 a62(r156): [224..225]
 a63(r86): [224..227]
 a64(r154): [232..237] [228..229]
 a65(r155): [230..231]
 a66(r153): [234..239]
 a67(r85): [245..246]
 a68(r84): [245..250]
 a69(r152): [247..248]
 a70(r151): [251..252]
 a71(r83): [258..259]
 a72(r82): [269..287] [258..263]
 a73(r150): [260..261]
 a74(r111): [267..281]
 a75(r115): [272..273]
 a76(r114): [274..275]
 a77(r113): [276..277]
 a78(r112): [278..279]
 a79(r99): [282..283]
 a80(r149): [284..285]
 a81(r148): [288..289]
 a82(r106): [295..309]
 a83(r110): [300..301]
 a84(r109): [302..303]
 a85(r108): [304..305]
 a86(r107): [306..307]
 a87(r98): [310..311]
 a88(r147): [312..313]
Compressing live ranges: from 329 to 144 - 43%
Ranges after the compression:
 a0(r146): [0..1]
 a1(r97): [34..35] [2..3]
 a2(r170): [4..5]
 a3(r96): [4..17]
 a4(r141): [6..13]
 a5(r145): [6..7]
 a6(r144): [8..9]
 a7(r143): [10..11]
 a8(r142): [12..13]
 a9(r105): [14..15]
 a10(r169): [16..17]
 a11(r95): [18..19]
 a12(r168): [18..19]
 a13(r167): [18..19]
 a14(r166): [18..19]
 a15(r165): [20..21]
 a16(r136): [22..29]
 a17(r140): [22..23]
 a18(r139): [24..25]
 a19(r138): [26..27]
 a20(r137): [28..29]
 a21(r104): [30..31]
 a22(r164): [32..33]
 a23(r162): [36..37]
 a24(r163): [36..37]
 a25(r131): [38..45]
 a26(r135): [38..39]
 a27(r134): [40..41]
 a28(r133): [42..43]
 a29(r132): [44..45]
 a30(r103): [46..47]
 a31(r161): [48..49]
 a32(r94): [50..51]
 a33(r93): [52..53]
 a34(r88): [52..87]
 a35(r92): [54..65]
 a36(r126): [56..63]
 a37(r130): [56..57]
 a38(r129): [58..59]
 a39(r128): [60..61]
 a40(r127): [62..63]
 a41(r102): [64..65]
 a42(r160): [66..67]
 a43(r91): [66..67]
 a44(r90): [68..69]
 a45(r158): [74..75] [70..71]
 a46(r159): [72..73]
 a47(r89): [74..75]
 a48(r157): [76..77]
 a49(r121): [78..85]
 a50(r125): [78..79]
 a51(r124): [80..81]
 a52(r123): [82..83]
 a53(r122): [84..85]
 a54(r101): [86..87]
 a55(r87): [88..99]
 a56(r116): [90..97]
 a57(r120): [90..91]
 a58(r119): [92..93]
 a59(r118): [94..95]
 a60(r117): [96..97]
 a61(r100): [98..99]
 a62(r156): [100..101]
 a63(r86): [100..101]
 a64(r154): [106..107] [102..103]
 a65(r155): [104..105]
 a66(r153): [106..107]
 a67(r85): [108..109]
 a68(r84): [108..111]
 a69(r152): [110..111]
 a70(r151): [112..113]
 a71(r83): [114..115]
 a72(r82): [114..129]
 a73(r150): [116..117]
 a74(r111): [118..125]
 a75(r115): [118..119]
 a76(r114): [120..121]
 a77(r113): [122..123]
 a78(r112): [124..125]
 a79(r99): [126..127]
 a80(r149): [128..129]
 a81(r148): [130..131]
 a82(r106): [132..139]
 a83(r110): [132..133]
 a84(r109): [134..135]
 a85(r108): [136..137]
 a86(r107): [138..139]
 a87(r98): [140..141]
 a88(r147): [142..143]
  pref0:a12(r168)<-hr4@1500
  pref1:a13(r167)<-hr1@1500
  pref2:a14(r166)<-hr2@1500
  pref3:a0(r146)<-hr0@1500
  pref4:a4(r141)<-hr5@1500
  pref5:a16(r136)<-hr5@1500
  pref6:a25(r131)<-hr5@1500
  pref7:a36(r126)<-hr5@1500
  pref8:a49(r121)<-hr5@1500
  pref9:a56(r116)<-hr5@1500
  pref10:a74(r111)<-hr5@1500
  pref11:a82(r106)<-hr5@1500
  pref12:a3(r96)<-hr0@1500
  pref13:a11(r95)<-hr5@1500
  pref14:a32(r94)<-hr0@1500
  pref15:a33(r93)<-hr5@1500
  pref16:a34(r88)<-hr4@1500
  regions=1, blocks=25, points=144
    allocnos=89 (big 0), copies=0, conflicts=0, ranges=92
Disposition:
   72:r82  l0     2   71:r83  l0     0   68:r84  l0     1   67:r85  l0     0
   63:r86  l0     1   55:r87  l0     0   34:r88  l0     2   47:r89  l0     1
   44:r90  l0     0   43:r91  l0     1   35:r92  l0     0   33:r93  l0     0
   32:r94  l0     0   11:r95  l0     0    3:r96  l0     0    1:r97  l0     0
   87:r98  l0     0   79:r99  l0     0   61:r100 l0     1   54:r101 l0     0
   41:r102 l0     1   30:r103 l0     0   21:r104 l0     0    9:r105 l0     1
   82:r106 l0     0   86:r107 l0     1   85:r108 l0     1   84:r109 l0     1
   83:r110 l0     1   74:r111 l0     0   78:r112 l0     1   77:r113 l0     1
   76:r114 l0     1   75:r115 l0     1   56:r116 l0     1   60:r117 l0     2
   59:r118 l0     2   58:r119 l0     2   57:r120 l0     2   49:r121 l0     0
   53:r122 l0     1   52:r123 l0     1   51:r124 l0     1   50:r125 l0     1
   36:r126 l0     1   40:r127 l0     4   39:r128 l0     4   38:r129 l0     4
   37:r130 l0     4   25:r131 l0     0   29:r132 l0     1   28:r133 l0     1
   27:r134 l0     1   26:r135 l0     1   16:r136 l0     0   20:r137 l0     1
   19:r138 l0     1   18:r139 l0     1   17:r140 l0     1    4:r141 l0     1
    8:r142 l0     2    7:r143 l0     2    6:r144 l0     2    5:r145 l0     2
    0:r146 l0     0   88:r147 l0     0   81:r148 l0     0   80:r149 l0     0
   73:r150 l0     0   70:r151 l0     0   69:r152 l0     0   66:r153 l0     1
   64:r154 l0     0   65:r155 l0     0   62:r156 l0     0   48:r157 l0     0
   45:r158 l0     0   46:r159 l0     0   42:r160 l0     0   31:r161 l0     0
   23:r162 l0     0   24:r163 l0     1   22:r164 l0     0   15:r165 l0     0
   14:r166 l0     2   13:r167 l0     1   12:r168 l0     4   10:r169 l0     1
    2:r170 l0     1
+++Costs: overall 15000, reg 15000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


makeSenLRec

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={12d,4u} r1={12d,2u} r2={12d,2u} r4={13d,3u} r5={21d,11u} r6={1d,24u} r7={1d,34u} r8={10d} r9={10d} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r16={1d,23u} r17={54d,12u} r18={10d} r19={1d,52u,7e} r20={11d} r21={11d} r22={11d} r23={11d} r24={11d} r25={11d} r26={11d} r27={11d} r28={10d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={11d} r37={11d} r38={10d} r39={10d} r44={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u,1e} r87={1d,2u} r88={1d,1u} r89={1d,2u,1e} r90={1d,1u} r91={1d,1u,1e} r92={1d,2u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={2d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,2u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,2u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,2u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,2u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,2u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,2u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,2u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,2u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,2u,1e} r154={4d,4u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={4d,4u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} 
;;    total ref usage 1129{844d,274u,11e} in 153{143 regular + 10 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])
        (reg:DI 5 di [ l ])) "queryTAD.c":96:75 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ l ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])
        (reg:DI 4 si [ aux ])) "queryTAD.c":96:75 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ aux ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [7 vecSen+0 S8 A64])
        (reg:DI 1 dx [ vecSen ])) "queryTAD.c":96:75 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ vecSen ])
        (nil)))
(insn 5 4 6 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S8 A64])
        (reg:DI 2 cx [ i ])) "queryTAD.c":96:75 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ i ])
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])
            (const_int 0 [0]))) "queryTAD.c":97:7 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 128)
            (pc))) "queryTAD.c":97:7 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 128)
;;  succ:       16
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 98 106 107 108 109 110 147
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg/f:DI 147)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":97:22 66 {*movdi_internal}
     (nil))
(insn 13 12 14 3 (parallel [
            (set (reg/f:DI 98 [ _28 ])
                (plus:DI (reg/f:DI 147)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":97:22 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 147)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 14 13 15 3 (set (reg:DI 106 [ _46 ])
        (reg/f:DI 98 [ _28 ])) "queryTAD.c":97:22 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 98 [ _28 ])
        (nil)))
(insn 15 14 16 3 (parallel [
            (set (reg:DI 107 [ _47 ])
                (lshiftrt:DI (reg:DI 106 [ _46 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":97:22 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 108 [ _48 ])
                (plus:DI (reg:DI 107 [ _47 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":97:22 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 107 [ _47 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 17 16 18 3 (set (reg/f:DI 109 [ _49 ])
        (reg:DI 108 [ _48 ])) "queryTAD.c":97:22 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 108 [ _48 ])
        (nil)))
(insn 18 17 19 3 (set (reg:QI 110 [ _50 ])
        (mem:QI (reg/f:DI 109 [ _49 ]) [10 *_49+0 S1 A8])) "queryTAD.c":97:22 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 109 [ _49 ])
        (nil)))
(insn 19 18 20 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 110 [ _50 ])
            (const_int 0 [0]))) "queryTAD.c":97:22 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 110 [ _50 ])
        (nil)))
(jump_insn 20 19 21 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) "queryTAD.c":97:22 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 25)
;;  succ:       5 [100.0% (guessed)] 
;;              4 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 106

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [0.0% (guessed)]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 106
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 106
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg:DI 5 di)
        (reg:DI 106 [ _46 ])) "queryTAD.c":97:22 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 106 [ _46 ])
        (nil)))
(call_insn 23 22 24 4 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":97:22 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 24 23 25)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3 [100.0% (guessed)] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 99 111 112 113 114 115 148 149
(code_label 25 24 26 5 64 (nil) [1 uses])
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg/f:DI 148)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":97:22 66 {*movdi_internal}
     (nil))
(insn 28 27 29 5 (set (reg:DI 82 [ _1 ])
        (mem:DI (plus:DI (reg/f:DI 148)
                (const_int 8 [0x8])) [2 l_18(D)->pedestrians+0 S8 A64])) "queryTAD.c":97:22 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 148)
        (nil)))
(insn 29 28 30 5 (set (reg/f:DI 149)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])) "queryTAD.c":97:41 66 {*movdi_internal}
     (nil))
(insn 30 29 31 5 (parallel [
            (set (reg/f:DI 99 [ _29 ])
                (plus:DI (reg/f:DI 149)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":97:41 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 149)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 31 30 32 5 (set (reg:DI 111 [ _51 ])
        (reg/f:DI 99 [ _29 ])) "queryTAD.c":97:41 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 99 [ _29 ])
        (nil)))
(insn 32 31 33 5 (parallel [
            (set (reg:DI 112 [ _52 ])
                (lshiftrt:DI (reg:DI 111 [ _51 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":97:41 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 33 32 34 5 (parallel [
            (set (reg:DI 113 [ _53 ])
                (plus:DI (reg:DI 112 [ _52 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":97:41 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 112 [ _52 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 34 33 35 5 (set (reg/f:DI 114 [ _54 ])
        (reg:DI 113 [ _53 ])) "queryTAD.c":97:41 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 113 [ _53 ])
        (nil)))
(insn 35 34 36 5 (set (reg:QI 115 [ _55 ])
        (mem:QI (reg/f:DI 114 [ _54 ]) [10 *_54+0 S1 A8])) "queryTAD.c":97:41 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 114 [ _54 ])
        (nil)))
(insn 36 35 37 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 115 [ _55 ])
            (const_int 0 [0]))) "queryTAD.c":97:41 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 115 [ _55 ])
        (nil)))
(jump_insn 37 36 38 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) "queryTAD.c":97:41 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 42)
;;  succ:       7 [100.0% (guessed)] 
;;              6 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 111

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 [0.0% (guessed)]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 111
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 111
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 38 37 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 6 (set (reg:DI 5 di)
        (reg:DI 111 [ _51 ])) "queryTAD.c":97:41 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 111 [ _51 ])
        (nil)))
(call_insn 40 39 41 6 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":97:41 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 41 40 42)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       5 [100.0% (guessed)] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; lr  def 	 17 [flags] 83 150
(code_label 42 41 43 7 65 (nil) [1 uses])
(note 43 42 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 7 (set (reg/f:DI 150)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])) "queryTAD.c":97:41 66 {*movdi_internal}
     (nil))
(insn 45 44 46 7 (set (reg:DI 83 [ _2 ])
        (mem:DI (plus:DI (reg/f:DI 150)
                (const_int 8 [0x8])) [2 aux_20(D)->pedestrians+0 S8 A64])) "queryTAD.c":97:41 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 150)
        (nil)))
(insn 46 45 47 7 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 82 [ _1 ])
            (reg:DI 83 [ _2 ]))) "queryTAD.c":97:18 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 83 [ _2 ])
        (expr_list:REG_DEAD (reg:DI 82 [ _1 ])
            (nil))))
(jump_insn 47 46 48 7 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 128)
            (pc))) "queryTAD.c":97:18 659 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 128)
;;  succ:       16
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 84 85 151 152
(note 48 47 49 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 8 (set (reg/f:DI 151)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":98:14 66 {*movdi_internal}
     (nil))
(insn 50 49 51 8 (set (reg:DI 84 [ _3 ])
        (mem:DI (plus:DI (reg/f:DI 151)
                (const_int 8 [0x8])) [2 l_18(D)->pedestrians+0 S8 A64])) "queryTAD.c":98:14 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 151)
        (nil)))
(insn 51 50 52 8 (set (reg/f:DI 152)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])) "queryTAD.c":98:34 66 {*movdi_internal}
     (nil))
(insn 52 51 53 8 (set (reg:DI 85 [ _4 ])
        (mem:DI (plus:DI (reg/f:DI 152)
                (const_int 8 [0x8])) [2 aux_20(D)->pedestrians+0 S8 A64])) "queryTAD.c":98:34 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 152)
        (nil)))
(insn 53 52 54 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 84 [ _3 ])
            (reg:DI 85 [ _4 ]))) "queryTAD.c":98:9 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 85 [ _4 ])
        (expr_list:REG_DEAD (reg:DI 84 [ _3 ])
            (nil))))
(jump_insn 54 53 55 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 151)
            (pc))) "queryTAD.c":98:9 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 151)
;;  succ:       9 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 86 87 100 116 117 118 119 120 153 154 155 156
(note 55 54 56 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 9 (set (reg:DI 153)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S8 A64])) "queryTAD.c":98:90 66 {*movdi_internal}
     (nil))
(insn 57 56 58 9 (set (reg:DI 154)
        (reg:DI 153)) "queryTAD.c":98:90 66 {*movdi_internal}
     (nil))
(insn 58 57 59 9 (parallel [
            (set (reg:DI 154)
                (ashift:DI (reg:DI 154)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:90 520 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 59 58 60 9 (parallel [
            (set (reg:DI 154)
                (plus:DI (reg:DI 154)
                    (reg:DI 153)))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:90 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 153)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 153)
                    (const_int 5 [0x5]))
                (nil)))))
(insn 60 59 61 9 (parallel [
            (set (reg:DI 155)
                (ashift:DI (reg:DI 154)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:90 520 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 154)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 61 60 62 9 (set (reg:DI 154)
        (reg:DI 155)) "queryTAD.c":98:90 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 155)
        (nil)))
(insn 62 61 63 9 (set (reg:DI 86 [ _5 ])
        (reg:DI 154)) "queryTAD.c":98:90 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 154)
        (nil)))
(insn 63 62 64 9 (set (reg/f:DI 156)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [7 vecSen+0 S8 A64])) "queryTAD.c":98:90 66 {*movdi_internal}
     (nil))
(insn 64 63 65 9 (parallel [
            (set (reg/f:DI 87 [ _6 ])
                (plus:DI (reg:DI 86 [ _5 ])
                    (reg/f:DI 156)))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:90 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 156)
        (expr_list:REG_DEAD (reg:DI 86 [ _5 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -24 [0xffffffffffffffe8])) [7 vecSen+0 S8 A64])
                        (reg:DI 86 [ _5 ]))
                    (nil))))))
(insn 65 64 66 9 (parallel [
            (set (reg/f:DI 100 [ _30 ])
                (plus:DI (reg/f:DI 87 [ _6 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:93 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 66 65 67 9 (set (reg:DI 116 [ _56 ])
        (reg/f:DI 100 [ _30 ])) "queryTAD.c":98:93 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 100 [ _30 ])
        (nil)))
(insn 67 66 68 9 (parallel [
            (set (reg:DI 117 [ _57 ])
                (lshiftrt:DI (reg:DI 116 [ _56 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:93 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 68 67 69 9 (parallel [
            (set (reg:DI 118 [ _58 ])
                (plus:DI (reg:DI 117 [ _57 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:93 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 117 [ _57 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 69 68 70 9 (set (reg/f:DI 119 [ _59 ])
        (reg:DI 118 [ _58 ])) "queryTAD.c":98:93 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 118 [ _58 ])
        (nil)))
(insn 70 69 71 9 (set (reg:QI 120 [ _60 ])
        (mem:QI (reg/f:DI 119 [ _59 ]) [10 *_59+0 S1 A8])) "queryTAD.c":98:93 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 119 [ _59 ])
        (nil)))
(insn 71 70 72 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 120 [ _60 ])
            (const_int 0 [0]))) "queryTAD.c":98:93 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 120 [ _60 ])
        (nil)))
(jump_insn 72 71 73 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) "queryTAD.c":98:93 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 77)
;;  succ:       11 [100.0% (guessed)] 
;;              10 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 87 116

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 [0.0% (guessed)]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 116
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 116
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 73 72 74 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 10 (set (reg:DI 5 di)
        (reg:DI 116 [ _56 ])) "queryTAD.c":98:93 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 116 [ _56 ])
        (nil)))
(call_insn 75 74 76 10 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":98:93 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 76 75 77)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       9 [100.0% (guessed)] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 87
;; lr  def 	 17 [flags] 88 101 121 122 123 124 125
(code_label 77 76 78 11 67 (nil) [1 uses])
(note 78 77 79 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 11 (set (reg/f:DI 88 [ _7 ])
        (mem/f:DI (plus:DI (reg/f:DI 87 [ _6 ])
                (const_int 8 [0x8])) [3 _6->name+0 S8 A64])) "queryTAD.c":98:93 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ _6 ])
        (nil)))
(insn 80 79 81 11 (set (reg/f:DI 101 [ _31 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":98:70 66 {*movdi_internal}
     (nil))
(insn 81 80 82 11 (set (reg:DI 121 [ _61 ])
        (reg/f:DI 101 [ _31 ])) "queryTAD.c":98:70 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 101 [ _31 ])
        (nil)))
(insn 82 81 83 11 (parallel [
            (set (reg:DI 122 [ _62 ])
                (lshiftrt:DI (reg:DI 121 [ _61 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:70 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 83 82 84 11 (parallel [
            (set (reg:DI 123 [ _63 ])
                (plus:DI (reg:DI 122 [ _62 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:70 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 122 [ _62 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 84 83 85 11 (set (reg/f:DI 124 [ _64 ])
        (reg:DI 123 [ _63 ])) "queryTAD.c":98:70 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 123 [ _63 ])
        (nil)))
(insn 85 84 86 11 (set (reg:QI 125 [ _65 ])
        (mem:QI (reg/f:DI 124 [ _64 ]) [10 *_64+0 S1 A8])) "queryTAD.c":98:70 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 124 [ _64 ])
        (nil)))
(insn 86 85 87 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 125 [ _65 ])
            (const_int 0 [0]))) "queryTAD.c":98:70 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 125 [ _65 ])
        (nil)))
(jump_insn 87 86 88 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) "queryTAD.c":98:70 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 92)
;;  succ:       13 [100.0% (guessed)] 
;;              12 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 121

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 [0.0% (guessed)]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 121
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 121
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 88 87 89 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 12 (set (reg:DI 5 di)
        (reg:DI 121 [ _61 ])) "queryTAD.c":98:70 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 121 [ _61 ])
        (nil)))
(call_insn 90 89 91 12 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":98:70 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 91 90 92)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       11 [100.0% (guessed)] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 89 90 91 92 102 126 127 128 129 130 157 158 159 160
(code_label 92 91 93 13 68 (nil) [1 uses])
(note 93 92 94 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 95 13 (set (reg/f:DI 157)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":98:70 66 {*movdi_internal}
     (nil))
(insn 95 94 96 13 (set (reg:DI 89 [ _8 ])
        (mem:DI (reg/f:DI 157) [2 l_18(D)->ID+0 S8 A64])) "queryTAD.c":98:70 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 157)
        (nil)))
(insn 96 95 97 13 (set (reg:DI 158)
        (reg:DI 89 [ _8 ])) "queryTAD.c":98:68 66 {*movdi_internal}
     (nil))
(insn 97 96 98 13 (parallel [
            (set (reg:DI 158)
                (ashift:DI (reg:DI 158)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:68 520 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 98 97 99 13 (parallel [
            (set (reg:DI 158)
                (plus:DI (reg:DI 158)
                    (reg:DI 89 [ _8 ])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:68 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 89 [ _8 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 89 [ _8 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 99 98 100 13 (parallel [
            (set (reg:DI 159)
                (ashift:DI (reg:DI 158)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:68 520 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 158)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 100 99 101 13 (set (reg:DI 158)
        (reg:DI 159)) "queryTAD.c":98:68 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 159)
        (nil)))
(insn 101 100 102 13 (set (reg:DI 90 [ _9 ])
        (reg:DI 158)) "queryTAD.c":98:68 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 158)
        (nil)))
(insn 102 101 103 13 (parallel [
            (set (reg:DI 91 [ _10 ])
                (plus:DI (reg:DI 90 [ _9 ])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:68 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 90 [ _9 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 103 102 104 13 (set (reg/f:DI 160)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [7 vecSen+0 S8 A64])) "queryTAD.c":98:68 66 {*movdi_internal}
     (nil))
(insn 104 103 105 13 (parallel [
            (set (reg/f:DI 92 [ _11 ])
                (plus:DI (reg:DI 91 [ _10 ])
                    (reg/f:DI 160)))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:68 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 160)
        (expr_list:REG_DEAD (reg:DI 91 [ _10 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -24 [0xffffffffffffffe8])) [7 vecSen+0 S8 A64])
                        (reg:DI 91 [ _10 ]))
                    (nil))))))
(insn 105 104 106 13 (parallel [
            (set (reg/f:DI 102 [ _32 ])
                (plus:DI (reg/f:DI 92 [ _11 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:77 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 106 105 107 13 (set (reg:DI 126 [ _66 ])
        (reg/f:DI 102 [ _32 ])) "queryTAD.c":98:77 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 102 [ _32 ])
        (nil)))
(insn 107 106 108 13 (parallel [
            (set (reg:DI 127 [ _67 ])
                (lshiftrt:DI (reg:DI 126 [ _66 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:77 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 108 107 109 13 (parallel [
            (set (reg:DI 128 [ _68 ])
                (plus:DI (reg:DI 127 [ _67 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:77 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 127 [ _67 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 109 108 110 13 (set (reg/f:DI 129 [ _69 ])
        (reg:DI 128 [ _68 ])) "queryTAD.c":98:77 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 128 [ _68 ])
        (nil)))
(insn 110 109 111 13 (set (reg:QI 130 [ _70 ])
        (mem:QI (reg/f:DI 129 [ _69 ]) [10 *_69+0 S1 A8])) "queryTAD.c":98:77 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 129 [ _69 ])
        (nil)))
(insn 111 110 112 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 130 [ _70 ])
            (const_int 0 [0]))) "queryTAD.c":98:77 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 130 [ _70 ])
        (nil)))
(jump_insn 112 111 113 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 117)
            (pc))) "queryTAD.c":98:77 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 117)
;;  succ:       15 [100.0% (guessed)] 
;;              14 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 92 126

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 [0.0% (guessed)]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 126
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 113 112 114 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 14 (set (reg:DI 5 di)
        (reg:DI 126 [ _66 ])) "queryTAD.c":98:77 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 126 [ _66 ])
        (nil)))
(call_insn 115 114 116 14 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":98:77 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 116 115 117)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       13 [100.0% (guessed)] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 92
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 92
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 93 94
(code_label 117 116 118 15 69 (nil) [1 uses])
(note 118 117 119 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 120 15 (set (reg/f:DI 93 [ _12 ])
        (mem/f:DI (plus:DI (reg/f:DI 92 [ _11 ])
                (const_int 8 [0x8])) [3 _11->name+0 S8 A64])) "queryTAD.c":98:77 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92 [ _11 ])
        (nil)))
(insn 120 119 121 15 (set (reg:DI 4 si)
        (reg/f:DI 88 [ _7 ])) "queryTAD.c":98:51 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88 [ _7 ])
        (nil)))
(insn 121 120 122 15 (set (reg:DI 5 di)
        (reg/f:DI 93 [ _12 ])) "queryTAD.c":98:51 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93 [ _12 ])
        (nil)))
(call_insn/i 122 121 123 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcasecmp") [flags 0x41]  <function_decl 0x7fc58ebf9400 strcasecmp>) [0 strcasecmp S1 A8])
            (const_int 0 [0]))) "queryTAD.c":98:51 677 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 123 122 126 15 (set (reg:SI 94 [ _13 ])
        (reg:SI 0 ax)) "queryTAD.c":98:51 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 126 123 127 15 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 94 [ _13 ])
            (const_int 0 [0]))) "queryTAD.c":98:48 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 94 [ _13 ])
        (nil)))
(jump_insn 127 126 128 15 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 151)
            (pc))) "queryTAD.c":98:48 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (nil))
 -> 151)
;;  succ:       16 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       2
;;              7
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 103 131 132 133 134 135 161
(code_label 128 127 129 16 63 (nil) [2 uses])
(note 129 128 130 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 131 16 (set (reg/f:DI 161)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])) "queryTAD.c":99:19 66 {*movdi_internal}
     (nil))
(insn 131 130 132 16 (parallel [
            (set (reg/f:DI 103 [ _33 ])
                (plus:DI (reg/f:DI 161)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":99:19 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 161)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])
                    (const_int 16 [0x10]))
                (nil)))))
(insn 132 131 133 16 (set (reg:DI 131 [ _71 ])
        (reg/f:DI 103 [ _33 ])) "queryTAD.c":99:19 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 103 [ _33 ])
        (nil)))
(insn 133 132 134 16 (parallel [
            (set (reg:DI 132 [ _72 ])
                (lshiftrt:DI (reg:DI 131 [ _71 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":99:19 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 134 133 135 16 (parallel [
            (set (reg:DI 133 [ _73 ])
                (plus:DI (reg:DI 132 [ _72 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":99:19 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 132 [ _72 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 135 134 136 16 (set (reg/f:DI 134 [ _74 ])
        (reg:DI 133 [ _73 ])) "queryTAD.c":99:19 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 133 [ _73 ])
        (nil)))
(insn 136 135 137 16 (set (reg:QI 135 [ _75 ])
        (mem:QI (reg/f:DI 134 [ _74 ]) [10 *_74+0 S1 A8])) "queryTAD.c":99:19 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 134 [ _74 ])
        (nil)))
(insn 137 136 138 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 135 [ _75 ])
            (const_int 0 [0]))) "queryTAD.c":99:19 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 135 [ _75 ])
        (nil)))
(jump_insn 138 137 139 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 143)
            (pc))) "queryTAD.c":99:19 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 143)
;;  succ:       18 [100.0% (guessed)] 
;;              17 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 131

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       16 [0.0% (guessed)]  (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 131
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 139 138 140 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 141 17 (set (reg:DI 5 di)
        (reg:DI 131 [ _71 ])) "queryTAD.c":99:19 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 131 [ _71 ])
        (nil)))
(call_insn 141 140 142 17 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":99:19 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 142 141 143)
;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       16 [100.0% (guessed)] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 97 162 163
(code_label 143 142 144 18 70 (nil) [1 uses])
(note 144 143 145 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 145 144 146 18 (set (reg/f:DI 162)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])) "queryTAD.c":99:19 66 {*movdi_internal}
     (nil))
(insn 146 145 147 18 (set (reg/f:DI 163)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":99:19 66 {*movdi_internal}
     (nil))
(insn 147 146 148 18 (set (mem/f:DI (plus:DI (reg/f:DI 162)
                (const_int 16 [0x10])) [8 aux_20(D)->tail+0 S8 A64])
        (reg/f:DI 163)) "queryTAD.c":99:19 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 163)
        (expr_list:REG_DEAD (reg/f:DI 162)
            (nil))))
(insn 148 147 206 18 (set (reg/f:DI 97 [ _16 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])) "queryTAD.c":100:16 66 {*movdi_internal}
     (nil))
(jump_insn 206 148 207 18 (set (pc)
        (label_ref 197)) "queryTAD.c":100:16 660 {jump}
     (nil)
 -> 197)
;;  succ:       24 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 97

(barrier 207 206 151)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       8
;;              15
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 104 136 137 138 139 140 164
(code_label 151 207 152 19 66 (nil) [2 uses])
(note 152 151 153 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 153 152 154 19 (set (reg/f:DI 164)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":102:28 66 {*movdi_internal}
     (nil))
(insn 154 153 155 19 (parallel [
            (set (reg/f:DI 104 [ _34 ])
                (plus:DI (reg/f:DI 164)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":102:28 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 164)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])
                    (const_int 16 [0x10]))
                (nil)))))
(insn 155 154 156 19 (set (reg:DI 136 [ _76 ])
        (reg/f:DI 104 [ _34 ])) "queryTAD.c":102:28 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 104 [ _34 ])
        (nil)))
(insn 156 155 157 19 (parallel [
            (set (reg:DI 137 [ _77 ])
                (lshiftrt:DI (reg:DI 136 [ _76 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":102:28 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 157 156 158 19 (parallel [
            (set (reg:DI 138 [ _78 ])
                (plus:DI (reg:DI 137 [ _77 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":102:28 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 137 [ _77 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 158 157 159 19 (set (reg/f:DI 139 [ _79 ])
        (reg:DI 138 [ _78 ])) "queryTAD.c":102:28 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 138 [ _78 ])
        (nil)))
(insn 159 158 160 19 (set (reg:QI 140 [ _80 ])
        (mem:QI (reg/f:DI 139 [ _79 ]) [10 *_79+0 S1 A8])) "queryTAD.c":102:28 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 139 [ _79 ])
        (nil)))
(insn 160 159 161 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 140 [ _80 ])
            (const_int 0 [0]))) "queryTAD.c":102:28 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 140 [ _80 ])
        (nil)))
(jump_insn 161 160 162 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 166)
            (pc))) "queryTAD.c":102:28 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 166)
;;  succ:       21 [100.0% (guessed)] 
;;              20 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 136

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       19 [0.0% (guessed)]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 136
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 136
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 162 161 163 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 163 162 164 20 (set (reg:DI 5 di)
        (reg:DI 136 [ _76 ])) "queryTAD.c":102:28 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 136 [ _76 ])
        (nil)))
(call_insn 164 163 165 20 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":102:28 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 165 164 166)
;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL)
;;  pred:       19 [100.0% (guessed)] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 95 96 105 141 142 143 144 145 165 166 167 168 169
(code_label 166 165 167 21 72 (nil) [1 uses])
(note 167 166 168 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 168 167 169 21 (set (reg/f:DI 165)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":102:28 66 {*movdi_internal}
     (nil))
(insn 169 168 170 21 (set (reg/f:DI 95 [ _14 ])
        (mem/f:DI (plus:DI (reg/f:DI 165)
                (const_int 16 [0x10])) [8 l_18(D)->tail+0 S8 A64])) "queryTAD.c":102:28 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 165)
        (nil)))
(insn 170 169 171 21 (set (reg:DI 166)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S8 A64])) "queryTAD.c":102:15 66 {*movdi_internal}
     (nil))
(insn 171 170 172 21 (set (reg:DI 167)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [7 vecSen+0 S8 A64])) "queryTAD.c":102:15 66 {*movdi_internal}
     (nil))
(insn 172 171 173 21 (set (reg:DI 168)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])) "queryTAD.c":102:15 66 {*movdi_internal}
     (nil))
(insn 173 172 174 21 (set (reg:DI 2 cx)
        (reg:DI 166)) "queryTAD.c":102:15 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 166)
        (nil)))
(insn 174 173 175 21 (set (reg:DI 1 dx)
        (reg:DI 167)) "queryTAD.c":102:15 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 167)
        (nil)))
(insn 175 174 176 21 (set (reg:DI 4 si)
        (reg:DI 168)) "queryTAD.c":102:15 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 168)
        (nil)))
(insn 176 175 177 21 (set (reg:DI 5 di)
        (reg/f:DI 95 [ _14 ])) "queryTAD.c":102:15 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95 [ _14 ])
        (nil)))
(call_insn 177 176 178 21 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("makeSenLRec") [flags 0x3]  <function_decl 0x7fc58ebf9e00 makeSenLRec>) [0 makeSenLRec S1 A8])
            (const_int 0 [0]))) "queryTAD.c":102:15 677 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 178 177 179 21 (set (reg/f:DI 96 [ _15 ])
        (reg:DI 0 ax)) "queryTAD.c":102:15 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 179 178 180 21 (set (reg/f:DI 169)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":102:13 66 {*movdi_internal}
     (nil))
(insn 180 179 181 21 (parallel [
            (set (reg/f:DI 105 [ _35 ])
                (plus:DI (reg/f:DI 169)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":102:13 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 169)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])
                    (const_int 16 [0x10]))
                (nil)))))
(insn 181 180 182 21 (set (reg:DI 141 [ _81 ])
        (reg/f:DI 105 [ _35 ])) "queryTAD.c":102:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 105 [ _35 ])
        (nil)))
(insn 182 181 183 21 (parallel [
            (set (reg:DI 142 [ _82 ])
                (lshiftrt:DI (reg:DI 141 [ _81 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":102:13 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 183 182 184 21 (parallel [
            (set (reg:DI 143 [ _83 ])
                (plus:DI (reg:DI 142 [ _82 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":102:13 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 142 [ _82 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 184 183 185 21 (set (reg/f:DI 144 [ _84 ])
        (reg:DI 143 [ _83 ])) "queryTAD.c":102:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 143 [ _83 ])
        (nil)))
(insn 185 184 186 21 (set (reg:QI 145 [ _85 ])
        (mem:QI (reg/f:DI 144 [ _84 ]) [10 *_84+0 S1 A8])) "queryTAD.c":102:13 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 144 [ _84 ])
        (nil)))
(insn 186 185 187 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 145 [ _85 ])
            (const_int 0 [0]))) "queryTAD.c":102:13 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 145 [ _85 ])
        (nil)))
(jump_insn 187 186 188 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 192)
            (pc))) "queryTAD.c":102:13 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 192)
;;  succ:       23 [100.0% (guessed)] 
;;              22 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96 141

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL)
;;  pred:       21 [0.0% (guessed)]  (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 141
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 141
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 188 187 189 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 189 188 190 22 (set (reg:DI 5 di)
        (reg:DI 141 [ _81 ])) "queryTAD.c":102:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 141 [ _81 ])
        (nil)))
(call_insn 190 189 191 22 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":102:13 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 191 190 192)
;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL)
;;  pred:       21 [100.0% (guessed)] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96
;; lr  def 	 97 170
(code_label 192 191 193 23 73 (nil) [1 uses])
(note 193 192 194 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 194 193 195 23 (set (reg/f:DI 170)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":102:13 66 {*movdi_internal}
     (nil))
(insn 195 194 196 23 (set (mem/f:DI (plus:DI (reg/f:DI 170)
                (const_int 16 [0x10])) [8 l_18(D)->tail+0 S8 A64])
        (reg/f:DI 96 [ _15 ])) "queryTAD.c":102:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 170)
        (expr_list:REG_DEAD (reg/f:DI 96 [ _15 ])
            (nil))))
(insn 196 195 197 23 (set (reg/f:DI 97 [ _16 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":103:12 66 {*movdi_internal}
     (nil))
;;  succ:       24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 97

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 1, flags: (RTL)
;;  pred:       23 (FALLTHRU)
;;              18 [always] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 97
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 97
;; lr  def 	 0 [ax] 146
(code_label 197 196 198 24 71 (nil) [1 uses])
(note 198 197 199 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 199 198 203 24 (set (reg/f:DI 146 [ <retval> ])
        (reg/f:DI 97 [ _16 ])) 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97 [ _16 ])
        (nil)))
(insn 203 199 204 24 (set (reg/i:DI 0 ax)
        (reg/f:DI 146 [ <retval> ])) "queryTAD.c":104:1 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 146 [ <retval> ])
        (nil)))
(insn 204 203 0 24 (use (reg/i:DI 0 ax)) "queryTAD.c":104:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function makeSenL (makeSenL, funcdef_no=8, decl_uid=3391, cgraph_uid=9, symbol_order=8)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 37 n_edges 38 count 37 (    1)
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 35 34 36
;;
;; Loop 2
;;  header 33, latch 32
;;  depth 1, outer 0
;;  nodes: 33 32 30 28 26 24 22
;;
;; Loop 1
;;  header 18, latch 17
;;  depth 1, outer 0
;;  nodes: 18 17 15 13 11 9 7 5 3
;; 2 succs { 18 }
;; 3 succs { 4 5 }
;; 4 succs { }
;; 5 succs { 7 6 }
;; 6 succs { }
;; 7 succs { 9 8 }
;; 8 succs { }
;; 9 succs { 11 10 }
;; 10 succs { }
;; 11 succs { 13 12 }
;; 12 succs { }
;; 13 succs { 15 14 }
;; 14 succs { }
;; 15 succs { 17 16 }
;; 16 succs { }
;; 17 succs { 18 }
;; 18 succs { 3 19 }
;; 19 succs { 21 20 }
;; 20 succs { }
;; 21 succs { 33 }
;; 22 succs { 24 23 }
;; 23 succs { }
;; 24 succs { 26 25 }
;; 25 succs { }
;; 26 succs { 28 27 }
;; 27 succs { }
;; 28 succs { 30 29 }
;; 29 succs { }
;; 30 succs { 32 31 }
;; 31 succs { }
;; 32 succs { 33 }
;; 33 succs { 22 35 }
;; 35 succs { 34 }
;; 34 succs { 36 }
;; 36 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 55.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 117.
verify found no changes in insn with uid = 128.
verify found no changes in insn with uid = 141.
verify found no changes in insn with uid = 167.
verify found no changes in insn with uid = 188.
verify found no changes in insn with uid = 204.
verify found no changes in insn with uid = 212.
verify found no changes in insn with uid = 224.
verify found no changes in insn with uid = 240.
verify found no changes in insn with uid = 248.
verify found no changes in insn with uid = 260.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r195: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r195,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r193,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a60 (r183,l0) best SIREG, allocno GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r182,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a112 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a113 (r169,l0) best AREG, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r164,l0) best DIREG, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r159,l0) best DIREG, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a18 (r154,l0) best DIREG, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a27 (r149,l0) best DIREG, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a34 (r144,l0) best DIREG, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a43 (r139,l0) best DIREG, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a52 (r134,l0) best DIREG, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a64 (r129,l0) best DIREG, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a75 (r124,l0) best DIREG, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a83 (r119,l0) best DIREG, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a96 (r114,l0) best DIREG, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a106 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a105 (r109,l0) best DIREG, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r96,l0) best SIREG, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a25 (r94,l0) best SIREG, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a51 (r92,l0) best AREG, allocno GENERAL_REGS
    r91: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a59 (r91,l0) best DIREG, allocno GENERAL_REGS
    r90: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a61 (r90,l0) best DREG, allocno GENERAL_REGS
    r89: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a62 (r89,l0) best CREG, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a2(r164,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a3(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a4(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a5(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a6(r165,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a7(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a8(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a9(r96,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:18000
  a11(r159,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a12(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a13(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a14(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a15(r160,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a16(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a17(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a18(r154,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a19(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a20(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a21(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a22(r155,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a23(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a24(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a25(r94,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a26(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:17000
  a27(r149,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a28(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a29(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a30(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a31(r150,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a32(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a33(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a34(r144,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a35(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a36(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a37(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a38(r145,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a39(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a40(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a41(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a42(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a43(r139,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a44(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a45(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a46(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a47(r140,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a48(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a49(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a50(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a51(r92,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a52(r134,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a53(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a54(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a55(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a56(r135,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a57(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a58(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a59(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a60(r183,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a61(r90,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a62(r89,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a63(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a64(r129,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a65(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a66(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a67(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a68(r130,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a69(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a70(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a71(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a72(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a73(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a74(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a75(r124,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a76(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a77(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a78(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a79(r125,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a80(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a81(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a82(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:39000 INT_SSE_REGS:39000 ALL_REGS:636000 MEM:16000
  a83(r119,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a84(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a85(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a86(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a87(r120,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a88(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a89(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a90(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a91(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:52000 NO_REX_SSE_REGS:52000 SSE_REGS:52000 MMX_REGS:90000 INT_SSE_REGS:90000 ALL_REGS:1472000 MEM:32000
  a92(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a93(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:39000 INT_SSE_REGS:39000 ALL_REGS:636000 MEM:16000
  a94(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a95(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a96(r114,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a97(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a98(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a99(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a100(r115,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a101(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a102(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a103(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a104(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a105(r109,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a106(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a107(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a108(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a109(r110,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a110(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a111(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a112(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a113(r169,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000

   Insn 282(l0): point = 0
   Insn 280(l0): point = 4
   Insn 260(l0): point = 7
   Insn 259(l0): point = 9
   Insn 240(l0): point = 12
   Insn 239(l0): point = 14
   Insn 224(l0): point = 17
   Insn 223(l0): point = 19
   Insn 204(l0): point = 22
   Insn 203(l0): point = 24
   Insn 188(l0): point = 27
   Insn 187(l0): point = 29
   Insn 185(l0): point = 32
   Insn 184(l0): point = 34
   Insn 183(l0): point = 36
   Insn 182(l0): point = 38
   Insn 181(l0): point = 40
   Insn 180(l0): point = 42
   Insn 179(l0): point = 44
   Insn 178(l0): point = 46
   Insn 177(l0): point = 48
   Insn 271(l0): point = 51
   Insn 270(l0): point = 53
   Insn 266(l0): point = 56
   Insn 265(l0): point = 58
   Insn 264(l0): point = 60
   Insn 257(l0): point = 63
   Insn 256(l0): point = 65
   Insn 255(l0): point = 67
   Insn 254(l0): point = 69
   Insn 253(l0): point = 71
   Insn 252(l0): point = 73
   Insn 251(l0): point = 75
   Insn 250(l0): point = 77
   Insn 249(l0): point = 79
   Insn 248(l0): point = 81
   Insn 247(l0): point = 83
   Insn 246(l0): point = 85
   Insn 245(l0): point = 87
   Insn 244(l0): point = 89
   Insn 237(l0): point = 92
   Insn 236(l0): point = 94
   Insn 235(l0): point = 96
   Insn 234(l0): point = 98
   Insn 233(l0): point = 100
   Insn 232(l0): point = 102
   Insn 231(l0): point = 104
   Insn 230(l0): point = 106
   Insn 229(l0): point = 108
   Insn 228(l0): point = 110
   Insn 221(l0): point = 113
   Insn 220(l0): point = 115
   Insn 219(l0): point = 117
   Insn 218(l0): point = 119
   Insn 217(l0): point = 121
   Insn 216(l0): point = 123
   Insn 215(l0): point = 125
   Insn 214(l0): point = 127
   Insn 213(l0): point = 129
   Insn 212(l0): point = 131
   Insn 211(l0): point = 133
   Insn 210(l0): point = 135
   Insn 209(l0): point = 137
   Insn 208(l0): point = 139
   Insn 201(l0): point = 142
   Insn 200(l0): point = 144
   Insn 199(l0): point = 146
   Insn 198(l0): point = 148
   Insn 197(l0): point = 150
   Insn 196(l0): point = 152
   Insn 195(l0): point = 154
   Insn 194(l0): point = 156
   Insn 193(l0): point = 158
   Insn 192(l0): point = 160
   Insn 277(l0): point = 163
   Insn 173(l0): point = 165
   Insn 172(l0): point = 167
   Insn 171(l0): point = 169
   Insn 167(l0): point = 172
   Insn 166(l0): point = 174
   Insn 164(l0): point = 177
   Insn 163(l0): point = 179
   Insn 162(l0): point = 181
   Insn 161(l0): point = 183
   Insn 160(l0): point = 185
   Insn 159(l0): point = 187
   Insn 158(l0): point = 189
   Insn 157(l0): point = 191
   Insn 156(l0): point = 193
   Insn 141(l0): point = 196
   Insn 140(l0): point = 198
   Insn 117(l0): point = 201
   Insn 116(l0): point = 203
   Insn 96(l0): point = 206
   Insn 95(l0): point = 208
   Insn 80(l0): point = 211
   Insn 79(l0): point = 213
   Insn 55(l0): point = 216
   Insn 54(l0): point = 218
   Insn 38(l0): point = 221
   Insn 37(l0): point = 223
   Insn 21(l0): point = 226
   Insn 20(l0): point = 228
   Insn 19(l0): point = 230
   Insn 18(l0): point = 232
   Insn 17(l0): point = 234
   Insn 15(l0): point = 237
   Insn 14(l0): point = 239
   Insn 13(l0): point = 241
   Insn 12(l0): point = 243
   Insn 11(l0): point = 245
   Insn 10(l0): point = 247
   Insn 154(l0): point = 250
   Insn 153(l0): point = 252
   Insn 147(l0): point = 255
   Insn 146(l0): point = 257
   Insn 145(l0): point = 259
   Insn 138(l0): point = 262
   Insn 137(l0): point = 264
   Insn 136(l0): point = 266
   Insn 135(l0): point = 268
   Insn 134(l0): point = 270
   Insn 133(l0): point = 272
   Insn 132(l0): point = 274
   Insn 131(l0): point = 276
   Insn 130(l0): point = 278
   Insn 129(l0): point = 280
   Insn 128(l0): point = 282
   Insn 127(l0): point = 284
   Insn 126(l0): point = 286
   Insn 125(l0): point = 288
   Insn 124(l0): point = 290
   Insn 123(l0): point = 292
   Insn 122(l0): point = 294
   Insn 121(l0): point = 296
   Insn 114(l0): point = 299
   Insn 113(l0): point = 301
   Insn 112(l0): point = 303
   Insn 111(l0): point = 305
   Insn 110(l0): point = 307
   Insn 109(l0): point = 309
   Insn 108(l0): point = 311
   Insn 107(l0): point = 313
   Insn 106(l0): point = 315
   Insn 105(l0): point = 317
   Insn 104(l0): point = 319
   Insn 103(l0): point = 321
   Insn 102(l0): point = 323
   Insn 101(l0): point = 325
   Insn 100(l0): point = 327
   Insn 93(l0): point = 330
   Insn 92(l0): point = 332
   Insn 91(l0): point = 334
   Insn 90(l0): point = 336
   Insn 89(l0): point = 338
   Insn 88(l0): point = 340
   Insn 87(l0): point = 342
   Insn 86(l0): point = 344
   Insn 85(l0): point = 346
   Insn 84(l0): point = 348
   Insn 77(l0): point = 351
   Insn 76(l0): point = 353
   Insn 75(l0): point = 355
   Insn 74(l0): point = 357
   Insn 73(l0): point = 359
   Insn 72(l0): point = 361
   Insn 71(l0): point = 363
   Insn 70(l0): point = 365
   Insn 69(l0): point = 367
   Insn 68(l0): point = 369
   Insn 67(l0): point = 371
   Insn 66(l0): point = 373
   Insn 65(l0): point = 375
   Insn 64(l0): point = 377
   Insn 63(l0): point = 379
   Insn 62(l0): point = 381
   Insn 61(l0): point = 383
   Insn 60(l0): point = 385
   Insn 59(l0): point = 387
   Insn 52(l0): point = 390
   Insn 51(l0): point = 392
   Insn 50(l0): point = 394
   Insn 49(l0): point = 396
   Insn 48(l0): point = 398
   Insn 47(l0): point = 400
   Insn 46(l0): point = 402
   Insn 45(l0): point = 404
   Insn 44(l0): point = 406
   Insn 43(l0): point = 408
   Insn 42(l0): point = 410
   Insn 35(l0): point = 413
   Insn 34(l0): point = 415
   Insn 33(l0): point = 417
   Insn 32(l0): point = 419
   Insn 31(l0): point = 421
   Insn 30(l0): point = 423
   Insn 29(l0): point = 425
   Insn 28(l0): point = 427
   Insn 27(l0): point = 429
   Insn 26(l0): point = 431
   Insn 25(l0): point = 433
   Insn 275(l0): point = 436
   Insn 6(l0): point = 438
   Insn 2(l0): point = 440
 a0(r195): [57..58]
 a1(r194): [59..60]
 a2(r164): [63..75] [10..11]
 a3(r168): [66..67]
 a4(r167): [68..69]
 a5(r166): [70..71]
 a6(r165): [72..73]
 a7(r108): [76..77]
 a8(r193): [78..79]
 a9(r96): [88..89]
 a10(r95): [90..108]
 a11(r159): [92..104] [15..16]
 a12(r163): [95..96]
 a13(r162): [97..98]
 a14(r161): [99..100]
 a15(r160): [101..102]
 a16(r107): [105..106]
 a17(r192): [109..110]
 a18(r154): [113..125] [20..21]
 a19(r158): [116..117]
 a20(r157): [118..119]
 a21(r156): [120..121]
 a22(r155): [122..123]
 a23(r106): [126..127]
 a24(r191): [128..129]
 a25(r94): [138..139]
 a26(r93): [140..158]
 a27(r149): [142..154] [25..26]
 a28(r153): [145..146]
 a29(r152): [147..148]
 a30(r151): [149..150]
 a31(r150): [151..152]
 a32(r105): [155..156]
 a33(r190): [159..160]
 a34(r144): [30..44]
 a35(r148): [35..36]
 a36(r147): [37..38]
 a37(r146): [39..40]
 a38(r145): [41..42]
 a39(r104): [45..46]
 a40(r189): [47..48]
 a41(r188): [166..167]
 a42(r187): [168..169]
 a43(r139): [175..189]
 a44(r143): [180..181]
 a45(r142): [182..183]
 a46(r141): [184..185]
 a47(r140): [186..187]
 a48(r103): [190..191]
 a49(r186): [192..193]
 a50(r185): [258..259]
 a51(r92): [258..280]
 a52(r134): [262..274] [199..200]
 a53(r138): [265..266]
 a54(r137): [267..268]
 a55(r136): [269..270]
 a56(r135): [271..272]
 a57(r102): [275..276]
 a58(r184): [277..278]
 a59(r91): [285..294]
 a60(r183): [287..292]
 a61(r90): [289..317]
 a62(r89): [291..321]
 a63(r182): [295..296]
 a64(r129): [299..311] [204..205]
 a65(r133): [302..303]
 a66(r132): [304..305]
 a67(r131): [306..307]
 a68(r130): [308..309]
 a69(r101): [312..313]
 a70(r181): [314..315]
 a71(r180): [318..319]
 a72(r179): [322..323]
 a73(r178): [326..327]
 a74(r88): [326..348]
 a75(r124): [330..342] [209..210]
 a76(r128): [333..334]
 a77(r127): [335..336]
 a78(r126): [337..338]
 a79(r125): [339..340]
 a80(r100): [343..344]
 a81(r177): [345..346]
 a82(r87): [349..367]
 a83(r119): [351..363] [214..215]
 a84(r123): [354..355]
 a85(r122): [356..357]
 a86(r121): [358..359]
 a87(r120): [360..361]
 a88(r99): [364..365]
 a89(r86): [368..369]
 a90(r84): [368..385]
 a91(r175): [374..379] [370..371]
 a92(r176): [372..373]
 a93(r85): [376..381]
 a94(r174): [382..383]
 a95(r173): [386..387]
 a96(r114): [390..402] [219..220]
 a97(r118): [393..394]
 a98(r117): [395..396]
 a99(r116): [397..398]
 a100(r115): [399..400]
 a101(r98): [403..404]
 a102(r172): [405..406]
 a103(r171): [409..410]
 a104(r83): [409..429]
 a105(r109): [413..425] [224..225]
 a106(r113): [416..417]
 a107(r112): [418..419]
 a108(r111): [420..421]
 a109(r110): [422..423]
 a110(r97): [426..427]
 a111(r82): [430..431]
 a112(r170): [432..433]
 a113(r169): [242..243]
Compressing live ranges: from 443 to 204 - 46%
Ranges after the compression:
 a0(r195): [20..21]
 a1(r194): [22..23]
 a2(r164): [24..31] [0..1]
 a3(r168): [24..25]
 a4(r167): [26..27]
 a5(r166): [28..29]
 a6(r165): [30..31]
 a7(r108): [32..33]
 a8(r193): [34..35]
 a9(r96): [36..37]
 a10(r95): [38..47]
 a11(r159): [38..45] [2..3]
 a12(r163): [38..39]
 a13(r162): [40..41]
 a14(r161): [42..43]
 a15(r160): [44..45]
 a16(r107): [46..47]
 a17(r192): [48..49]
 a18(r154): [50..57] [4..5]
 a19(r158): [50..51]
 a20(r157): [52..53]
 a21(r156): [54..55]
 a22(r155): [56..57]
 a23(r106): [58..59]
 a24(r191): [60..61]
 a25(r94): [62..63]
 a26(r93): [64..73]
 a27(r149): [64..71] [6..7]
 a28(r153): [64..65]
 a29(r152): [66..67]
 a30(r151): [68..69]
 a31(r150): [70..71]
 a32(r105): [72..73]
 a33(r190): [74..75]
 a34(r144): [8..15]
 a35(r148): [8..9]
 a36(r147): [10..11]
 a37(r146): [12..13]
 a38(r145): [14..15]
 a39(r104): [16..17]
 a40(r189): [18..19]
 a41(r188): [76..77]
 a42(r187): [78..79]
 a43(r139): [80..87]
 a44(r143): [80..81]
 a45(r142): [82..83]
 a46(r141): [84..85]
 a47(r140): [86..87]
 a48(r103): [88..89]
 a49(r186): [90..91]
 a50(r185): [106..107]
 a51(r92): [106..119]
 a52(r134): [108..115] [92..93]
 a53(r138): [108..109]
 a54(r137): [110..111]
 a55(r136): [112..113]
 a56(r135): [114..115]
 a57(r102): [116..117]
 a58(r184): [118..119]
 a59(r91): [120..121]
 a60(r183): [120..121]
 a61(r90): [120..135]
 a62(r89): [120..137]
 a63(r182): [122..123]
 a64(r129): [124..131] [94..95]
 a65(r133): [124..125]
 a66(r132): [126..127]
 a67(r131): [128..129]
 a68(r130): [130..131]
 a69(r101): [132..133]
 a70(r181): [134..135]
 a71(r180): [136..137]
 a72(r179): [138..139]
 a73(r178): [140..141]
 a74(r88): [140..153]
 a75(r124): [142..149] [96..97]
 a76(r128): [142..143]
 a77(r127): [144..145]
 a78(r126): [146..147]
 a79(r125): [148..149]
 a80(r100): [150..151]
 a81(r177): [152..153]
 a82(r87): [154..163]
 a83(r119): [154..161] [98..99]
 a84(r123): [154..155]
 a85(r122): [156..157]
 a86(r121): [158..159]
 a87(r120): [160..161]
 a88(r99): [162..163]
 a89(r86): [164..165]
 a90(r84): [164..173]
 a91(r175): [170..171] [166..167]
 a92(r176): [168..169]
 a93(r85): [170..171]
 a94(r174): [172..173]
 a95(r173): [174..175]
 a96(r114): [176..183] [100..101]
 a97(r118): [176..177]
 a98(r117): [178..179]
 a99(r116): [180..181]
 a100(r115): [182..183]
 a101(r98): [184..185]
 a102(r172): [186..187]
 a103(r171): [188..189]
 a104(r83): [188..199]
 a105(r109): [190..197] [102..103]
 a106(r113): [190..191]
 a107(r112): [192..193]
 a108(r111): [194..195]
 a109(r110): [196..197]
 a110(r97): [198..199]
 a111(r82): [200..201]
 a112(r170): [202..203]
 a113(r169): [104..105]
  pref0:a60(r183)<-hr4@1500
  pref1:a113(r169)<-hr0@1500
  pref2:a2(r164)<-hr5@1500
  pref3:a11(r159)<-hr5@1500
  pref4:a18(r154)<-hr5@1500
  pref5:a27(r149)<-hr5@1500
  pref6:a34(r144)<-hr5@1500
  pref7:a43(r139)<-hr5@1500
  pref8:a52(r134)<-hr5@1500
  pref9:a64(r129)<-hr5@1500
  pref10:a75(r124)<-hr5@1500
  pref11:a83(r119)<-hr5@1500
  pref12:a96(r114)<-hr5@1500
  pref13:a105(r109)<-hr5@1500
  pref14:a9(r96)<-hr4@1500
  pref15:a25(r94)<-hr4@1500
  pref16:a51(r92)<-hr0@1500
  pref17:a59(r91)<-hr5@1500
  pref18:a61(r90)<-hr1@1500
  pref19:a62(r89)<-hr2@1500
  regions=1, blocks=37, points=204
    allocnos=114 (big 0), copies=0, conflicts=0, ranges=125
Disposition:
  111:r82  l0     0  104:r83  l0     1   90:r84  l0     2   93:r85  l0     1
   89:r86  l0     0   82:r87  l0     0   74:r88  l0     1   62:r89  l0     2
   61:r90  l0     1   59:r91  l0     0   51:r92  l0     0   26:r93  l0     0
   25:r94  l0     0   10:r95  l0     0    9:r96  l0     0  110:r97  l0     0
  101:r98  l0     0   88:r99  l0     1   80:r100 l0     0   69:r101 l0     0
   57:r102 l0     1   48:r103 l0     0   39:r104 l0     0   32:r105 l0     1
   23:r106 l0     0   16:r107 l0     1    7:r108 l0     0  105:r109 l0     0
  109:r110 l0     2  108:r111 l0     2  107:r112 l0     2  106:r113 l0     2
   96:r114 l0     0  100:r115 l0     1   99:r116 l0     1   98:r117 l0     1
   97:r118 l0     1   83:r119 l0     1   87:r120 l0     2   86:r121 l0     2
   85:r122 l0     2   84:r123 l0     2   75:r124 l0     0   79:r125 l0     2
   78:r126 l0     2   77:r127 l0     2   76:r128 l0     2   64:r129 l0     0
   68:r130 l0     4   67:r131 l0     4   66:r132 l0     4   65:r133 l0     4
   52:r134 l0     1   56:r135 l0     2   55:r136 l0     2   54:r137 l0     2
   53:r138 l0     2   43:r139 l0     0   47:r140 l0     1   46:r141 l0     1
   45:r142 l0     1   44:r143 l0     1   34:r144 l0     0   38:r145 l0     1
   37:r146 l0     1   36:r147 l0     1   35:r148 l0     1   27:r149 l0     1
   31:r150 l0     2   30:r151 l0     2   29:r152 l0     2   28:r153 l0     2
   18:r154 l0     0   22:r155 l0     1   21:r156 l0     1   20:r157 l0     1
   19:r158 l0     1   11:r159 l0     1   15:r160 l0     2   14:r161 l0     2
   13:r162 l0     2   12:r163 l0     2    2:r164 l0     0    6:r165 l0     1
    5:r166 l0     1    4:r167 l0     1    3:r168 l0     1  113:r169 l0     0
  112:r170 l0     0  103:r171 l0     0  102:r172 l0     0   95:r173 l0     0
   94:r174 l0     0   91:r175 l0     0   92:r176 l0     0   81:r177 l0     0
   73:r178 l0     0   72:r179 l0     0   71:r180 l0     0   70:r181 l0     0
   63:r182 l0     0   60:r183 l0     4   58:r184 l0     1   50:r185 l0     1
   49:r186 l0     0   42:r187 l0     0   41:r188 l0     0   40:r189 l0     0
   33:r190 l0     0   24:r191 l0     0   17:r192 l0     0    8:r193 l0     0
    1:r194 l0     0    0:r195 l0     0
+++Costs: overall 28000, reg 28000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


makeSenL

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={22d,4u} r1={21d,1u} r2={21d,1u} r4={23d,3u} r5={38d,19u} r6={1d,36u} r7={1d,55u} r8={19d} r9={19d} r10={19d} r11={19d} r12={19d} r13={19d} r14={19d} r15={19d} r16={1d,35u} r17={73d,15u} r18={19d} r19={1d,69u,9e} r20={20d} r21={20d} r22={20d} r23={20d} r24={20d} r25={20d} r26={20d} r27={20d} r28={19d} r29={19d} r30={19d} r31={19d} r32={19d} r33={19d} r34={19d} r35={19d} r36={20d} r37={20d} r38={19d} r39={19d} r44={19d} r45={19d} r46={19d} r47={19d} r48={19d} r49={19d} r50={19d} r51={19d} r52={19d} r53={19d} r54={19d} r55={19d} r56={19d} r57={19d} r58={19d} r59={19d} r60={19d} r61={19d} r62={19d} r63={19d} r64={19d} r65={19d} r66={19d} r67={19d} r68={19d} r69={19d} r70={19d} r71={19d} r72={19d} r73={19d} r74={19d} r75={19d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,2u,1e} r86={1d,1u} r87={1d,2u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,2u} r94={1d,1u} r95={1d,2u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,2u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,2u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,2u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,2u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,2u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,2u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,2u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,2u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,2u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,2u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,2u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,2u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={4d,4u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} 
;;    total ref usage 1869{1488d,371u,10e} in 204{185 regular + 19 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])
        (reg:DI 5 di [ q ])) "queryTAD.c":107:26 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ q ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 275 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -20 [0xffffffffffffffec])) [13 i+0 S4 A32])
        (const_int 0 [0])) "queryTAD.c":108:13 67 {*movsi_internal}
     (nil))
(jump_insn 275 6 276 2 (set (pc)
        (label_ref 148)) "queryTAD.c":108:5 660 {jump}
     (nil)
 -> 148)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 276 275 150)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       18
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 169
(code_label 150 276 9 3 83 (nil) [1 uses])
(note 9 150 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "queryTAD.c":109:23 66 {*movdi_internal}
     (nil))
(call_insn 11 10 12 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fc58ee82000 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "queryTAD.c":109:23 677 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 12 11 13 3 (set (reg/f:DI 169)
        (reg:DI 0 ax)) "queryTAD.c":109:23 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 169)
            (nil))))
(insn 13 12 14 3 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 aux+0 S8 A64])
        (reg/f:DI 169)) "queryTAD.c":109:23 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 169)
        (nil)))
(insn 14 13 15 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [8 aux+0 S8 A64])
            (const_int 0 [0]))) "queryTAD.c":110:12 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "queryTAD.c":110:12 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 23)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fc58ec2dcf0 *.LC0>)) "queryTAD.c":111:13 66 {*movdi_internal}
     (nil))
(call_insn 18 17 19 4 (call (mem:QI (symbol_ref:DI ("perror") [flags 0x41]  <function_decl 0x7fc58ef5f500 perror>) [0 perror S1 A8])
        (const_int 0 [0])) "queryTAD.c":111:13 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 19 18 20 4 (call (mem:QI (symbol_ref:DI ("__asan_handle_no_return") [flags 0x41]  <function_decl 0x7fc58eead800 __builtin___asan_handle_no_return>) [0 __builtin___asan_handle_no_return S1 A8])
        (const_int 0 [0])) "queryTAD.c":112:13 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 20 19 21 4 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "queryTAD.c":112:13 67 {*movsi_internal}
     (nil))
(call_insn 21 20 22 4 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fc58ee7c900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) "queryTAD.c":112:13 666 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 22 21 23)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 83 97 109 110 111 112 113 170
(code_label 23 22 24 5 76 (nil) [1 uses])
(note 24 23 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 5 (set (reg:SI 170)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -20 [0xffffffffffffffec])) [13 i+0 S4 A32])) "queryTAD.c":114:20 67 {*movsi_internal}
     (nil))
(insn 26 25 27 5 (parallel [
            (set (reg:SI 82 [ _1 ])
                (plus:SI (reg:SI 170)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":114:20 190 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 170)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -20 [0xffffffffffffffec])) [13 i+0 S4 A32])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 27 26 28 5 (set (reg:DI 83 [ _2 ])
        (sign_extend:DI (reg:SI 82 [ _1 ]))) "queryTAD.c":114:20 128 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 82 [ _1 ])
        (nil)))
(insn 28 27 29 5 (set (reg/f:DI 97 [ _36 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 aux+0 S8 A64])) "queryTAD.c":114:17 66 {*movdi_internal}
     (nil))
(insn 29 28 30 5 (set (reg:DI 109 [ _61 ])
        (reg/f:DI 97 [ _36 ])) "queryTAD.c":114:17 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97 [ _36 ])
        (nil)))
(insn 30 29 31 5 (parallel [
            (set (reg:DI 110 [ _62 ])
                (lshiftrt:DI (reg:DI 109 [ _61 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":114:17 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 31 30 32 5 (parallel [
            (set (reg:DI 111 [ _63 ])
                (plus:DI (reg:DI 110 [ _62 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":114:17 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 110 [ _62 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 32 31 33 5 (set (reg/f:DI 112 [ _64 ])
        (reg:DI 111 [ _63 ])) "queryTAD.c":114:17 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 111 [ _63 ])
        (nil)))
(insn 33 32 34 5 (set (reg:QI 113 [ _65 ])
        (mem:QI (reg/f:DI 112 [ _64 ]) [10 *_64+0 S1 A8])) "queryTAD.c":114:17 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 112 [ _64 ])
        (nil)))
(insn 34 33 35 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 113 [ _65 ])
            (const_int 0 [0]))) "queryTAD.c":114:17 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 113 [ _65 ])
        (nil)))
(jump_insn 35 34 36 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) "queryTAD.c":114:17 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 40)
;;  succ:       7 [100.0% (guessed)] 
;;              6 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 109

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 [0.0% (guessed)]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 109
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 109
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 36 35 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 6 (set (reg:DI 5 di)
        (reg:DI 109 [ _61 ])) "queryTAD.c":114:17 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 109 [ _61 ])
        (nil)))
(call_insn 38 37 39 6 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":114:17 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 39 38 40)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       5 [100.0% (guessed)] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  def 	 17 [flags] 98 114 115 116 117 118 171 172
(code_label 40 39 41 7 77 (nil) [1 uses])
(note 41 40 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 7 (set (reg/f:DI 171)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 aux+0 S8 A64])) "queryTAD.c":114:17 66 {*movdi_internal}
     (nil))
(insn 43 42 44 7 (set (mem:DI (reg/f:DI 171) [2 aux_28->ID+0 S8 A64])
        (reg:DI 83 [ _2 ])) "queryTAD.c":114:17 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 171)
        (expr_list:REG_DEAD (reg:DI 83 [ _2 ])
            (nil))))
(insn 44 43 45 7 (set (reg/f:DI 172)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":115:29 66 {*movdi_internal}
     (nil))
(insn 45 44 46 7 (parallel [
            (set (reg/f:DI 98 [ _37 ])
                (plus:DI (reg/f:DI 172)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:29 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 172)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])
                    (const_int 24 [0x18]))
                (nil)))))
(insn 46 45 47 7 (set (reg:DI 114 [ _66 ])
        (reg/f:DI 98 [ _37 ])) "queryTAD.c":115:29 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 98 [ _37 ])
        (nil)))
(insn 47 46 48 7 (parallel [
            (set (reg:DI 115 [ _67 ])
                (lshiftrt:DI (reg:DI 114 [ _66 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:29 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 48 47 49 7 (parallel [
            (set (reg:DI 116 [ _68 ])
                (plus:DI (reg:DI 115 [ _67 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:29 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 115 [ _67 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 49 48 50 7 (set (reg/f:DI 117 [ _69 ])
        (reg:DI 116 [ _68 ])) "queryTAD.c":115:29 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 116 [ _68 ])
        (nil)))
(insn 50 49 51 7 (set (reg:QI 118 [ _70 ])
        (mem:QI (reg/f:DI 117 [ _69 ]) [10 *_69+0 S1 A8])) "queryTAD.c":115:29 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 117 [ _69 ])
        (nil)))
(insn 51 50 52 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 118 [ _70 ])
            (const_int 0 [0]))) "queryTAD.c":115:29 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 118 [ _70 ])
        (nil)))
(jump_insn 52 51 53 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) "queryTAD.c":115:29 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 57)
;;  succ:       9 [100.0% (guessed)] 
;;              8 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 114

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 [0.0% (guessed)]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 114
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 114
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 53 52 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 8 (set (reg:DI 5 di)
        (reg:DI 114 [ _66 ])) "queryTAD.c":115:29 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 114 [ _66 ])
        (nil)))
(call_insn 55 54 56 8 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":115:29 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 56 55 57)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       7 [100.0% (guessed)] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 84 85 86 87 99 119 120 121 122 123 173 174 175 176
(code_label 57 56 58 9 78 (nil) [1 uses])
(note 58 57 59 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 9 (set (reg/f:DI 173)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":115:29 66 {*movdi_internal}
     (nil))
(insn 60 59 61 9 (set (reg/f:DI 84 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 173)
                (const_int 24 [0x18])) [7 q_22(D)->sensorsID+0 S8 A64])) "queryTAD.c":115:29 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 173)
        (nil)))
(insn 61 60 62 9 (set (reg:SI 174)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -20 [0xffffffffffffffec])) [13 i+0 S4 A32])) "queryTAD.c":115:40 67 {*movsi_internal}
     (nil))
(insn 62 61 63 9 (set (reg:DI 85 [ _4 ])
        (sign_extend:DI (reg:SI 174))) "queryTAD.c":115:40 128 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 174)
        (nil)))
(insn 63 62 64 9 (set (reg:DI 175)
        (reg:DI 85 [ _4 ])) "queryTAD.c":115:40 66 {*movdi_internal}
     (nil))
(insn 64 63 65 9 (parallel [
            (set (reg:DI 175)
                (ashift:DI (reg:DI 175)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:40 520 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 65 64 66 9 (parallel [
            (set (reg:DI 175)
                (plus:DI (reg:DI 175)
                    (reg:DI 85 [ _4 ])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:40 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 85 [ _4 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 85 [ _4 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 66 65 67 9 (parallel [
            (set (reg:DI 176)
                (ashift:DI (reg:DI 175)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:40 520 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 175)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 67 66 68 9 (set (reg:DI 175)
        (reg:DI 176)) "queryTAD.c":115:40 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 176)
        (nil)))
(insn 68 67 69 9 (set (reg:DI 86 [ _5 ])
        (reg:DI 175)) "queryTAD.c":115:40 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 175)
        (nil)))
(insn 69 68 70 9 (parallel [
            (set (reg/f:DI 87 [ _6 ])
                (plus:DI (reg/f:DI 84 [ _3 ])
                    (reg:DI 86 [ _5 ])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:40 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 86 [ _5 ])
        (expr_list:REG_DEAD (reg/f:DI 84 [ _3 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 70 69 71 9 (set (reg/f:DI 99 [ _38 ])
        (reg/f:DI 87 [ _6 ])) "queryTAD.c":115:43 66 {*movdi_internal}
     (nil))
(insn 71 70 72 9 (set (reg:DI 119 [ _71 ])
        (reg/f:DI 99 [ _38 ])) "queryTAD.c":115:43 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 99 [ _38 ])
        (nil)))
(insn 72 71 73 9 (parallel [
            (set (reg:DI 120 [ _72 ])
                (lshiftrt:DI (reg:DI 119 [ _71 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:43 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 73 72 74 9 (parallel [
            (set (reg:DI 121 [ _73 ])
                (plus:DI (reg:DI 120 [ _72 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:43 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 120 [ _72 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 74 73 75 9 (set (reg/f:DI 122 [ _74 ])
        (reg:DI 121 [ _73 ])) "queryTAD.c":115:43 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 121 [ _73 ])
        (nil)))
(insn 75 74 76 9 (set (reg:QI 123 [ _75 ])
        (mem:QI (reg/f:DI 122 [ _74 ]) [10 *_74+0 S1 A8])) "queryTAD.c":115:43 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 122 [ _74 ])
        (nil)))
(insn 76 75 77 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 123 [ _75 ])
            (const_int 0 [0]))) "queryTAD.c":115:43 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 123 [ _75 ])
        (nil)))
(jump_insn 77 76 78 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) "queryTAD.c":115:43 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 82)
;;  succ:       11 [100.0% (guessed)] 
;;              10 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 87 119

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 [0.0% (guessed)]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 78 77 79 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 10 (set (reg:DI 5 di)
        (reg:DI 119 [ _71 ])) "queryTAD.c":115:43 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 119 [ _71 ])
        (nil)))
(call_insn 80 79 81 10 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":115:43 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 81 80 82)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       9 [100.0% (guessed)] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 87
;; lr  def 	 17 [flags] 88 100 124 125 126 127 128 177
(code_label 82 81 83 11 79 (nil) [1 uses])
(note 83 82 84 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 11 (set (reg:DI 88 [ _7 ])
        (mem:DI (reg/f:DI 87 [ _6 ]) [2 _6->total+0 S8 A64])) "queryTAD.c":115:43 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ _6 ])
        (nil)))
(insn 85 84 86 11 (set (reg/f:DI 177)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 aux+0 S8 A64])) "queryTAD.c":115:26 66 {*movdi_internal}
     (nil))
(insn 86 85 87 11 (parallel [
            (set (reg/f:DI 100 [ _39 ])
                (plus:DI (reg/f:DI 177)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:26 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 177)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -8 [0xfffffffffffffff8])) [8 aux+0 S8 A64])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 87 86 88 11 (set (reg:DI 124 [ _76 ])
        (reg/f:DI 100 [ _39 ])) "queryTAD.c":115:26 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 100 [ _39 ])
        (nil)))
(insn 88 87 89 11 (parallel [
            (set (reg:DI 125 [ _77 ])
                (lshiftrt:DI (reg:DI 124 [ _76 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:26 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 89 88 90 11 (parallel [
            (set (reg:DI 126 [ _78 ])
                (plus:DI (reg:DI 125 [ _77 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:26 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 125 [ _77 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 90 89 91 11 (set (reg/f:DI 127 [ _79 ])
        (reg:DI 126 [ _78 ])) "queryTAD.c":115:26 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 126 [ _78 ])
        (nil)))
(insn 91 90 92 11 (set (reg:QI 128 [ _80 ])
        (mem:QI (reg/f:DI 127 [ _79 ]) [10 *_79+0 S1 A8])) "queryTAD.c":115:26 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 127 [ _79 ])
        (nil)))
(insn 92 91 93 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 128 [ _80 ])
            (const_int 0 [0]))) "queryTAD.c":115:26 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 128 [ _80 ])
        (nil)))
(jump_insn 93 92 94 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 98)
            (pc))) "queryTAD.c":115:26 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 98)
;;  succ:       13 [100.0% (guessed)] 
;;              12 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 124

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 [0.0% (guessed)]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 124
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 124
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 94 93 95 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 12 (set (reg:DI 5 di)
        (reg:DI 124 [ _76 ])) "queryTAD.c":115:26 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 124 [ _76 ])
        (nil)))
(call_insn 96 95 97 12 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":115:26 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 97 96 98)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       11 [100.0% (guessed)] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88
;; lr  def 	 17 [flags] 89 90 101 129 130 131 132 133 178 179 180 181
(code_label 98 97 99 13 80 (nil) [1 uses])
(note 99 98 100 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 13 (set (reg/f:DI 178)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 aux+0 S8 A64])) "queryTAD.c":115:26 66 {*movdi_internal}
     (nil))
(insn 101 100 102 13 (set (mem:DI (plus:DI (reg/f:DI 178)
                (const_int 8 [0x8])) [2 aux_28->pedestrians+0 S8 A64])
        (reg:DI 88 [ _7 ])) "queryTAD.c":115:26 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 178)
        (expr_list:REG_DEAD (reg:DI 88 [ _7 ])
            (nil))))
(insn 102 101 103 13 (set (reg:SI 179)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -20 [0xffffffffffffffec])) [13 i+0 S4 A32])) "queryTAD.c":116:23 67 {*movsi_internal}
     (nil))
(insn 103 102 104 13 (set (reg:DI 89 [ _8 ])
        (sign_extend:DI (reg:SI 179))) "queryTAD.c":116:23 128 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 179)
        (nil)))
(insn 104 103 105 13 (set (reg/f:DI 180)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":116:23 66 {*movdi_internal}
     (nil))
(insn 105 104 106 13 (set (reg/f:DI 90 [ _9 ])
        (mem/f:DI (plus:DI (reg/f:DI 180)
                (const_int 24 [0x18])) [7 q_22(D)->sensorsID+0 S8 A64])) "queryTAD.c":116:23 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 180)
        (nil)))
(insn 106 105 107 13 (set (reg/f:DI 181)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":116:23 66 {*movdi_internal}
     (nil))
(insn 107 106 108 13 (parallel [
            (set (reg/f:DI 101 [ _40 ])
                (plus:DI (reg/f:DI 181)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":116:23 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 181)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])
                    (const_int 32 [0x20]))
                (nil)))))
(insn 108 107 109 13 (set (reg:DI 129 [ _81 ])
        (reg/f:DI 101 [ _40 ])) "queryTAD.c":116:23 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 101 [ _40 ])
        (nil)))
(insn 109 108 110 13 (parallel [
            (set (reg:DI 130 [ _82 ])
                (lshiftrt:DI (reg:DI 129 [ _81 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":116:23 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 110 109 111 13 (parallel [
            (set (reg:DI 131 [ _83 ])
                (plus:DI (reg:DI 130 [ _82 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":116:23 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 130 [ _82 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 111 110 112 13 (set (reg/f:DI 132 [ _84 ])
        (reg:DI 131 [ _83 ])) "queryTAD.c":116:23 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 131 [ _83 ])
        (nil)))
(insn 112 111 113 13 (set (reg:QI 133 [ _85 ])
        (mem:QI (reg/f:DI 132 [ _84 ]) [10 *_84+0 S1 A8])) "queryTAD.c":116:23 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 132 [ _84 ])
        (nil)))
(insn 113 112 114 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 133 [ _85 ])
            (const_int 0 [0]))) "queryTAD.c":116:23 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 133 [ _85 ])
        (nil)))
(jump_insn 114 113 115 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 119)
            (pc))) "queryTAD.c":116:23 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 119)
;;  succ:       15 [100.0% (guessed)] 
;;              14 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89 90 129

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 [0.0% (guessed)]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 115 114 116 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 14 (set (reg:DI 5 di)
        (reg:DI 129 [ _81 ])) "queryTAD.c":116:23 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 129 [ _81 ])
        (nil)))
(call_insn 117 116 118 14 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":116:23 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 118 117 119)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       13 [100.0% (guessed)] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89 90
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89 90
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 91 92 102 134 135 136 137 138 182 183 184
(code_label 119 118 120 15 81 (nil) [1 uses])
(note 120 119 121 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 15 (set (reg/f:DI 182)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":116:23 66 {*movdi_internal}
     (nil))
(insn 122 121 123 15 (set (reg/f:DI 91 [ _10 ])
        (mem/f:DI (plus:DI (reg/f:DI 182)
                (const_int 32 [0x20])) [8 q_22(D)->sensorsP+0 S8 A64])) "queryTAD.c":116:23 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 182)
        (nil)))
(insn 123 122 124 15 (set (reg:DI 183)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 aux+0 S8 A64])) "queryTAD.c":116:23 66 {*movdi_internal}
     (nil))
(insn 124 123 125 15 (set (reg:DI 2 cx)
        (reg:DI 89 [ _8 ])) "queryTAD.c":116:23 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 89 [ _8 ])
        (nil)))
(insn 125 124 126 15 (set (reg:DI 1 dx)
        (reg/f:DI 90 [ _9 ])) "queryTAD.c":116:23 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90 [ _9 ])
        (nil)))
(insn 126 125 127 15 (set (reg:DI 4 si)
        (reg:DI 183)) "queryTAD.c":116:23 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 183)
        (nil)))
(insn 127 126 128 15 (set (reg:DI 5 di)
        (reg/f:DI 91 [ _10 ])) "queryTAD.c":116:23 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91 [ _10 ])
        (nil)))
(call_insn 128 127 129 15 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("makeSenLRec") [flags 0x3]  <function_decl 0x7fc58ebf9e00 makeSenLRec>) [0 makeSenLRec S1 A8])
            (const_int 0 [0]))) "queryTAD.c":116:23 677 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 129 128 130 15 (set (reg/f:DI 92 [ _11 ])
        (reg:DI 0 ax)) "queryTAD.c":116:23 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 130 129 131 15 (set (reg/f:DI 184)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":116:21 66 {*movdi_internal}
     (nil))
(insn 131 130 132 15 (parallel [
            (set (reg/f:DI 102 [ _41 ])
                (plus:DI (reg/f:DI 184)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":116:21 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 184)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])
                    (const_int 32 [0x20]))
                (nil)))))
(insn 132 131 133 15 (set (reg:DI 134 [ _86 ])
        (reg/f:DI 102 [ _41 ])) "queryTAD.c":116:21 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 102 [ _41 ])
        (nil)))
(insn 133 132 134 15 (parallel [
            (set (reg:DI 135 [ _87 ])
                (lshiftrt:DI (reg:DI 134 [ _86 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":116:21 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 134 133 135 15 (parallel [
            (set (reg:DI 136 [ _88 ])
                (plus:DI (reg:DI 135 [ _87 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":116:21 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 135 [ _87 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 135 134 136 15 (set (reg/f:DI 137 [ _89 ])
        (reg:DI 136 [ _88 ])) "queryTAD.c":116:21 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 136 [ _88 ])
        (nil)))
(insn 136 135 137 15 (set (reg:QI 138 [ _90 ])
        (mem:QI (reg/f:DI 137 [ _89 ]) [10 *_89+0 S1 A8])) "queryTAD.c":116:21 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 137 [ _89 ])
        (nil)))
(insn 137 136 138 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 138 [ _90 ])
            (const_int 0 [0]))) "queryTAD.c":116:21 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 138 [ _90 ])
        (nil)))
(jump_insn 138 137 139 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 143)
            (pc))) "queryTAD.c":116:21 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 143)
;;  succ:       17 [100.0% (guessed)] 
;;              16 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 92 134

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 [0.0% (guessed)]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 134
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 134
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 139 138 140 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 141 16 (set (reg:DI 5 di)
        (reg:DI 134 [ _86 ])) "queryTAD.c":116:21 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 134 [ _86 ])
        (nil)))
(call_insn 141 140 142 16 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":116:21 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 142 141 143)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       15 [100.0% (guessed)] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 92
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 92
;; lr  def 	 17 [flags] 185
(code_label 143 142 144 17 82 (nil) [1 uses])
(note 144 143 145 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 145 144 146 17 (set (reg/f:DI 185)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":116:21 66 {*movdi_internal}
     (nil))
(insn 146 145 147 17 (set (mem/f:DI (plus:DI (reg/f:DI 185)
                (const_int 32 [0x20])) [8 q_22(D)->sensorsP+0 S8 A64])
        (reg/f:DI 92 [ _11 ])) "queryTAD.c":116:21 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 185)
        (expr_list:REG_DEAD (reg/f:DI 92 [ _11 ])
            (nil))))
(insn 147 146 148 17 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -20 [0xffffffffffffffec])) [13 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -20 [0xffffffffffffffec])) [13 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":108:30 190 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       18 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       17 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 148 147 149 18 75 (nil) [1 uses])
(note 149 148 153 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 153 149 154 18 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -20 [0xffffffffffffffec])) [13 i+0 S4 A32])
            (const_int 85 [0x55]))) "queryTAD.c":108:5 11 {*cmpsi_1}
     (nil))
(jump_insn 154 153 155 18 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 150)
            (pc))) "queryTAD.c":108:5 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 150)
;;  succ:       3
;;              19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 103 139 140 141 142 143 186
(note 155 154 156 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 156 155 157 19 (set (reg/f:DI 186)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":118:14 66 {*movdi_internal}
     (nil))
(insn 157 156 158 19 (parallel [
            (set (reg/f:DI 103 [ _42 ])
                (plus:DI (reg/f:DI 186)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":118:14 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 186)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])
                    (const_int 32 [0x20]))
                (nil)))))
(insn 158 157 159 19 (set (reg:DI 139 [ _91 ])
        (reg/f:DI 103 [ _42 ])) "queryTAD.c":118:14 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 103 [ _42 ])
        (nil)))
(insn 159 158 160 19 (parallel [
            (set (reg:DI 140 [ _92 ])
                (lshiftrt:DI (reg:DI 139 [ _91 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":118:14 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 160 159 161 19 (parallel [
            (set (reg:DI 141 [ _93 ])
                (plus:DI (reg:DI 140 [ _92 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":118:14 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 140 [ _92 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 161 160 162 19 (set (reg/f:DI 142 [ _94 ])
        (reg:DI 141 [ _93 ])) "queryTAD.c":118:14 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 141 [ _93 ])
        (nil)))
(insn 162 161 163 19 (set (reg:QI 143 [ _95 ])
        (mem:QI (reg/f:DI 142 [ _94 ]) [10 *_94+0 S1 A8])) "queryTAD.c":118:14 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 142 [ _94 ])
        (nil)))
(insn 163 162 164 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 143 [ _95 ])
            (const_int 0 [0]))) "queryTAD.c":118:14 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 143 [ _95 ])
        (nil)))
(jump_insn 164 163 165 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 169)
            (pc))) "queryTAD.c":118:14 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 169)
;;  succ:       21 [100.0% (guessed)] 
;;              20 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       19 [0.0% (guessed)]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 165 164 166 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 166 165 167 20 (set (reg:DI 5 di)
        (reg:DI 139 [ _91 ])) "queryTAD.c":118:14 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 139 [ _91 ])
        (nil)))
(call_insn 167 166 168 20 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":118:14 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 168 167 169)
;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL)
;;  pred:       19 [100.0% (guessed)] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 187 188
(code_label 169 168 170 21 84 (nil) [1 uses])
(note 170 169 171 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 171 170 172 21 (set (reg/f:DI 187)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":118:14 66 {*movdi_internal}
     (nil))
(insn 172 171 173 21 (set (reg/f:DI 188)
        (mem/f:DI (plus:DI (reg/f:DI 187)
                (const_int 32 [0x20])) [8 q_22(D)->sensorsP+0 S8 A64])) "queryTAD.c":118:14 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 187)
        (nil)))
(insn 173 172 277 21 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])
        (reg/f:DI 188)) "queryTAD.c":118:14 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 188)
        (nil)))
(jump_insn 277 173 278 21 (set (pc)
        (label_ref 267)) "queryTAD.c":119:10 660 {jump}
     (nil)
 -> 267)
;;  succ:       33 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 278 277 269)
;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL)
;;  pred:       33
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 104 144 145 146 147 148 189
(code_label 269 278 176 22 91 (nil) [1 uses])
(note 176 269 177 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 177 176 178 22 (set (reg/f:DI 189)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":120:29 66 {*movdi_internal}
     (nil))
(insn 178 177 179 22 (parallel [
            (set (reg/f:DI 104 [ _43 ])
                (plus:DI (reg/f:DI 189)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":120:29 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 189)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])
                    (const_int 32 [0x20]))
                (nil)))))
(insn 179 178 180 22 (set (reg:DI 144 [ _96 ])
        (reg/f:DI 104 [ _43 ])) "queryTAD.c":120:29 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 104 [ _43 ])
        (nil)))
(insn 180 179 181 22 (parallel [
            (set (reg:DI 145 [ _97 ])
                (lshiftrt:DI (reg:DI 144 [ _96 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":120:29 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 181 180 182 22 (parallel [
            (set (reg:DI 146 [ _98 ])
                (plus:DI (reg:DI 145 [ _97 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":120:29 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 145 [ _97 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 182 181 183 22 (set (reg/f:DI 147 [ _99 ])
        (reg:DI 146 [ _98 ])) "queryTAD.c":120:29 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 146 [ _98 ])
        (nil)))
(insn 183 182 184 22 (set (reg:QI 148 [ _100 ])
        (mem:QI (reg/f:DI 147 [ _99 ]) [10 *_99+0 S1 A8])) "queryTAD.c":120:29 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 147 [ _99 ])
        (nil)))
(insn 184 183 185 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 148 [ _100 ])
            (const_int 0 [0]))) "queryTAD.c":120:29 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 148 [ _100 ])
        (nil)))
(jump_insn 185 184 186 22 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 190)
            (pc))) "queryTAD.c":120:29 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 190)
;;  succ:       24 [100.0% (guessed)] 
;;              23 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 144

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL)
;;  pred:       22 [0.0% (guessed)]  (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 144
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 144
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 186 185 187 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 187 186 188 23 (set (reg:DI 5 di)
        (reg:DI 144 [ _96 ])) "queryTAD.c":120:29 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 144 [ _96 ])
        (nil)))
(call_insn 188 187 189 23 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":120:29 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 189 188 190)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL)
;;  pred:       22 [100.0% (guessed)] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 93 105 149 150 151 152 153 190
(code_label 190 189 191 24 86 (nil) [1 uses])
(note 191 190 192 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 24 (set (reg/f:DI 190)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":120:29 66 {*movdi_internal}
     (nil))
(insn 193 192 194 24 (set (reg/f:DI 93 [ _12 ])
        (mem/f:DI (plus:DI (reg/f:DI 190)
                (const_int 32 [0x20])) [8 q_22(D)->sensorsP+0 S8 A64])) "queryTAD.c":120:29 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 190)
        (nil)))
(insn 194 193 195 24 (set (reg/f:DI 105 [ _44 ])
        (reg/f:DI 93 [ _12 ])) "queryTAD.c":120:9 66 {*movdi_internal}
     (nil))
(insn 195 194 196 24 (set (reg:DI 149 [ _101 ])
        (reg/f:DI 105 [ _44 ])) "queryTAD.c":120:9 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 105 [ _44 ])
        (nil)))
(insn 196 195 197 24 (parallel [
            (set (reg:DI 150 [ _102 ])
                (lshiftrt:DI (reg:DI 149 [ _101 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":120:9 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 197 196 198 24 (parallel [
            (set (reg:DI 151 [ _103 ])
                (plus:DI (reg:DI 150 [ _102 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":120:9 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 150 [ _102 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 198 197 199 24 (set (reg/f:DI 152 [ _104 ])
        (reg:DI 151 [ _103 ])) "queryTAD.c":120:9 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 151 [ _103 ])
        (nil)))
(insn 199 198 200 24 (set (reg:QI 153 [ _105 ])
        (mem:QI (reg/f:DI 152 [ _104 ]) [10 *_104+0 S1 A8])) "queryTAD.c":120:9 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 152 [ _104 ])
        (nil)))
(insn 200 199 201 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 153 [ _105 ])
            (const_int 0 [0]))) "queryTAD.c":120:9 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 153 [ _105 ])
        (nil)))
(jump_insn 201 200 202 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) "queryTAD.c":120:9 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 206)
;;  succ:       26 [100.0% (guessed)] 
;;              25 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 93 149

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL)
;;  pred:       24 [0.0% (guessed)]  (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 149
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 149
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 202 201 203 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 203 202 204 25 (set (reg:DI 5 di)
        (reg:DI 149 [ _101 ])) "queryTAD.c":120:9 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 149 [ _101 ])
        (nil)))
(call_insn 204 203 205 25 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":120:9 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 205 204 206)
;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL)
;;  pred:       24 [100.0% (guessed)] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 93
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 94 106 154 155 156 157 158 191
(code_label 206 205 207 26 87 (nil) [1 uses])
(note 207 206 208 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 208 207 209 26 (set (reg:DI 94 [ _13 ])
        (mem:DI (reg/f:DI 93 [ _12 ]) [2 _12->ID+0 S8 A64])) "queryTAD.c":120:9 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93 [ _12 ])
        (nil)))
(insn 209 208 210 26 (set (reg:DI 4 si)
        (reg:DI 94 [ _13 ])) "queryTAD.c":120:9 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 94 [ _13 ])
        (nil)))
(insn 210 209 211 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7fc58ecb7f30 *.LC14>)) "queryTAD.c":120:9 66 {*movdi_internal}
     (nil))
(insn 211 210 212 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "queryTAD.c":120:9 69 {*movqi_internal}
     (nil))
(call_insn 212 211 213 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fc58ee67000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "queryTAD.c":120:9 677 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 213 212 214 26 (set (reg/f:DI 191)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":121:31 66 {*movdi_internal}
     (nil))
(insn 214 213 215 26 (parallel [
            (set (reg/f:DI 106 [ _45 ])
                (plus:DI (reg/f:DI 191)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":121:31 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 191)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])
                    (const_int 32 [0x20]))
                (nil)))))
(insn 215 214 216 26 (set (reg:DI 154 [ _106 ])
        (reg/f:DI 106 [ _45 ])) "queryTAD.c":121:31 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 106 [ _45 ])
        (nil)))
(insn 216 215 217 26 (parallel [
            (set (reg:DI 155 [ _107 ])
                (lshiftrt:DI (reg:DI 154 [ _106 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":121:31 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 217 216 218 26 (parallel [
            (set (reg:DI 156 [ _108 ])
                (plus:DI (reg:DI 155 [ _107 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":121:31 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 155 [ _107 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 218 217 219 26 (set (reg/f:DI 157 [ _109 ])
        (reg:DI 156 [ _108 ])) "queryTAD.c":121:31 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 156 [ _108 ])
        (nil)))
(insn 219 218 220 26 (set (reg:QI 158 [ _110 ])
        (mem:QI (reg/f:DI 157 [ _109 ]) [10 *_109+0 S1 A8])) "queryTAD.c":121:31 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 157 [ _109 ])
        (nil)))
(insn 220 219 221 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 158 [ _110 ])
            (const_int 0 [0]))) "queryTAD.c":121:31 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 158 [ _110 ])
        (nil)))
(jump_insn 221 220 222 26 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 226)
            (pc))) "queryTAD.c":121:31 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 226)
;;  succ:       28 [100.0% (guessed)] 
;;              27 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 154

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL)
;;  pred:       26 [0.0% (guessed)]  (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 154
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 154
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 222 221 223 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 223 222 224 27 (set (reg:DI 5 di)
        (reg:DI 154 [ _106 ])) "queryTAD.c":121:31 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 154 [ _106 ])
        (nil)))
(call_insn 224 223 225 27 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":121:31 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 225 224 226)
;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL)
;;  pred:       26 [100.0% (guessed)] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 95 107 159 160 161 162 163 192
(code_label 226 225 227 28 88 (nil) [1 uses])
(note 227 226 228 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 228 227 229 28 (set (reg/f:DI 192)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":121:31 66 {*movdi_internal}
     (nil))
(insn 229 228 230 28 (set (reg/f:DI 95 [ _14 ])
        (mem/f:DI (plus:DI (reg/f:DI 192)
                (const_int 32 [0x20])) [8 q_22(D)->sensorsP+0 S8 A64])) "queryTAD.c":121:31 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 192)
        (nil)))
(insn 230 229 231 28 (parallel [
            (set (reg/f:DI 107 [ _46 ])
                (plus:DI (reg/f:DI 95 [ _14 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":121:9 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 231 230 232 28 (set (reg:DI 159 [ _111 ])
        (reg/f:DI 107 [ _46 ])) "queryTAD.c":121:9 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 107 [ _46 ])
        (nil)))
(insn 232 231 233 28 (parallel [
            (set (reg:DI 160 [ _112 ])
                (lshiftrt:DI (reg:DI 159 [ _111 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":121:9 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 233 232 234 28 (parallel [
            (set (reg:DI 161 [ _113 ])
                (plus:DI (reg:DI 160 [ _112 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":121:9 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 160 [ _112 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 234 233 235 28 (set (reg/f:DI 162 [ _114 ])
        (reg:DI 161 [ _113 ])) "queryTAD.c":121:9 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 161 [ _113 ])
        (nil)))
(insn 235 234 236 28 (set (reg:QI 163 [ _115 ])
        (mem:QI (reg/f:DI 162 [ _114 ]) [10 *_114+0 S1 A8])) "queryTAD.c":121:9 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 162 [ _114 ])
        (nil)))
(insn 236 235 237 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 163 [ _115 ])
            (const_int 0 [0]))) "queryTAD.c":121:9 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 163 [ _115 ])
        (nil)))
(jump_insn 237 236 238 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 242)
            (pc))) "queryTAD.c":121:9 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 242)
;;  succ:       30 [100.0% (guessed)] 
;;              29 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 95 159

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL)
;;  pred:       28 [0.0% (guessed)]  (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 159
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 159
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 238 237 239 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 239 238 240 29 (set (reg:DI 5 di)
        (reg:DI 159 [ _111 ])) "queryTAD.c":121:9 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 159 [ _111 ])
        (nil)))
(call_insn 240 239 241 29 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":121:9 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 241 240 242)
;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL)
;;  pred:       28 [100.0% (guessed)] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 95
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 95
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 96 108 164 165 166 167 168 193
(code_label 242 241 243 30 89 (nil) [1 uses])
(note 243 242 244 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 244 243 245 30 (set (reg:DI 96 [ _15 ])
        (mem:DI (plus:DI (reg/f:DI 95 [ _14 ])
                (const_int 8 [0x8])) [2 _14->pedestrians+0 S8 A64])) "queryTAD.c":121:9 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95 [ _14 ])
        (nil)))
(insn 245 244 246 30 (set (reg:DI 4 si)
        (reg:DI 96 [ _15 ])) "queryTAD.c":121:9 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 96 [ _15 ])
        (nil)))
(insn 246 245 247 30 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7fc58ecc7000 *.LC15>)) "queryTAD.c":121:9 66 {*movdi_internal}
     (nil))
(insn 247 246 248 30 (set (reg:QI 0 ax)
        (const_int 0 [0])) "queryTAD.c":121:9 69 {*movqi_internal}
     (nil))
(call_insn 248 247 249 30 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fc58ee67000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "queryTAD.c":121:9 677 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 249 248 250 30 (set (reg/f:DI 193)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])) "queryTAD.c":122:13 66 {*movdi_internal}
     (nil))
(insn 250 249 251 30 (parallel [
            (set (reg/f:DI 108 [ _47 ])
                (plus:DI (reg/f:DI 193)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":122:13 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 193)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])
                    (const_int 16 [0x10]))
                (nil)))))
(insn 251 250 252 30 (set (reg:DI 164 [ _116 ])
        (reg/f:DI 108 [ _47 ])) "queryTAD.c":122:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 108 [ _47 ])
        (nil)))
(insn 252 251 253 30 (parallel [
            (set (reg:DI 165 [ _117 ])
                (lshiftrt:DI (reg:DI 164 [ _116 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":122:13 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 253 252 254 30 (parallel [
            (set (reg:DI 166 [ _118 ])
                (plus:DI (reg:DI 165 [ _117 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":122:13 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 165 [ _117 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 254 253 255 30 (set (reg/f:DI 167 [ _119 ])
        (reg:DI 166 [ _118 ])) "queryTAD.c":122:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 166 [ _118 ])
        (nil)))
(insn 255 254 256 30 (set (reg:QI 168 [ _120 ])
        (mem:QI (reg/f:DI 167 [ _119 ]) [10 *_119+0 S1 A8])) "queryTAD.c":122:13 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 167 [ _119 ])
        (nil)))
(insn 256 255 257 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 168 [ _120 ])
            (const_int 0 [0]))) "queryTAD.c":122:13 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 168 [ _120 ])
        (nil)))
(jump_insn 257 256 258 30 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 262)
            (pc))) "queryTAD.c":122:13 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 262)
;;  succ:       32 [100.0% (guessed)] 
;;              31 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL)
;;  pred:       30 [0.0% (guessed)]  (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 258 257 259 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 259 258 260 31 (set (reg:DI 5 di)
        (reg:DI 164 [ _116 ])) "queryTAD.c":122:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 164 [ _116 ])
        (nil)))
(call_insn 260 259 261 31 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":122:13 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 261 260 262)
;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL)
;;  pred:       30 [100.0% (guessed)] 
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 194 195
(code_label 262 261 263 32 90 (nil) [1 uses])
(note 263 262 264 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 264 263 265 32 (set (reg/f:DI 194)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])) "queryTAD.c":122:13 66 {*movdi_internal}
     (nil))
(insn 265 264 266 32 (set (reg/f:DI 195)
        (mem/f:DI (plus:DI (reg/f:DI 194)
                (const_int 16 [0x10])) [8 aux_17->tail+0 S8 A64])) "queryTAD.c":122:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 194)
        (nil)))
(insn 266 265 267 32 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])
        (reg/f:DI 195)) "queryTAD.c":122:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 195)
        (nil)))
;;  succ:       33 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 35, flags: (RTL)
;;  pred:       32 (FALLTHRU,DFS_BACK)
;;              21 [always] 
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 267 266 268 33 85 (nil) [1 uses])
(note 268 267 270 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 270 268 271 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])
            (const_int 0 [0]))) "queryTAD.c":119:10 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 271 270 279 33 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 269)
            (pc))) "queryTAD.c":119:10 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 269)
;;  succ:       22
;;              35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 35, loop depth 0, maybe hot
;;  prev block 33, next block 34, flags: (RTL)
;;  pred:       33 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 279 271 280 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 280 279 272 35 (const_int 0 [0]) "queryTAD.c":124:1 696 {nop}
     (nil))
;;  succ:       34 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 34, loop depth 0, maybe hot
;;  prev block 35, next block 36, flags: (RTL)
;;  pred:       35 [always]  (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 272 280 281 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
;;  succ:       36 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 36, loop depth 0, maybe hot
;;  prev block 34, next block 1, flags: (RTL)
;;  pred:       34 [always]  (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 281 272 282 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 282 281 0 36 (const_int 0 [0]) "queryTAD.c":124:1 696 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function freeRecYears (freeRecYears, funcdef_no=9, decl_uid=3462, cgraph_uid=10, symbol_order=9)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 8 count 8 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 7 6
;; 2 succs { 7 3 }
;; 3 succs { 5 4 }
;; 4 succs { }
;; 5 succs { 6 }
;; 7 succs { 6 }
;; 6 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 34.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r91: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r91,l0) best DIREG, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r84,l0) best DIREG, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r82,l0) best DIREG, allocno GENERAL_REGS

  a0(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r82,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a2(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r84,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a4(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a5(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a6(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a7(r85,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a8(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a9(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000

   Insn 43(l0): point = 1
   Insn 39(l0): point = 4
   Insn 34(l0): point = 6
   Insn 33(l0): point = 8
   Insn 32(l0): point = 10
   Insn 31(l0): point = 12
   Insn 30(l0): point = 14
   Insn 29(l0): point = 16
   Insn 28(l0): point = 18
   Insn 24(l0): point = 21
   Insn 23(l0): point = 23
   Insn 21(l0): point = 26
   Insn 20(l0): point = 28
   Insn 19(l0): point = 30
   Insn 18(l0): point = 32
   Insn 17(l0): point = 34
   Insn 16(l0): point = 36
   Insn 15(l0): point = 38
   Insn 14(l0): point = 40
   Insn 13(l0): point = 42
   Insn 7(l0): point = 45
   Insn 6(l0): point = 47
   Insn 2(l0): point = 49
 a0(r91): [9..10]
 a1(r82): [15..16]
 a2(r90): [17..18]
 a3(r84): [24..38]
 a4(r88): [29..30]
 a5(r87): [31..32]
 a6(r86): [33..34]
 a7(r85): [35..36]
 a8(r83): [39..40]
 a9(r89): [41..42]
Compressing live ranges: from 52 to 18 - 34%
Ranges after the compression:
 a0(r91): [0..1]
 a1(r82): [2..3]
 a2(r90): [4..5]
 a3(r84): [6..13]
 a4(r88): [6..7]
 a5(r87): [8..9]
 a6(r86): [10..11]
 a7(r85): [12..13]
 a8(r83): [14..15]
 a9(r89): [16..17]
  pref0:a0(r91)<-hr5@1500
  pref1:a3(r84)<-hr5@1500
  pref2:a1(r82)<-hr5@1500
  regions=1, blocks=8, points=18
    allocnos=10 (big 0), copies=0, conflicts=0, ranges=10
Disposition:
    1:r82  l0     0    8:r83  l0     0    3:r84  l0     0    7:r85  l0     1
    6:r86  l0     1    5:r87  l0     1    4:r88  l0     1    9:r89  l0     0
    2:r90  l0     0    0:r91  l0     0
+++Costs: overall 1000, reg 1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


freeRecYears

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={4d} r1={4d} r2={4d} r4={4d} r5={7d,4u} r6={1d,7u} r7={1d,10u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,6u} r17={8d,2u} r18={3d} r19={1d,12u,1e} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={4d} r37={4d} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r82={1d,1u} r83={1d,1u} r84={1d,2u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} 
;;    total ref usage 291{238d,52u,1e} in 23{20 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])
        (reg:DI 5 di [ years ])) "queryTAD.c":126:40 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ years ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])
            (const_int 0 [0]))) "queryTAD.c":127:7 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 42)
            (pc))) "queryTAD.c":127:7 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 42)
;;  succ:       7
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 83 84 85 86 87 88 89
(note 12 7 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "queryTAD.c":130:23 66 {*movdi_internal}
     (nil))
(insn 14 13 15 3 (parallel [
            (set (reg/f:DI 83 [ _7 ])
                (plus:DI (reg/f:DI 89)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":130:23 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 89)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])
                    (const_int 32 [0x20]))
                (nil)))))
(insn 15 14 16 3 (set (reg:DI 84 [ _9 ])
        (reg/f:DI 83 [ _7 ])) "queryTAD.c":130:23 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 83 [ _7 ])
        (nil)))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 85 [ _10 ])
                (lshiftrt:DI (reg:DI 84 [ _9 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":130:23 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 86 [ _11 ])
                (plus:DI (reg:DI 85 [ _10 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":130:23 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 85 [ _10 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 18 17 19 3 (set (reg/f:DI 87 [ _12 ])
        (reg:DI 86 [ _11 ])) "queryTAD.c":130:23 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 86 [ _11 ])
        (nil)))
(insn 19 18 20 3 (set (reg:QI 88 [ _13 ])
        (mem:QI (reg/f:DI 87 [ _12 ]) [10 *_12+0 S1 A8])) "queryTAD.c":130:23 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ _12 ])
        (nil)))
(insn 20 19 21 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 88 [ _13 ])
            (const_int 0 [0]))) "queryTAD.c":130:23 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 88 [ _13 ])
        (nil)))
(jump_insn 21 20 22 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) "queryTAD.c":130:23 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 26)
;;  succ:       5 [100.0% (guessed)] 
;;              4 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [0.0% (guessed)]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (reg:DI 5 di)
        (reg:DI 84 [ _9 ])) "queryTAD.c":130:23 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 84 [ _9 ])
        (nil)))
(call_insn 24 23 25 4 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":130:23 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 25 24 26)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 7, flags: (RTL)
;;  pred:       3 [100.0% (guessed)] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 82 90 91
(code_label 26 25 27 5 95 (nil) [1 uses])
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "queryTAD.c":130:23 66 {*movdi_internal}
     (nil))
(insn 29 28 30 5 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 90)
                (const_int 32 [0x20])) [6 years_3(D)->tail+0 S8 A64])) "queryTAD.c":130:23 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90)
        (nil)))
(insn 30 29 31 5 (set (reg:DI 5 di)
        (reg/f:DI 82 [ _1 ])) "queryTAD.c":130:5 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 82 [ _1 ])
        (nil)))
(call_insn 31 30 32 5 (call (mem:QI (symbol_ref:DI ("freeRecYears") [flags 0x3]  <function_decl 0x7fc58ec06200 freeRecYears>) [0 freeRecYears S1 A8])
        (const_int 0 [0])) "queryTAD.c":130:5 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 32 31 33 5 (set (reg:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "queryTAD.c":131:5 66 {*movdi_internal}
     (nil))
(insn 33 32 34 5 (set (reg:DI 5 di)
        (reg:DI 91)) "queryTAD.c":131:5 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 91)
        (nil)))
(call_insn 34 33 39 5 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fc58ee7d600 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "queryTAD.c":131:5 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 39 34 40 5 (set (pc)
        (label_ref 37)) 660 {jump}
     (nil)
 -> 37)
;;  succ:       6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 40 39 42)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 5, next block 6, flags: (RTL)
;;  pred:       2
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 42 40 41 7 96 (nil) [1 uses])
(note 41 42 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 43 41 37 7 (const_int 0 [0]) "queryTAD.c":128:9 696 {nop}
     (nil))
;;  succ:       6 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL)
;;  pred:       7 [always]  (FALLTHRU)
;;              5
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 37 43 38 6 92 (nil) [1 uses])
(note 38 37 0 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function freeRecSen (freeRecSen, funcdef_no=10, decl_uid=3465, cgraph_uid=11, symbol_order=10)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 8 count 8 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 7 6
;; 2 succs { 7 3 }
;; 3 succs { 5 4 }
;; 4 succs { }
;; 5 succs { 6 }
;; 7 succs { 6 }
;; 6 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 34.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r91: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r91,l0) best DIREG, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r84,l0) best DIREG, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r82,l0) best DIREG, allocno GENERAL_REGS

  a0(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r82,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a2(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r84,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a4(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a5(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a6(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a7(r85,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a8(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a9(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000

   Insn 43(l0): point = 1
   Insn 39(l0): point = 4
   Insn 34(l0): point = 6
   Insn 33(l0): point = 8
   Insn 32(l0): point = 10
   Insn 31(l0): point = 12
   Insn 30(l0): point = 14
   Insn 29(l0): point = 16
   Insn 28(l0): point = 18
   Insn 24(l0): point = 21
   Insn 23(l0): point = 23
   Insn 21(l0): point = 26
   Insn 20(l0): point = 28
   Insn 19(l0): point = 30
   Insn 18(l0): point = 32
   Insn 17(l0): point = 34
   Insn 16(l0): point = 36
   Insn 15(l0): point = 38
   Insn 14(l0): point = 40
   Insn 13(l0): point = 42
   Insn 7(l0): point = 45
   Insn 6(l0): point = 47
   Insn 2(l0): point = 49
 a0(r91): [9..10]
 a1(r82): [15..16]
 a2(r90): [17..18]
 a3(r84): [24..38]
 a4(r88): [29..30]
 a5(r87): [31..32]
 a6(r86): [33..34]
 a7(r85): [35..36]
 a8(r83): [39..40]
 a9(r89): [41..42]
Compressing live ranges: from 52 to 18 - 34%
Ranges after the compression:
 a0(r91): [0..1]
 a1(r82): [2..3]
 a2(r90): [4..5]
 a3(r84): [6..13]
 a4(r88): [6..7]
 a5(r87): [8..9]
 a6(r86): [10..11]
 a7(r85): [12..13]
 a8(r83): [14..15]
 a9(r89): [16..17]
  pref0:a0(r91)<-hr5@1500
  pref1:a3(r84)<-hr5@1500
  pref2:a1(r82)<-hr5@1500
  regions=1, blocks=8, points=18
    allocnos=10 (big 0), copies=0, conflicts=0, ranges=10
Disposition:
    1:r82  l0     0    8:r83  l0     0    3:r84  l0     0    7:r85  l0     1
    6:r86  l0     1    5:r87  l0     1    4:r88  l0     1    9:r89  l0     0
    2:r90  l0     0    0:r91  l0     0
+++Costs: overall 1000, reg 1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


freeRecSen

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={4d} r1={4d} r2={4d} r4={4d} r5={7d,4u} r6={1d,7u} r7={1d,10u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,6u} r17={8d,2u} r18={3d} r19={1d,12u,1e} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={4d} r37={4d} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r82={1d,1u} r83={1d,1u} r84={1d,2u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} 
;;    total ref usage 291{238d,52u,1e} in 23{20 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])
        (reg:DI 5 di [ l ])) "queryTAD.c":133:35 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ l ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])
            (const_int 0 [0]))) "queryTAD.c":134:7 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 42)
            (pc))) "queryTAD.c":134:7 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 42)
;;  succ:       7
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 83 84 85 86 87 88 89
(note 12 7 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":137:17 66 {*movdi_internal}
     (nil))
(insn 14 13 15 3 (parallel [
            (set (reg/f:DI 83 [ _7 ])
                (plus:DI (reg/f:DI 89)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":137:17 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 89)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])
                    (const_int 16 [0x10]))
                (nil)))))
(insn 15 14 16 3 (set (reg:DI 84 [ _9 ])
        (reg/f:DI 83 [ _7 ])) "queryTAD.c":137:17 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 83 [ _7 ])
        (nil)))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 85 [ _10 ])
                (lshiftrt:DI (reg:DI 84 [ _9 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":137:17 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 86 [ _11 ])
                (plus:DI (reg:DI 85 [ _10 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":137:17 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 85 [ _10 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 18 17 19 3 (set (reg/f:DI 87 [ _12 ])
        (reg:DI 86 [ _11 ])) "queryTAD.c":137:17 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 86 [ _11 ])
        (nil)))
(insn 19 18 20 3 (set (reg:QI 88 [ _13 ])
        (mem:QI (reg/f:DI 87 [ _12 ]) [10 *_12+0 S1 A8])) "queryTAD.c":137:17 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ _12 ])
        (nil)))
(insn 20 19 21 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 88 [ _13 ])
            (const_int 0 [0]))) "queryTAD.c":137:17 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 88 [ _13 ])
        (nil)))
(jump_insn 21 20 22 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) "queryTAD.c":137:17 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 26)
;;  succ:       5 [100.0% (guessed)] 
;;              4 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [0.0% (guessed)]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (reg:DI 5 di)
        (reg:DI 84 [ _9 ])) "queryTAD.c":137:17 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 84 [ _9 ])
        (nil)))
(call_insn 24 23 25 4 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":137:17 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 25 24 26)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 7, flags: (RTL)
;;  pred:       3 [100.0% (guessed)] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 82 90 91
(code_label 26 25 27 5 100 (nil) [1 uses])
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":137:17 66 {*movdi_internal}
     (nil))
(insn 29 28 30 5 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 90)
                (const_int 16 [0x10])) [8 l_3(D)->tail+0 S8 A64])) "queryTAD.c":137:17 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90)
        (nil)))
(insn 30 29 31 5 (set (reg:DI 5 di)
        (reg/f:DI 82 [ _1 ])) "queryTAD.c":137:5 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 82 [ _1 ])
        (nil)))
(call_insn 31 30 32 5 (call (mem:QI (symbol_ref:DI ("freeRecSen") [flags 0x3]  <function_decl 0x7fc58ec06600 freeRecSen>) [0 freeRecSen S1 A8])
        (const_int 0 [0])) "queryTAD.c":137:5 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 32 31 33 5 (set (reg:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":138:5 66 {*movdi_internal}
     (nil))
(insn 33 32 34 5 (set (reg:DI 5 di)
        (reg:DI 91)) "queryTAD.c":138:5 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 91)
        (nil)))
(call_insn 34 33 39 5 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fc58ee7d600 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "queryTAD.c":138:5 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 39 34 40 5 (set (pc)
        (label_ref 37)) 660 {jump}
     (nil)
 -> 37)
;;  succ:       6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 40 39 42)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 5, next block 6, flags: (RTL)
;;  pred:       2
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 42 40 41 7 101 (nil) [1 uses])
(note 41 42 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 43 41 37 7 (const_int 0 [0]) "queryTAD.c":135:9 696 {nop}
     (nil))
;;  succ:       6 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL)
;;  pred:       7 [always]  (FALLTHRU)
;;              5
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 37 43 38 6 97 (nil) [1 uses])
(note 38 37 0 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function freeQuery (freeQuery, funcdef_no=11, decl_uid=3384, cgraph_uid=12, symbol_order=11)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 17 n_edges 17 count 17 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
;;
;; Loop 1
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7 5 3
;; 2 succs { 8 }
;; 3 succs { 5 4 }
;; 4 succs { }
;; 5 succs { 7 6 }
;; 6 succs { }
;; 7 succs { 8 }
;; 8 succs { 3 9 }
;; 9 succs { 11 10 }
;; 10 succs { }
;; 11 succs { 13 12 }
;; 12 succs { }
;; 13 succs { 15 14 }
;; 14 succs { }
;; 15 succs { 16 }
;; 16 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 92.
verify found no changes in insn with uid = 99.
verify found no changes in insn with uid = 111.
verify found no changes in insn with uid = 118.
verify found no changes in insn with uid = 121.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r131: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r131,l0) best DIREG, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r115,l0) best DIREG, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r110,l0) best DIREG, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a21 (r105,l0) best DIREG, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a30 (r100,l0) best DIREG, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a43 (r95,l0) best DIREG, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r89,l0) best DIREG, allocno GENERAL_REGS
    r88: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r88,l0) best DIREG, allocno GENERAL_REGS
    r87: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a19 (r87,l0) best DIREG, allocno GENERAL_REGS
    r86: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a28 (r86,l0) best DIREG, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r131,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r89,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a2(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r115,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a4(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a5(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a6(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a7(r116,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a8(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a9(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a10(r88,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a11(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r110,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a13(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a14(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a15(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a16(r111,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a17(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a18(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a19(r87,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a20(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a21(r105,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a22(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a23(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a24(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a25(r106,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a26(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a27(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a28(r86,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a29(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:39000 INT_SSE_REGS:39000 ALL_REGS:636000 MEM:17000
  a30(r100,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a31(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a32(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a33(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a34(r101,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a35(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a36(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a37(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a38(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:52000 NO_REX_SSE_REGS:52000 SSE_REGS:52000 MMX_REGS:90000 INT_SSE_REGS:90000 ALL_REGS:1472000 MEM:32000
  a39(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a40(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:39000 INT_SSE_REGS:39000 ALL_REGS:636000 MEM:16000
  a41(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a42(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a43(r95,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:34000 INT_SSE_REGS:34000 ALL_REGS:526000 MEM:14000
  a44(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a45(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a46(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a47(r96,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:28000 INT_SSE_REGS:28000 ALL_REGS:426000 MEM:12000
  a48(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a49(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16000 NO_REX_SSE_REGS:16000 SSE_REGS:16000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000

   Insn 127(l0): point = 0
   Insn 121(l0): point = 3
   Insn 120(l0): point = 5
   Insn 119(l0): point = 7
   Insn 118(l0): point = 9
   Insn 117(l0): point = 11
   Insn 116(l0): point = 13
   Insn 115(l0): point = 15
   Insn 111(l0): point = 18
   Insn 110(l0): point = 20
   Insn 108(l0): point = 23
   Insn 107(l0): point = 25
   Insn 106(l0): point = 27
   Insn 105(l0): point = 29
   Insn 104(l0): point = 31
   Insn 103(l0): point = 33
   Insn 102(l0): point = 35
   Insn 101(l0): point = 37
   Insn 100(l0): point = 39
   Insn 99(l0): point = 41
   Insn 98(l0): point = 43
   Insn 97(l0): point = 45
   Insn 96(l0): point = 47
   Insn 92(l0): point = 50
   Insn 91(l0): point = 52
   Insn 89(l0): point = 55
   Insn 88(l0): point = 57
   Insn 87(l0): point = 59
   Insn 86(l0): point = 61
   Insn 85(l0): point = 63
   Insn 84(l0): point = 65
   Insn 83(l0): point = 67
   Insn 82(l0): point = 69
   Insn 81(l0): point = 71
   Insn 80(l0): point = 73
   Insn 79(l0): point = 75
   Insn 78(l0): point = 77
   Insn 77(l0): point = 79
   Insn 73(l0): point = 82
   Insn 72(l0): point = 84
   Insn 70(l0): point = 87
   Insn 69(l0): point = 89
   Insn 68(l0): point = 91
   Insn 67(l0): point = 93
   Insn 66(l0): point = 95
   Insn 65(l0): point = 97
   Insn 64(l0): point = 99
   Insn 63(l0): point = 101
   Insn 62(l0): point = 103
   Insn 46(l0): point = 106
   Insn 45(l0): point = 108
   Insn 21(l0): point = 111
   Insn 20(l0): point = 113
   Insn 18(l0): point = 116
   Insn 17(l0): point = 118
   Insn 16(l0): point = 120
   Insn 15(l0): point = 122
   Insn 14(l0): point = 124
   Insn 13(l0): point = 126
   Insn 12(l0): point = 128
   Insn 11(l0): point = 130
   Insn 10(l0): point = 132
   Insn 60(l0): point = 135
   Insn 59(l0): point = 137
   Insn 53(l0): point = 140
   Insn 52(l0): point = 142
   Insn 51(l0): point = 144
   Insn 50(l0): point = 146
   Insn 43(l0): point = 149
   Insn 42(l0): point = 151
   Insn 41(l0): point = 153
   Insn 40(l0): point = 155
   Insn 39(l0): point = 157
   Insn 38(l0): point = 159
   Insn 37(l0): point = 161
   Insn 36(l0): point = 163
   Insn 35(l0): point = 165
   Insn 34(l0): point = 167
   Insn 33(l0): point = 169
   Insn 32(l0): point = 171
   Insn 31(l0): point = 173
   Insn 30(l0): point = 175
   Insn 29(l0): point = 177
   Insn 28(l0): point = 179
   Insn 27(l0): point = 181
   Insn 26(l0): point = 183
   Insn 25(l0): point = 185
   Insn 124(l0): point = 188
   Insn 6(l0): point = 190
   Insn 2(l0): point = 192
 a0(r131): [6..7]
 a1(r89): [12..13]
 a2(r130): [14..15]
 a3(r115): [21..35]
 a4(r119): [26..27]
 a5(r118): [28..29]
 a6(r117): [30..31]
 a7(r116): [32..33]
 a8(r94): [36..37]
 a9(r129): [38..39]
 a10(r88): [44..45]
 a11(r128): [46..47]
 a12(r110): [53..67]
 a13(r114): [58..59]
 a14(r113): [60..61]
 a15(r112): [62..63]
 a16(r111): [64..65]
 a17(r93): [68..69]
 a18(r127): [70..71]
 a19(r87): [76..77]
 a20(r126): [78..79]
 a21(r105): [85..99]
 a22(r109): [90..91]
 a23(r108): [92..93]
 a24(r107): [94..95]
 a25(r106): [96..97]
 a26(r92): [100..101]
 a27(r125): [102..103]
 a28(r86): [145..146]
 a29(r85): [147..165]
 a30(r100): [149..161] [109..110]
 a31(r104): [152..153]
 a32(r103): [154..155]
 a33(r102): [156..157]
 a34(r101): [158..159]
 a35(r91): [162..163]
 a36(r84): [166..167]
 a37(r82): [166..183]
 a38(r123): [172..177] [168..169]
 a39(r124): [170..171]
 a40(r83): [174..179]
 a41(r122): [180..181]
 a42(r121): [184..185]
 a43(r95): [114..128]
 a44(r99): [119..120]
 a45(r98): [121..122]
 a46(r97): [123..124]
 a47(r96): [125..126]
 a48(r90): [129..130]
 a49(r120): [131..132]
Compressing live ranges: from 195 to 88 - 45%
Ranges after the compression:
 a0(r131): [0..1]
 a1(r89): [2..3]
 a2(r130): [4..5]
 a3(r115): [6..13]
 a4(r119): [6..7]
 a5(r118): [8..9]
 a6(r117): [10..11]
 a7(r116): [12..13]
 a8(r94): [14..15]
 a9(r129): [16..17]
 a10(r88): [18..19]
 a11(r128): [20..21]
 a12(r110): [22..29]
 a13(r114): [22..23]
 a14(r113): [24..25]
 a15(r112): [26..27]
 a16(r111): [28..29]
 a17(r93): [30..31]
 a18(r127): [32..33]
 a19(r87): [34..35]
 a20(r126): [36..37]
 a21(r105): [38..45]
 a22(r109): [38..39]
 a23(r108): [40..41]
 a24(r107): [42..43]
 a25(r106): [44..45]
 a26(r92): [46..47]
 a27(r125): [48..49]
 a28(r86): [64..65]
 a29(r85): [66..75]
 a30(r100): [66..73] [50..51]
 a31(r104): [66..67]
 a32(r103): [68..69]
 a33(r102): [70..71]
 a34(r101): [72..73]
 a35(r91): [74..75]
 a36(r84): [76..77]
 a37(r82): [76..85]
 a38(r123): [82..83] [78..79]
 a39(r124): [80..81]
 a40(r83): [82..83]
 a41(r122): [84..85]
 a42(r121): [86..87]
 a43(r95): [52..59]
 a44(r99): [52..53]
 a45(r98): [54..55]
 a46(r97): [56..57]
 a47(r96): [58..59]
 a48(r90): [60..61]
 a49(r120): [62..63]
  pref0:a0(r131)<-hr5@1500
  pref1:a3(r115)<-hr5@1500
  pref2:a12(r110)<-hr5@1500
  pref3:a21(r105)<-hr5@1500
  pref4:a30(r100)<-hr5@1500
  pref5:a43(r95)<-hr5@1500
  pref6:a1(r89)<-hr5@1500
  pref7:a10(r88)<-hr5@1500
  pref8:a19(r87)<-hr5@1500
  pref9:a28(r86)<-hr5@1500
  regions=1, blocks=17, points=88
    allocnos=50 (big 0), copies=0, conflicts=0, ranges=52
Disposition:
   37:r82  l0     2   40:r83  l0     1   36:r84  l0     0   29:r85  l0     0
   28:r86  l0     0   19:r87  l0     0   10:r88  l0     0    1:r89  l0     0
   48:r90  l0     0   35:r91  l0     1   26:r92  l0     0   17:r93  l0     0
    8:r94  l0     0   43:r95  l0     0   47:r96  l0     1   46:r97  l0     1
   45:r98  l0     1   44:r99  l0     1   30:r100 l0     1   34:r101 l0     2
   33:r102 l0     2   32:r103 l0     2   31:r104 l0     2   21:r105 l0     0
   25:r106 l0     1   24:r107 l0     1   23:r108 l0     1   22:r109 l0     1
   12:r110 l0     0   16:r111 l0     1   15:r112 l0     1   14:r113 l0     1
   13:r114 l0     1    3:r115 l0     0    7:r116 l0     1    6:r117 l0     1
    5:r118 l0     1    4:r119 l0     1   49:r120 l0     0   42:r121 l0     0
   41:r122 l0     0   38:r123 l0     0   39:r124 l0     0   27:r125 l0     0
   20:r126 l0     0   18:r127 l0     0   11:r128 l0     0    9:r129 l0     0
    2:r130 l0     0    0:r131 l0     0
+++Costs: overall 10000, reg 10000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


freeQuery

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={11d} r1={11d} r2={11d} r4={11d} r5={21d,11u} r6={1d,16u} r7={1d,26u} r8={10d} r9={10d} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r16={1d,15u} r17={36d,6u} r18={10d} r19={1d,31u,4e} r20={11d} r21={11d} r22={11d} r23={11d} r24={11d} r25={11d} r26={11d} r27={11d} r28={10d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={11d} r37={11d} r38={10d} r39={10d} r44={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r82={1d,1u} r83={1d,2u,1e} r84={1d,1u} r85={1d,2u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,2u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,2u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,2u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,2u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,2u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={4d,4u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} 
;;    total ref usage 948{778d,165u,5e} in 90{80 regular + 10 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])
        (reg:DI 5 di [ q ])) "queryTAD.c":141:28 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ q ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 124 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [13 j+0 S4 A32])
        (const_int 0 [0])) "queryTAD.c":142:14 67 {*movsi_internal}
     (nil))
(jump_insn 124 6 125 2 (set (pc)
        (label_ref 54)) "queryTAD.c":142:5 660 {jump}
     (nil)
 -> 54)
;;  succ:       8 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 125 124 56)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       8
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 90 95 96 97 98 99 120
(code_label 56 125 9 3 106 (nil) [1 uses])
(note 9 56 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:DI 120)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":143:15 66 {*movdi_internal}
     (nil))
(insn 11 10 12 3 (parallel [
            (set (reg/f:DI 90 [ _20 ])
                (plus:DI (reg/f:DI 120)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":143:15 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 120)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])
                    (const_int 24 [0x18]))
                (nil)))))
(insn 12 11 13 3 (set (reg:DI 95 [ _30 ])
        (reg/f:DI 90 [ _20 ])) "queryTAD.c":143:15 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90 [ _20 ])
        (nil)))
(insn 13 12 14 3 (parallel [
            (set (reg:DI 96 [ _31 ])
                (lshiftrt:DI (reg:DI 95 [ _30 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":143:15 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 14 13 15 3 (parallel [
            (set (reg:DI 97 [ _32 ])
                (plus:DI (reg:DI 96 [ _31 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":143:15 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 96 [ _31 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 15 14 16 3 (set (reg/f:DI 98 [ _33 ])
        (reg:DI 97 [ _32 ])) "queryTAD.c":143:15 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 97 [ _32 ])
        (nil)))
(insn 16 15 17 3 (set (reg:QI 99 [ _34 ])
        (mem:QI (reg/f:DI 98 [ _33 ]) [10 *_33+0 S1 A8])) "queryTAD.c":143:15 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 98 [ _33 ])
        (nil)))
(insn 17 16 18 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 99 [ _34 ])
            (const_int 0 [0]))) "queryTAD.c":143:15 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 99 [ _34 ])
        (nil)))
(jump_insn 18 17 19 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "queryTAD.c":143:15 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 23)
;;  succ:       5 [100.0% (guessed)] 
;;              4 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 95

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [0.0% (guessed)]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 95
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 95
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg:DI 5 di)
        (reg:DI 95 [ _30 ])) "queryTAD.c":143:15 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 95 [ _30 ])
        (nil)))
(call_insn 21 20 22 4 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":143:15 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 22 21 23)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3 [100.0% (guessed)] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 83 84 85 91 100 101 102 103 104 121 122 123 124
(code_label 23 22 24 5 104 (nil) [1 uses])
(note 24 23 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 5 (set (reg/f:DI 121)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":143:15 66 {*movdi_internal}
     (nil))
(insn 26 25 27 5 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 121)
                (const_int 24 [0x18])) [7 q_13(D)->sensorsID+0 S8 A64])) "queryTAD.c":143:15 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 121)
        (nil)))
(insn 27 26 28 5 (set (reg:SI 122)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [13 j+0 S4 A32])) "queryTAD.c":143:26 67 {*movsi_internal}
     (nil))
(insn 28 27 29 5 (set (reg:DI 83 [ _2 ])
        (sign_extend:DI (reg:SI 122))) "queryTAD.c":143:26 128 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 122)
        (nil)))
(insn 29 28 30 5 (set (reg:DI 123)
        (reg:DI 83 [ _2 ])) "queryTAD.c":143:26 66 {*movdi_internal}
     (nil))
(insn 30 29 31 5 (parallel [
            (set (reg:DI 123)
                (ashift:DI (reg:DI 123)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":143:26 520 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 31 30 32 5 (parallel [
            (set (reg:DI 123)
                (plus:DI (reg:DI 123)
                    (reg:DI 83 [ _2 ])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":143:26 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 83 [ _2 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 83 [ _2 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 32 31 33 5 (parallel [
            (set (reg:DI 124)
                (ashift:DI (reg:DI 123)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":143:26 520 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 123)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 33 32 34 5 (set (reg:DI 123)
        (reg:DI 124)) "queryTAD.c":143:26 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 124)
        (nil)))
(insn 34 33 35 5 (set (reg:DI 84 [ _3 ])
        (reg:DI 123)) "queryTAD.c":143:26 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 123)
        (nil)))
(insn 35 34 36 5 (parallel [
            (set (reg/f:DI 85 [ _4 ])
                (plus:DI (reg/f:DI 82 [ _1 ])
                    (reg:DI 84 [ _3 ])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":143:26 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 84 [ _3 ])
        (expr_list:REG_DEAD (reg/f:DI 82 [ _1 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 36 35 37 5 (parallel [
            (set (reg/f:DI 91 [ _21 ])
                (plus:DI (reg/f:DI 85 [ _4 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":143:29 191 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 37 36 38 5 (set (reg:DI 100 [ _35 ])
        (reg/f:DI 91 [ _21 ])) "queryTAD.c":143:29 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91 [ _21 ])
        (nil)))
(insn 38 37 39 5 (parallel [
            (set (reg:DI 101 [ _36 ])
                (lshiftrt:DI (reg:DI 100 [ _35 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":143:29 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 39 38 40 5 (parallel [
            (set (reg:DI 102 [ _37 ])
                (plus:DI (reg:DI 101 [ _36 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":143:29 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 101 [ _36 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 40 39 41 5 (set (reg/f:DI 103 [ _38 ])
        (reg:DI 102 [ _37 ])) "queryTAD.c":143:29 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 102 [ _37 ])
        (nil)))
(insn 41 40 42 5 (set (reg:QI 104 [ _39 ])
        (mem:QI (reg/f:DI 103 [ _38 ]) [10 *_38+0 S1 A8])) "queryTAD.c":143:29 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 103 [ _38 ])
        (nil)))
(insn 42 41 43 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 104 [ _39 ])
            (const_int 0 [0]))) "queryTAD.c":143:29 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 104 [ _39 ])
        (nil)))
(jump_insn 43 42 44 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) "queryTAD.c":143:29 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 48)
;;  succ:       7 [100.0% (guessed)] 
;;              6 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 100

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 [0.0% (guessed)]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 100
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 100
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 44 43 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 6 (set (reg:DI 5 di)
        (reg:DI 100 [ _35 ])) "queryTAD.c":143:29 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 100 [ _35 ])
        (nil)))
(call_insn 46 45 47 6 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":143:29 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 47 46 48)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       5 [100.0% (guessed)] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 86
(code_label 48 47 49 7 105 (nil) [1 uses])
(note 49 48 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 7 (set (reg/f:DI 86 [ _5 ])
        (mem/f:DI (plus:DI (reg/f:DI 85 [ _4 ])
                (const_int 8 [0x8])) [3 _4->name+0 S8 A64])) "queryTAD.c":143:29 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 85 [ _4 ])
        (nil)))
(insn 51 50 52 7 (set (reg:DI 5 di)
        (reg/f:DI 86 [ _5 ])) "queryTAD.c":143:9 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 86 [ _5 ])
        (nil)))
(call_insn 52 51 53 7 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fc58ee7d600 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "queryTAD.c":143:9 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 53 52 54 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -4 [0xfffffffffffffffc])) [13 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -4 [0xfffffffffffffffc])) [13 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":142:26 190 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 54 53 55 8 103 (nil) [1 uses])
(note 55 54 59 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 59 55 60 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [13 j+0 S4 A32])
            (const_int 85 [0x55]))) "queryTAD.c":142:5 11 {*cmpsi_1}
     (nil))
(jump_insn 60 59 61 8 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) "queryTAD.c":142:5 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 56)
;;  succ:       3
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 92 105 106 107 108 109 125
(note 61 60 62 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 9 (set (reg/f:DI 125)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":145:5 66 {*movdi_internal}
     (nil))
(insn 63 62 64 9 (parallel [
            (set (reg/f:DI 92 [ _22 ])
                (plus:DI (reg/f:DI 125)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":145:5 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 125)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])
                    (const_int 16 [0x10]))
                (nil)))))
(insn 64 63 65 9 (set (reg:DI 105 [ _40 ])
        (reg/f:DI 92 [ _22 ])) "queryTAD.c":145:5 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92 [ _22 ])
        (nil)))
(insn 65 64 66 9 (parallel [
            (set (reg:DI 106 [ _41 ])
                (lshiftrt:DI (reg:DI 105 [ _40 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":145:5 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 66 65 67 9 (parallel [
            (set (reg:DI 107 [ _42 ])
                (plus:DI (reg:DI 106 [ _41 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":145:5 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 106 [ _41 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 67 66 68 9 (set (reg/f:DI 108 [ _43 ])
        (reg:DI 107 [ _42 ])) "queryTAD.c":145:5 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 107 [ _42 ])
        (nil)))
(insn 68 67 69 9 (set (reg:QI 109 [ _44 ])
        (mem:QI (reg/f:DI 108 [ _43 ]) [10 *_43+0 S1 A8])) "queryTAD.c":145:5 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 108 [ _43 ])
        (nil)))
(insn 69 68 70 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 109 [ _44 ])
            (const_int 0 [0]))) "queryTAD.c":145:5 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 109 [ _44 ])
        (nil)))
(jump_insn 70 69 71 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) "queryTAD.c":145:5 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 75)
;;  succ:       11 [100.0% (guessed)] 
;;              10 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 105

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 [0.0% (guessed)]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 105
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 105
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 71 70 72 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 10 (set (reg:DI 5 di)
        (reg:DI 105 [ _40 ])) "queryTAD.c":145:5 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 105 [ _40 ])
        (nil)))
(call_insn 73 72 74 10 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":145:5 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 74 73 75)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       9 [100.0% (guessed)] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 87 93 110 111 112 113 114 126 127
(code_label 75 74 76 11 107 (nil) [1 uses])
(note 76 75 77 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 11 (set (reg/f:DI 126)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":145:5 66 {*movdi_internal}
     (nil))
(insn 78 77 79 11 (set (reg/f:DI 87 [ _6 ])
        (mem/f:DI (plus:DI (reg/f:DI 126)
                (const_int 16 [0x10])) [6 q_13(D)->years+0 S8 A64])) "queryTAD.c":145:5 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 126)
        (nil)))
(insn 79 78 80 11 (set (reg:DI 5 di)
        (reg/f:DI 87 [ _6 ])) "queryTAD.c":145:5 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ _6 ])
        (nil)))
(call_insn 80 79 81 11 (call (mem:QI (symbol_ref:DI ("freeRecYears") [flags 0x3]  <function_decl 0x7fc58ec06200 freeRecYears>) [0 freeRecYears S1 A8])
        (const_int 0 [0])) "queryTAD.c":145:5 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 81 80 82 11 (set (reg/f:DI 127)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":146:5 66 {*movdi_internal}
     (nil))
(insn 82 81 83 11 (parallel [
            (set (reg/f:DI 93 [ _23 ])
                (plus:DI (reg/f:DI 127)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":146:5 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 127)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])
                    (const_int 32 [0x20]))
                (nil)))))
(insn 83 82 84 11 (set (reg:DI 110 [ _45 ])
        (reg/f:DI 93 [ _23 ])) "queryTAD.c":146:5 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93 [ _23 ])
        (nil)))
(insn 84 83 85 11 (parallel [
            (set (reg:DI 111 [ _46 ])
                (lshiftrt:DI (reg:DI 110 [ _45 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":146:5 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 85 84 86 11 (parallel [
            (set (reg:DI 112 [ _47 ])
                (plus:DI (reg:DI 111 [ _46 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":146:5 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 111 [ _46 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 86 85 87 11 (set (reg/f:DI 113 [ _48 ])
        (reg:DI 112 [ _47 ])) "queryTAD.c":146:5 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 112 [ _47 ])
        (nil)))
(insn 87 86 88 11 (set (reg:QI 114 [ _49 ])
        (mem:QI (reg/f:DI 113 [ _48 ]) [10 *_48+0 S1 A8])) "queryTAD.c":146:5 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 113 [ _48 ])
        (nil)))
(insn 88 87 89 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 114 [ _49 ])
            (const_int 0 [0]))) "queryTAD.c":146:5 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 114 [ _49 ])
        (nil)))
(jump_insn 89 88 90 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 94)
            (pc))) "queryTAD.c":146:5 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 94)
;;  succ:       13 [100.0% (guessed)] 
;;              12 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 110

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 [0.0% (guessed)]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 110
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 110
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 90 89 91 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 12 (set (reg:DI 5 di)
        (reg:DI 110 [ _45 ])) "queryTAD.c":146:5 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 110 [ _45 ])
        (nil)))
(call_insn 92 91 93 12 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":146:5 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 93 92 94)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       11 [100.0% (guessed)] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 88 94 115 116 117 118 119 128 129
(code_label 94 93 95 13 108 (nil) [1 uses])
(note 95 94 96 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 13 (set (reg/f:DI 128)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":146:5 66 {*movdi_internal}
     (nil))
(insn 97 96 98 13 (set (reg/f:DI 88 [ _7 ])
        (mem/f:DI (plus:DI (reg/f:DI 128)
                (const_int 32 [0x20])) [8 q_13(D)->sensorsP+0 S8 A64])) "queryTAD.c":146:5 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 128)
        (nil)))
(insn 98 97 99 13 (set (reg:DI 5 di)
        (reg/f:DI 88 [ _7 ])) "queryTAD.c":146:5 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88 [ _7 ])
        (nil)))
(call_insn 99 98 100 13 (call (mem:QI (symbol_ref:DI ("freeRecSen") [flags 0x3]  <function_decl 0x7fc58ec06600 freeRecSen>) [0 freeRecSen S1 A8])
        (const_int 0 [0])) "queryTAD.c":146:5 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 100 99 101 13 (set (reg/f:DI 129)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":147:11 66 {*movdi_internal}
     (nil))
(insn 101 100 102 13 (parallel [
            (set (reg/f:DI 94 [ _24 ])
                (plus:DI (reg/f:DI 129)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":147:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 129)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])
                    (const_int 24 [0x18]))
                (nil)))))
(insn 102 101 103 13 (set (reg:DI 115 [ _50 ])
        (reg/f:DI 94 [ _24 ])) "queryTAD.c":147:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 94 [ _24 ])
        (nil)))
(insn 103 102 104 13 (parallel [
            (set (reg:DI 116 [ _51 ])
                (lshiftrt:DI (reg:DI 115 [ _50 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":147:11 566 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 104 103 105 13 (parallel [
            (set (reg:DI 117 [ _52 ])
                (plus:DI (reg:DI 116 [ _51 ])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":147:11 191 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 116 [ _51 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 105 104 106 13 (set (reg/f:DI 118 [ _53 ])
        (reg:DI 117 [ _52 ])) "queryTAD.c":147:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 117 [ _52 ])
        (nil)))
(insn 106 105 107 13 (set (reg:QI 119 [ _54 ])
        (mem:QI (reg/f:DI 118 [ _53 ]) [10 *_53+0 S1 A8])) "queryTAD.c":147:11 69 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 118 [ _53 ])
        (nil)))
(insn 107 106 108 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 119 [ _54 ])
            (const_int 0 [0]))) "queryTAD.c":147:11 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 119 [ _54 ])
        (nil)))
(jump_insn 108 107 109 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 113)
            (pc))) "queryTAD.c":147:11 659 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 113)
;;  succ:       15 [100.0% (guessed)] 
;;              14 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 115

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 [0.0% (guessed)]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 115
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 109 108 110 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 111 14 (set (reg:DI 5 di)
        (reg:DI 115 [ _50 ])) "queryTAD.c":147:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 115 [ _50 ])
        (nil)))
(call_insn 111 110 112 14 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":147:11 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 112 111 113)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       13 [100.0% (guessed)] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 89 130 131
(code_label 113 112 114 15 109 (nil) [1 uses])
(note 114 113 115 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 115 114 116 15 (set (reg/f:DI 130)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":147:11 66 {*movdi_internal}
     (nil))
(insn 116 115 117 15 (set (reg/f:DI 89 [ _8 ])
        (mem/f:DI (plus:DI (reg/f:DI 130)
                (const_int 24 [0x18])) [7 q_13(D)->sensorsID+0 S8 A64])) "queryTAD.c":147:11 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 130)
        (nil)))
(insn 117 116 118 15 (set (reg:DI 5 di)
        (reg/f:DI 89 [ _8 ])) "queryTAD.c":147:5 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 89 [ _8 ])
        (nil)))
(call_insn 118 117 119 15 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fc58ee7d600 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "queryTAD.c":147:5 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 119 118 120 15 (set (reg:DI 131)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":148:5 66 {*movdi_internal}
     (nil))
(insn 120 119 121 15 (set (reg:DI 5 di)
        (reg:DI 131)) "queryTAD.c":148:5 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 131)
        (nil)))
(call_insn 121 120 126 15 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fc58ee7d600 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "queryTAD.c":148:5 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       16 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 1, flags: (RTL)
;;  pred:       15 [always]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 126 121 127 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 0 16 (const_int 0 [0]) "queryTAD.c":149:1 696 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function _sub_D_00099_0 (_sub_D_00099_0, funcdef_no=12, decl_uid=3589, cgraph_uid=20, symbol_order=35)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 7.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



   Insn 7(l0): point = 0
   Insn 6(l0): point = 2
   Insn 5(l0): point = 4
Compressing live ranges: from 7 to 0 - 0%
Ranges after the compression:
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0
Disposition:
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


_sub_D_00099_0

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={3d,1u} r5={3d,1u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d,2u} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 98{88d,10u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 4 si)
        (const_int 15 [0xf])) "queryTAD.c":149:1 66 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:DI 5 di)
        (symbol_ref:DI ("*.LASAN0") [flags 0x2]  <var_decl 0x7fc58ece2360 *.LASAN0>)) "queryTAD.c":149:1 66 {*movdi_internal}
     (nil))
(call_insn 7 6 0 2 (call (mem:QI (symbol_ref:DI ("__asan_unregister_globals") [flags 0x41]  <function_decl 0x7fc58eead700 __builtin___asan_unregister_globals>) [0 __builtin___asan_unregister_globals S1 A8])
        (const_int 0 [0])) "queryTAD.c":149:1 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function _sub_I_00099_1 (_sub_I_00099_1, funcdef_no=13, decl_uid=3592, cgraph_uid=23, symbol_order=38)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 5.
verify found no changes in insn with uid = 6.
verify found no changes in insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



   Insn 9(l0): point = 0
   Insn 8(l0): point = 2
   Insn 7(l0): point = 4
   Insn 6(l0): point = 6
   Insn 5(l0): point = 8
Compressing live ranges: from 11 to 0 - 0%
Ranges after the compression:
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0
Disposition:
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


_sub_I_00099_1

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={4d} r1={4d} r2={4d} r4={5d,1u} r5={5d,1u} r6={1d,2u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,1u} r17={3d} r18={3d} r19={1d,2u} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={4d} r37={4d} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} 
;;    total ref usage 234{222d,12u,0e} in 5{2 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 5 2 6 2 (call (mem:QI (symbol_ref:DI ("__asan_init") [flags 0x41]  <function_decl 0x7fc58eea5400 __builtin___asan_init>) [0 __builtin___asan_init S1 A8])
        (const_int 0 [0])) "queryTAD.c":149:1 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(call_insn 6 5 7 2 (call (mem:QI (symbol_ref:DI ("__asan_version_mismatch_check_v8") [flags 0x41]  <function_decl 0x7fc58eea5500 __builtin___asan_version_mismatch_check_v8>) [0 __builtin___asan_version_mismatch_check_v8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":149:1 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 7 6 8 2 (set (reg:DI 4 si)
        (const_int 15 [0xf])) "queryTAD.c":149:1 66 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (symbol_ref:DI ("*.LASAN0") [flags 0x2]  <var_decl 0x7fc58ece2360 *.LASAN0>)) "queryTAD.c":149:1 66 {*movdi_internal}
     (nil))
(call_insn 9 8 0 2 (call (mem:QI (symbol_ref:DI ("__asan_register_globals") [flags 0x41]  <function_decl 0x7fc58eead600 __builtin___asan_register_globals>) [0 __builtin___asan_register_globals S1 A8])
        (const_int 0 [0])) "queryTAD.c":149:1 666 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

