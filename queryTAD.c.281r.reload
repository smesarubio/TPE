
;; Function newQuery (newQuery, funcdef_no=0, decl_uid=3374, cgraph_uid=1, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 7:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 8:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 25:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=103 from oldreg=86, assigning class GENERAL_REGS to r103
   25: {r103:DI=r103:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
   69: r103:DI=r85:DI
    Inserting insn reload after:
   70: r86:DI=r103:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 28:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 39:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 43:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=104 from oldreg=91, assigning class GENERAL_REGS to r104
   43: {r104:DI=r104:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
   71: r104:DI=r90:DI
    Inserting insn reload after:
   72: r91:DI=r104:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 46:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 57:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 3
   Insn 19: point = 0, n_alt = 0
   Insn 18: point = 0, n_alt = 0
   Insn 17: point = 0, n_alt = 0
   Insn 16: point = 0, n_alt = 0
   Insn 15: point = 0, n_alt = 4
  BB 5
   Insn 33: point = 0, n_alt = 0
   Insn 32: point = 0, n_alt = -2
  BB 7
   Insn 51: point = 2, n_alt = 0
   Insn 50: point = 2, n_alt = -2
  BB 8
   Insn 66: point = 4, n_alt = -1
   Insn 65: point = 4, n_alt = -2
   Insn 61: point = 5, n_alt = -2
   Insn 58: point = 7, n_alt = 3
   Insn 57: point = 8, n_alt = 5
   Insn 56: point = 9, n_alt = 3
   Insn 55: point = 10, n_alt = 3
  BB 6
   Insn 48: point = 11, n_alt = -1
   Insn 47: point = 11, n_alt = 0
   Insn 46: point = 12, n_alt = 4
   Insn 45: point = 14, n_alt = -2
   Insn 44: point = 16, n_alt = 0
   Insn 72: point = 18, n_alt = -2
	Hard reg 1 is preferable by r104 with profit 1000
   Insn 43: point = 20, n_alt = 0
   Insn 71: point = 21, n_alt = -2
	Hard reg 1 is preferable by r104 with profit 1000
	Hard reg 0 is preferable by r104 with profit 1000
   Insn 42: point = 22, n_alt = -2
   Insn 41: point = 24, n_alt = 0
   Insn 40: point = 26, n_alt = 3
   Insn 39: point = 27, n_alt = 5
   Insn 38: point = 28, n_alt = 3
   Insn 37: point = 29, n_alt = 3
  BB 4
   Insn 30: point = 30, n_alt = -1
   Insn 29: point = 30, n_alt = 0
   Insn 28: point = 31, n_alt = 4
   Insn 27: point = 33, n_alt = -2
   Insn 26: point = 35, n_alt = 0
   Insn 70: point = 37, n_alt = -2
	Hard reg 1 is preferable by r103 with profit 1000
   Insn 25: point = 39, n_alt = 0
   Insn 69: point = 40, n_alt = -2
	Hard reg 1 is preferable by r103 with profit 1000
	Hard reg 0 is preferable by r103 with profit 1000
   Insn 24: point = 41, n_alt = -2
   Insn 23: point = 43, n_alt = 3
  BB 2
   Insn 13: point = 44, n_alt = -1
   Insn 12: point = 44, n_alt = 1
   Insn 11: point = 44, n_alt = 5
   Insn 10: point = 45, n_alt = -2
   Insn 9: point = 46, n_alt = 0
   Insn 8: point = 46, n_alt = 2
   Insn 7: point = 46, n_alt = 2
   Insn 3: point = 46, n_alt = 5
   Insn 2: point = 46, n_alt = 5
 r82: [6..7]
 r83: [42..43]
 r84: [23..24]
 r85: [30..41] [0..1]
 r86: [36..37]
 r87: [34..35]
 r88: [32..33]
 r89: [30..31]
 r90: [11..22] [2..3]
 r91: [17..18]
 r92: [15..16]
 r93: [13..14]
 r94: [11..12]
 r95: [4..5]
 r96: [44..45]
 r97: [27..29]
 r98: [27..28]
 r99: [25..26]
 r100: [8..10]
 r101: [8..9]
 r103: [38..40]
 r104: [19..21]
Compressing live ranges: from 46 to 40 - 86%
Ranges after the compression:
 r82: [6..7]
 r83: [36..37]
 r84: [20..21]
 r85: [26..35] [0..1]
 r86: [32..33]
 r87: [30..31]
 r88: [28..29]
 r89: [26..27]
 r90: [10..19] [2..3]
 r91: [16..17]
 r92: [14..15]
 r93: [12..13]
 r94: [10..11]
 r95: [4..5]
 r96: [38..39]
 r97: [24..25]
 r98: [24..25]
 r99: [22..23]
 r100: [8..9]
 r101: [8..9]
 r103: [34..35]
 r104: [18..19]

********** Assignment #1: **********

	 Assigning to 103 (cl=GENERAL_REGS, orig=86, freq=3000, tfirst=103, tfreq=3000)...
	   Assign 1 to reload r103 (freq=3000)
	 Assigning to 104 (cl=GENERAL_REGS, orig=91, freq=3000, tfirst=104, tfreq=3000)...
	   Assign 1 to reload r104 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 58
changing reg in insn 61
changing reg in insn 23
changing reg in insn 24
changing reg in insn 41
changing reg in insn 42
changing reg in insn 24
changing reg in insn 32
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 42
changing reg in insn 50
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 61
changing reg in insn 65
changing reg in insn 10
changing reg in insn 11
changing reg in insn 37
changing reg in insn 39
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 55
changing reg in insn 57
changing reg in insn 56
changing reg in insn 57
deleting insn with uid = 10.
deleting insn with uid = 24.
deleting insn with uid = 70.
deleting insn with uid = 27.
deleting insn with uid = 42.
deleting insn with uid = 72.
deleting insn with uid = 45.
deleting insn with uid = 61.
deleting insn with uid = 65.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 51.


newQuery

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={13d,10u} r1={17d,10u} r2={7d} r4={8d,2u} r5={12d,6u} r6={1d,19u} r7={1d,14u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={14d,3u} r18={6d} r19={1d,1u,1e} r20={7d} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={7d} r37={7d} r38={6d} r39={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} 
;;    total ref usage 516{450d,65u,1e} in 40{34 regular + 6 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 96
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 yearFrom+0 S8 A64])
        (reg:DI 5 di [ yearFrom ])) "queryTAD.c":13:50 66 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 yearTo+0 S8 A64])
        (reg:DI 4 si [ yearTo ])) "queryTAD.c":13:50 66 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 4 si)
        (const_int 40 [0x28])) "queryTAD.c":14:18 66 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (const_int 1 [0x1])) "queryTAD.c":14:18 66 {*movdi_internal}
     (nil))
(call_insn 9 8 11 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("calloc") [flags 0x41]  <function_decl 0x7fc58ee76d00 calloc>) [0 __builtin_calloc S1 A8])
            (const_int 0 [0]))) "queryTAD.c":14:18 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 11 9 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])
        (reg/f:DI 0 ax [96])) "queryTAD.c":14:18 66 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])
            (const_int 0 [0]))) "queryTAD.c":15:8 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "queryTAD.c":15:8 659 {*jcc}
     (nil)
 -> 21)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fc58ec2dcf0 *.LC0>)) "queryTAD.c":16:9 66 {*movdi_internal}
     (nil))
(call_insn 16 15 17 3 (call (mem:QI (symbol_ref:DI ("perror") [flags 0x41]  <function_decl 0x7fc58ef5f500 perror>) [0 perror S1 A8])
        (const_int 0 [0])) "queryTAD.c":16:9 666 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 17 16 18 3 (call (mem:QI (symbol_ref:DI ("__asan_handle_no_return") [flags 0x41]  <function_decl 0x7fc58eead800 __builtin___asan_handle_no_return>) [0 __builtin___asan_handle_no_return S1 A8])
        (const_int 0 [0])) "queryTAD.c":17:9 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 18 17 19 3 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "queryTAD.c":17:9 67 {*movsi_internal}
     (nil))
(call_insn 19 18 20 3 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fc58ee7c900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) "queryTAD.c":17:9 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 20 19 21)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 83 85 86 87 88 89
(code_label 21 20 22 4 2 (nil) [1 uses])
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 69 4 (set (reg/f:DI 0 ax [orig:83 _11 ] [83])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])) "queryTAD.c":19:17 66 {*movdi_internal}
     (nil))
(insn 69 23 25 4 (set (reg:DI 1 dx [orig:86 _17 ] [86])
        (reg:DI 0 ax [orig:85 _16 ] [85])) "queryTAD.c":19:17 66 {*movdi_internal}
     (nil))
(insn 25 69 26 4 (parallel [
            (set (reg:DI 1 dx [orig:86 _17 ] [86])
                (lshiftrt:DI (reg:DI 1 dx [orig:86 _17 ] [86])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":19:17 566 {*lshrdi3_1}
     (nil))
(insn 26 25 28 4 (parallel [
            (set (reg:DI 1 dx [orig:87 _18 ] [87])
                (plus:DI (reg:DI 1 dx [orig:86 _17 ] [86])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":19:17 191 {*adddi_1}
     (nil))
(insn 28 26 29 4 (set (reg:QI 1 dx [orig:89 _20 ] [89])
        (mem:QI (reg/f:DI 1 dx [orig:88 _19 ] [88]) [10 *_19+0 S1 A8])) "queryTAD.c":19:17 69 {*movqi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:89 _20 ] [89])
            (const_int 0 [0]))) "queryTAD.c":19:17 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 30 29 31 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) "queryTAD.c":19:17 659 {*jcc}
     (nil)
 -> 35)
;;  succ:       6 [100.0% (guessed)] 
;;              5 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 [0.0% (guessed)]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:85 _16 ] [85])) "queryTAD.c":19:17 66 {*movdi_internal}
     (nil))
(call_insn 33 32 34 5 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":19:17 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 34 33 35)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4 [100.0% (guessed)] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 84 90 91 92 93 94 97 98 99
(code_label 35 34 36 6 3 (nil) [1 uses])
(note 36 35 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 6 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])) "queryTAD.c":19:17 66 {*movdi_internal}
     (nil))
(insn 38 37 39 6 (set (reg:DI 1 dx [98])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 yearFrom+0 S8 A64])) "queryTAD.c":19:17 66 {*movdi_internal}
     (nil))
(insn 39 38 40 6 (set (mem:DI (reg/f:DI 0 ax [97]) [2 q_3->yearFrom+0 S8 A64])
        (reg:DI 1 dx [98])) "queryTAD.c":19:17 66 {*movdi_internal}
     (nil))
(insn 40 39 41 6 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])) "queryTAD.c":20:15 66 {*movdi_internal}
     (nil))
(insn 41 40 71 6 (parallel [
            (set (reg/f:DI 0 ax [orig:84 _12 ] [84])
                (plus:DI (reg/f:DI 0 ax [99])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":20:15 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 71 41 43 6 (set (reg:DI 1 dx [orig:91 _22 ] [91])
        (reg:DI 0 ax [orig:90 _21 ] [90])) "queryTAD.c":20:15 66 {*movdi_internal}
     (nil))
(insn 43 71 44 6 (parallel [
            (set (reg:DI 1 dx [orig:91 _22 ] [91])
                (lshiftrt:DI (reg:DI 1 dx [orig:91 _22 ] [91])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":20:15 566 {*lshrdi3_1}
     (nil))
(insn 44 43 46 6 (parallel [
            (set (reg:DI 1 dx [orig:92 _23 ] [92])
                (plus:DI (reg:DI 1 dx [orig:91 _22 ] [91])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":20:15 191 {*adddi_1}
     (nil))
(insn 46 44 47 6 (set (reg:QI 1 dx [orig:94 _25 ] [94])
        (mem:QI (reg/f:DI 1 dx [orig:93 _24 ] [93]) [10 *_24+0 S1 A8])) "queryTAD.c":20:15 69 {*movqi_internal}
     (nil))
(insn 47 46 48 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:94 _25 ] [94])
            (const_int 0 [0]))) "queryTAD.c":20:15 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 48 47 49 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) "queryTAD.c":20:15 659 {*jcc}
     (nil)
 -> 53)
;;  succ:       8 [100.0% (guessed)] 
;;              7 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 90

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 [0.0% (guessed)]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 90
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 90
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 49 48 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:90 _21 ] [90])) "queryTAD.c":20:15 66 {*movdi_internal}
     (nil))
(call_insn 51 50 52 7 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":20:15 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 52 51 53)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       6 [100.0% (guessed)] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 82 95 100 101
(code_label 53 52 54 8 4 (nil) [1 uses])
(note 54 53 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 8 (set (reg/f:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])) "queryTAD.c":20:15 66 {*movdi_internal}
     (nil))
(insn 56 55 57 8 (set (reg:DI 1 dx [101])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 yearTo+0 S8 A64])) "queryTAD.c":20:15 66 {*movdi_internal}
     (nil))
(insn 57 56 58 8 (set (mem:DI (plus:DI (reg/f:DI 0 ax [100])
                (const_int 8 [0x8])) [2 q_3->yearTo+0 S8 A64])
        (reg:DI 1 dx [101])) "queryTAD.c":20:15 66 {*movdi_internal}
     (nil))
(insn 58 57 66 8 (set (reg/f:DI 0 ax [orig:82 _8 ] [82])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])) "queryTAD.c":21:12 66 {*movdi_internal}
     (nil))
(insn 66 58 68 8 (use (reg/i:DI 0 ax)) "queryTAD.c":22:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 68 66 0 NOTE_INSN_DELETED)

;; Function insertVector (insertVector, funcdef_no=1, decl_uid=3364, cgraph_uid=2, symbol_order=1)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 8:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 10:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=91 from oldreg=84, assigning class GENERAL_REGS to r91
   10: {r91:DI=r91:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
   30: r91:DI=r83:DI
    Inserting insn reload after:
   31: r84:DI=r91:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 24:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5

********** Pseudo live ranges #1: **********

  BB 3
   Insn 18: point = 0, n_alt = 0
   Insn 17: point = 0, n_alt = -2
  BB 5
   Insn 28: point = 2, n_alt = -1
  BB 4
   Insn 24: point = 2, n_alt = 5
   Insn 23: point = 3, n_alt = 3
   Insn 22: point = 4, n_alt = 3
  BB 2
   Insn 15: point = 5, n_alt = -1
   Insn 14: point = 5, n_alt = 0
   Insn 13: point = 6, n_alt = 4
   Insn 12: point = 8, n_alt = -2
   Insn 11: point = 10, n_alt = 0
   Insn 31: point = 12, n_alt = -2
	Hard reg 1 is preferable by r91 with profit 1000
   Insn 10: point = 14, n_alt = 0
   Insn 30: point = 15, n_alt = -2
	Hard reg 1 is preferable by r91 with profit 1000
	Hard reg 0 is preferable by r91 with profit 1000
   Insn 9: point = 16, n_alt = -2
   Insn 8: point = 18, n_alt = 0
   Insn 7: point = 20, n_alt = 3
   Insn 3: point = 21, n_alt = 5
   Insn 2: point = 21, n_alt = 5
 r82: [17..18]
 r83: [5..16] [0..1]
 r84: [11..12]
 r85: [9..10]
 r86: [7..8]
 r87: [5..6]
 r88: [19..20]
 r89: [2..4]
 r90: [2..3]
 r91: [13..15]
Compressing live ranges: from 21 to 18 - 85%
Ranges after the compression:
 r82: [14..15]
 r83: [4..13] [0..1]
 r84: [10..11]
 r85: [8..9]
 r86: [6..7]
 r87: [4..5]
 r88: [16..17]
 r89: [2..3]
 r90: [2..3]
 r91: [12..13]

********** Assignment #1: **********

	 Assigning to 91 (cl=GENERAL_REGS, orig=84, freq=3000, tfirst=91, tfreq=3000)...
	   Assign 1 to reload r91 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 17
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 7
changing reg in insn 8
changing reg in insn 22
changing reg in insn 24
changing reg in insn 23
changing reg in insn 24
deleting insn with uid = 9.
deleting insn with uid = 31.
deleting insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.


insertVector

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={5d,4u} r1={7d,5u} r2={2d} r4={2d,1u} r5={3d,2u} r6={1d,10u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={5d,1u} r18={1d} r19={1d,1u,1e} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 129{98d,30u,1e} in 16{15 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 83 84 85 86 87 88
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])
        (reg:DI 5 di [ q ])) "queryTAD.c":24:45 66 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [7 vec+0 S8 A64])
        (reg:DI 4 si [ vec ])) "queryTAD.c":24:45 66 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])) "queryTAD.c":25:18 66 {*movdi_internal}
     (nil))
(insn 8 7 30 2 (parallel [
            (set (reg/f:DI 0 ax [orig:82 _5 ] [82])
                (plus:DI (reg/f:DI 0 ax [88])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":25:18 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 30 8 10 2 (set (reg:DI 1 dx [orig:84 _8 ] [84])
        (reg:DI 0 ax [orig:83 _7 ] [83])) "queryTAD.c":25:18 66 {*movdi_internal}
     (nil))
(insn 10 30 11 2 (parallel [
            (set (reg:DI 1 dx [orig:84 _8 ] [84])
                (lshiftrt:DI (reg:DI 1 dx [orig:84 _8 ] [84])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":25:18 566 {*lshrdi3_1}
     (nil))
(insn 11 10 13 2 (parallel [
            (set (reg:DI 1 dx [orig:85 _9 ] [85])
                (plus:DI (reg:DI 1 dx [orig:84 _8 ] [84])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":25:18 191 {*adddi_1}
     (nil))
(insn 13 11 14 2 (set (reg:QI 1 dx [orig:87 _11 ] [87])
        (mem:QI (reg/f:DI 1 dx [orig:86 _10 ] [86]) [10 *_10+0 S1 A8])) "queryTAD.c":25:18 69 {*movqi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:87 _11 ] [87])
            (const_int 0 [0]))) "queryTAD.c":25:18 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "queryTAD.c":25:18 659 {*jcc}
     (nil)
 -> 20)
;;  succ:       4 [100.0% (guessed)] 
;;              3 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 [0.0% (guessed)]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:83 _7 ] [83])) "queryTAD.c":25:18 66 {*movdi_internal}
     (nil))
(call_insn 18 17 19 3 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":25:18 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 19 18 20)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2 [100.0% (guessed)] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 89 90
(code_label 20 19 21 4 7 (nil) [1 uses])
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 q+0 S8 A64])) "queryTAD.c":25:18 66 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg/f:DI 1 dx [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [7 vec+0 S8 A64])) "queryTAD.c":25:18 66 {*movdi_internal}
     (nil))
(insn 24 23 27 4 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 24 [0x18])) [7 q_2(D)->sensorsID+0 S8 A64])
        (reg/f:DI 1 dx [90])) "queryTAD.c":25:18 66 {*movdi_internal}
     (nil))
;;  succ:       5 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 [always]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 27 24 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (const_int 0 [0]) "queryTAD.c":31:1 696 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 29 28 0 NOTE_INSN_DELETED)

;; Function dayToNum (dayToNum, funcdef_no=2, decl_uid=3366, cgraph_uid=3, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 7:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=100 from oldreg=87, assigning class GENERAL_REGS to r100
    7: {r100:DI=r100:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
   58: r100:DI=r86:DI
    Inserting insn reload after:
   59: r87:DI=r100:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 8:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =qm {*setcc_qi}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=17,losers=2 -- refuse
            alt=3: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) Z {*anddi_1}
      Creating newreg=101 from oldreg=92, assigning class GENERAL_REGS to r101
   13: {r101:DI=r101:DI&0x7;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
   60: r101:DI=r86:DI
    Inserting insn reload after:
   61: r92:DI=r101:DI

            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) R  (1) R {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =qm {*setcc_qi}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 17
	 Choosing alt 0 in insn 17:  (0) =qm  (1) %0  (2) qn {*andqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 27:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =*a  (1) *0 {*extendsidi2_rex64}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 3
   Insn 22: point = 0, n_alt = 0
   Insn 21: point = 0, n_alt = -2
  BB 8
   Insn 53: point = 2, n_alt = -1
   Insn 52: point = 2, n_alt = -2
   Insn 48: point = 3, n_alt = -2
   Insn 45: point = 5, n_alt = 0
  BB 6
   Insn 55: point = 8, n_alt = -1
   Insn 37: point = 8, n_alt = 0
  BB 7
   Insn 42: point = 9, n_alt = 0
  BB 5
   Insn 34: point = 10, n_alt = -1
   Insn 33: point = 10, n_alt = 0
   Insn 32: point = 11, n_alt = 4
   Insn 31: point = 13, n_alt = 3
  BB 4
   Insn 29: point = 14, n_alt = -1
   Insn 28: point = 14, n_alt = 0
   Insn 27: point = 15, n_alt = 4
   Insn 26: point = 17, n_alt = 3
  BB 2
   Insn 19: point = 18, n_alt = -1
   Insn 18: point = 18, n_alt = 0
   Insn 17: point = 19, n_alt = 0
   Insn 16: point = 21, n_alt = 0
   Insn 15: point = 22, n_alt = 0
   Insn 14: point = 23, n_alt = 1
   Insn 61: point = 25, n_alt = -2
	Hard reg 4 is preferable by r101 with profit 1000
   Insn 13: point = 27, n_alt = 0
   Insn 60: point = 28, n_alt = -2
	Hard reg 4 is preferable by r101 with profit 1000
	Hard reg 0 is preferable by r101 with profit 1000
   Insn 12: point = 29, n_alt = 0
   Insn 11: point = 30, n_alt = 0
   Insn 10: point = 30, n_alt = 4
   Insn 9: point = 32, n_alt = -2
   Insn 8: point = 34, n_alt = 0
   Insn 59: point = 36, n_alt = -2
	Hard reg 1 is preferable by r100 with profit 1000
   Insn 7: point = 38, n_alt = 0
   Insn 58: point = 39, n_alt = -2
	Hard reg 1 is preferable by r100 with profit 1000
	Hard reg 0 is preferable by r100 with profit 1000
   Insn 6: point = 40, n_alt = 3
   Insn 2: point = 41, n_alt = 5
 r82: [14..15]
 r83: [10..11]
 r84: [6..9]
 r85: [4..5]
 r86: [18..40] [0..1]
 r87: [35..36]
 r88: [33..34]
 r89: [31..32]
 r90: [22..30]
 r91: [20..29]
 r92: [24..25]
 r93: [22..23]
 r94: [20..21]
 r95: [18..19]
 r96: [2..3]
 r97: [16..17]
 r98: [12..13]
 r100: [37..39]
 r101: [26..28]
Compressing live ranges: from 41 to 34 - 82%
Ranges after the compression:
 r82: [12..13]
 r83: [8..9]
 r84: [6..7]
 r85: [4..5]
 r86: [16..33] [0..1]
 r87: [30..31]
 r88: [28..29]
 r89: [26..27]
 r90: [20..25]
 r91: [18..25]
 r92: [22..23]
 r93: [20..21]
 r94: [18..19]
 r95: [16..17]
 r96: [2..3]
 r97: [14..15]
 r98: [10..11]
 r100: [32..33]
 r101: [24..25]

********** Assignment #1: **********

	 Assigning to 100 (cl=GENERAL_REGS, orig=87, freq=3000, tfirst=100, tfreq=3000)...
	   Assign 1 to reload r100 (freq=3000)
	 Assigning to 101 (cl=GENERAL_REGS, orig=92, freq=3000, tfirst=101, tfreq=3000)...
	   Assign 4 to reload r101 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 27
changing reg in insn 28
changing reg in insn 32
changing reg in insn 33
changing reg in insn 42
changing reg in insn 37
changing reg in insn 45
changing reg in insn 45
changing reg in insn 48
changing reg in insn 6
changing reg in insn 21
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 15
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 48
changing reg in insn 52
changing reg in insn 26
changing reg in insn 27
changing reg in insn 31
changing reg in insn 32
deleting insn with uid = 59.
deleting insn with uid = 9.
deleting insn with uid = 61.
deleting insn with uid = 14.
deleting insn with uid = 48.
deleting insn with uid = 52.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.


dayToNum

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={10d,10u} r1={8d,7u} r2={3d,1u} r4={4d,2u} r5={3d,2u} r6={1d,12u} r7={1d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={10d,5u} r18={1d} r19={1d,1u} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 161{112d,49u,0e} in 30{29 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 86 87 88 89 90 91 92 93 94 95
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 s+0 S8 A64])
        (reg:DI 5 di [ s ])) "queryTAD.c":34:26 66 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 58 2 (set (reg:DI 0 ax [orig:86 _10 ] [86])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 s+0 S8 A64])) "queryTAD.c":35:13 66 {*movdi_internal}
     (nil))
(insn 58 6 7 2 (set (reg:DI 1 dx [orig:87 _11 ] [87])
        (reg:DI 0 ax [orig:86 _10 ] [86])) "queryTAD.c":35:13 66 {*movdi_internal}
     (nil))
(insn 7 58 8 2 (parallel [
            (set (reg:DI 1 dx [orig:87 _11 ] [87])
                (lshiftrt:DI (reg:DI 1 dx [orig:87 _11 ] [87])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":35:13 566 {*lshrdi3_1}
     (nil))
(insn 8 7 10 2 (parallel [
            (set (reg:DI 1 dx [orig:88 _12 ] [88])
                (plus:DI (reg:DI 1 dx [orig:87 _11 ] [87])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":35:13 191 {*adddi_1}
     (nil))
(insn 10 8 11 2 (set (reg:QI 1 dx [orig:90 _14 ] [90])
        (mem:QI (reg/f:DI 1 dx [orig:89 _13 ] [89]) [10 *_13+0 S1 A8])) "queryTAD.c":35:13 69 {*movqi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:90 _14 ] [90])
            (const_int 0 [0]))) "queryTAD.c":35:13 5 {*cmpqi_ccno_1}
     (nil))
(insn 12 11 60 2 (set (reg:QI 2 cx [orig:91 _15 ] [91])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "queryTAD.c":35:13 655 {*setcc_qi}
     (nil))
(insn 60 12 13 2 (set (reg:DI 4 si [orig:92 _16 ] [92])
        (reg:DI 0 ax [orig:86 _10 ] [86])) "queryTAD.c":35:13 66 {*movdi_internal}
     (nil))
(insn 13 60 15 2 (parallel [
            (set (reg:DI 4 si [orig:92 _16 ] [92])
                (and:DI (reg:DI 4 si [orig:92 _16 ] [92])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":35:13 391 {*anddi_1}
     (nil))
(insn 15 13 16 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:QI 4 si [orig:93 _17 ] [93])
            (reg:QI 1 dx [orig:90 _14 ] [90]))) "queryTAD.c":35:13 9 {*cmpqi_1}
     (nil))
(insn 16 15 17 2 (set (reg:QI 1 dx [orig:94 _18 ] [94])
        (ge:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "queryTAD.c":35:13 655 {*setcc_qi}
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg:QI 1 dx [orig:95 _19 ] [95])
                (and:QI (reg:QI 1 dx [orig:94 _18 ] [94])
                    (reg:QI 2 cx [orig:91 _15 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":35:13 396 {*andqi_1}
     (nil))
(insn 18 17 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:95 _19 ] [95])
            (const_int 0 [0]))) "queryTAD.c":35:13 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 19 18 20 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) "queryTAD.c":35:13 659 {*jcc}
     (nil)
 -> 24)
;;  succ:       4 [100.0% (guessed)] 
;;              3 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 [0.0% (guessed)]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:86 _10 ] [86])) "queryTAD.c":35:13 66 {*movdi_internal}
     (nil))
(call_insn 22 21 23 3 (call (mem:QI (symbol_ref:DI ("__asan_report_load1") [flags 0x41]  <function_decl 0x7fc58eea5600 __builtin___asan_report_load1>) [0 __builtin___asan_report_load1 S1 A8])
        (const_int 0 [0])) "queryTAD.c":35:13 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 23 22 24)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2 [100.0% (guessed)] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 97
(code_label 24 23 25 4 9 (nil) [1 uses])
(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 4 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 s+0 S8 A64])) "queryTAD.c":35:13 66 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:QI 0 ax [orig:82 _1 ] [82])
        (mem:QI (reg/f:DI 0 ax [97]) [0 *s_5(D)+0 S1 A8])) "queryTAD.c":35:13 69 {*movqi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:82 _1 ] [82])
            (const_int 83 [0x53]))) "queryTAD.c":35:24 9 {*cmpqi_1}
     (nil))
(jump_insn 29 28 30 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) "queryTAD.c":35:24 659 {*jcc}
     (nil)
 -> 35)
;;  succ:       6
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 83 98
(note 30 29 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 5 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 s+0 S8 A64])) "queryTAD.c":35:28 66 {*movdi_internal}
     (nil))
(insn 32 31 33 5 (set (reg:QI 0 ax [orig:83 _2 ] [83])
        (mem:QI (reg/f:DI 0 ax [98]) [0 *s_5(D)+0 S1 A8])) "queryTAD.c":35:28 69 {*movqi_internal}
     (nil))
(insn 33 32 34 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:83 _2 ] [83])
            (const_int 115 [0x73]))) "queryTAD.c":35:24 9 {*cmpqi_1}
     (nil))
(jump_insn 34 33 35 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) "queryTAD.c":35:24 659 {*jcc}
     (nil)
 -> 40)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 84
(code_label 35 34 36 6 10 (nil) [1 uses])
(note 36 35 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 55 6 (set (reg:SI 0 ax [orig:84 iftmp.0_3 ] [84])
        (const_int 1 [0x1])) "queryTAD.c":35:24 67 {*movsi_internal}
     (nil))
(jump_insn 55 37 56 6 (set (pc)
        (label_ref 43)) "queryTAD.c":35:24 660 {jump}
     (nil)
 -> 43)
;;  succ:       8 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84

(barrier 56 55 40)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 84
(code_label 40 56 41 7 11 (nil) [1 uses])
(note 41 40 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 7 (set (reg:SI 0 ax [orig:84 iftmp.0_3 ] [84])
        (const_int 0 [0])) "queryTAD.c":35:24 67 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              6 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; lr  def 	 0 [ax] 85 96
(code_label 43 42 44 8 12 (nil) [1 uses])
(note 44 43 45 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 53 8 (set (reg:DI 0 ax [orig:85 _8 ] [85])
        (sign_extend:DI (reg:SI 0 ax [orig:84 iftmp.0_3 ] [84]))) "queryTAD.c":35:24 128 {*extendsidi2_rex64}
     (nil))
(insn 53 45 57 8 (use (reg/i:DI 0 ax)) "queryTAD.c":36:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 57 53 0 NOTE_INSN_DELETED)

;; Function monthToNum (monthToNum, funcdef_no=3, decl_uid=3368, cgraph_uid=4, symbol_order=3)

      Creating newreg=205
Removing SCRATCH in insn #37 (nop 2)
rescanning insn with uid = 37.
      Creating newreg=206
Removing SCRATCH in insn #301 (nop 3)
rescanning insn with uid = 301.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=272, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=224, prev_offset=0)
Can eliminate 19 to 6 (offset=-32, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 35:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 2:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) ?mr {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 6:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpdi_ccno_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 12:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 19:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=207 from oldreg=170, assigning class GENERAL_REGS to r207
   19: {r207:DI=r207:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  324: r207:DI=r165:DI
    Inserting insn reload after:
  325: r170:DI=r207:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =m  (1) m  (2) =&r {stack_protect_set_di}
      Change to class INDEX_REGS for r205
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 40:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 42:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=208 from oldreg=100, assigning class GENERAL_REGS to r208
   42: {r208:DI=r208:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  326: r208:DI=r99:DI
    Inserting insn reload after:
  327: r100:DI=r208:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 45:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 54:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 55:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 56:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 59:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=209 from oldreg=105, assigning class GENERAL_REGS to r209
   59: {r209:DI=r209:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  328: r209:DI=r104:DI
    Inserting insn reload after:
  329: r105:DI=r209:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 62:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 71:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 72:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 73:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 74:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 76:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=210 from oldreg=110, assigning class GENERAL_REGS to r210
   76: {r210:DI=r210:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  330: r210:DI=r109:DI
    Inserting insn reload after:
  331: r110:DI=r210:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 79:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 88:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 89:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 90:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 91:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 93:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=211 from oldreg=115, assigning class GENERAL_REGS to r211
   93: {r211:DI=r211:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  332: r211:DI=r114:DI
    Inserting insn reload after:
  333: r115:DI=r211:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 96:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 105:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 106:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 107:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 108:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 110:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=212 from oldreg=120, assigning class GENERAL_REGS to r212
  110: {r212:DI=r212:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  334: r212:DI=r119:DI
    Inserting insn reload after:
  335: r120:DI=r212:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 113:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 122:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 123:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 124:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 127:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=213 from oldreg=125, assigning class GENERAL_REGS to r213
  127: {r213:DI=r213:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  336: r213:DI=r124:DI
    Inserting insn reload after:
  337: r125:DI=r213:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 128:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 130:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 139:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 140:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 141:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 142:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 144:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=214 from oldreg=130, assigning class GENERAL_REGS to r214
  144: {r214:DI=r214:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  338: r214:DI=r129:DI
    Inserting insn reload after:
  339: r130:DI=r214:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 145:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 147:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 156:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 157:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 158:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 159:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 161:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=215 from oldreg=135, assigning class GENERAL_REGS to r215
  161: {r215:DI=r215:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  340: r215:DI=r134:DI
    Inserting insn reload after:
  341: r135:DI=r215:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 162:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 164:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 173:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 174:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 175:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 176:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 178:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=216 from oldreg=140, assigning class GENERAL_REGS to r216
  178: {r216:DI=r216:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  342: r216:DI=r139:DI
    Inserting insn reload after:
  343: r140:DI=r216:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 181:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 190:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 191:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 192:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 193:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 195:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=217 from oldreg=145, assigning class GENERAL_REGS to r217
  195: {r217:DI=r217:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  344: r217:DI=r144:DI
    Inserting insn reload after:
  345: r145:DI=r217:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 196:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 198:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 207:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 208:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 209:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 210:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 212:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=218 from oldreg=150, assigning class GENERAL_REGS to r218
  212: {r218:DI=r218:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  346: r218:DI=r149:DI
    Inserting insn reload after:
  347: r150:DI=r218:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 213:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 215:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 224:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 225:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 226:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 227:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 229:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=219 from oldreg=155, assigning class GENERAL_REGS to r219
  229: {r219:DI=r219:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  348: r219:DI=r154:DI
    Inserting insn reload after:
  349: r155:DI=r219:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 230:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 232:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 241:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 242:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 243:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 247:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 249:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 253:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=220 from oldreg=160, assigning class GENERAL_REGS to r220
  253: {r220:DI=r220:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  350: r220:DI=r159:DI
    Inserting insn reload after:
  351: r160:DI=r220:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 254:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 256:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 267:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 268:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 277:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 283:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 289:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 292:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 24:  (0) m  (1) re {*movdi_internal}
            Staticly defined alt reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=3 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=15,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
	 Choosing alt 1 in insn 25:  (0) o  (1) re {*movti_internal}
      Creating newreg=221, assigning class GENERAL_REGS to r221
   25: [r170:DI+0x7fff8000]=r221:TI
    Inserting insn reload before:
  352: r221:TI=<0xf5f5f5f5f5f5f5f5,0xf5f5f5f5f5f5f5f5>

            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) =!r  (1) riFo {*movti_internal}
      Change to class INDEX_REGS for r221
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 28:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) m  (1) re {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (1) m  (2) m  (3) =&r {stack_protect_test_di}
      Change to class INDEX_REGS for r206
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32 33
EBB 34
EBB 35 36
EBB 37 38
EBB 39
EBB 40 41
EBB 42

********** Pseudo live ranges #1: **********

  BB 6
   Insn 50: point = 0, n_alt = 0
   Insn 49: point = 0, n_alt = -2
  BB 8
   Insn 67: point = 2, n_alt = 0
   Insn 66: point = 2, n_alt = -2
  BB 10
   Insn 84: point = 4, n_alt = 0
   Insn 83: point = 4, n_alt = -2
  BB 12
   Insn 101: point = 6, n_alt = 0
   Insn 100: point = 6, n_alt = -2
  BB 14
   Insn 118: point = 8, n_alt = 0
   Insn 117: point = 8, n_alt = -2
  BB 16
   Insn 135: point = 10, n_alt = 0
   Insn 134: point = 10, n_alt = -2
  BB 18
   Insn 152: point = 12, n_alt = 0
   Insn 151: point = 12, n_alt = -2
  BB 20
   Insn 169: point = 14, n_alt = 0
   Insn 168: point = 14, n_alt = -2
  BB 22
   Insn 186: point = 16, n_alt = 0
   Insn 185: point = 16, n_alt = -2
  BB 24
   Insn 203: point = 18, n_alt = 0
   Insn 202: point = 18, n_alt = -2
  BB 26
   Insn 220: point = 20, n_alt = 0
   Insn 219: point = 20, n_alt = -2
  BB 28
   Insn 237: point = 22, n_alt = 0
   Insn 236: point = 22, n_alt = -2
  BB 31
   Insn 261: point = 24, n_alt = 0
   Insn 260: point = 24, n_alt = -2
  BB 41
   Insn 303: point = 26, n_alt = 0
  BB 42
   Insn 307: point = 26, n_alt = -1
   Insn 306: point = 26, n_alt = -2
  BB 40
   Insn 302: point = 28, n_alt = -1
   Insn 301: point = 28, n_alt = 0
  BB 38
   Insn 321: point = 31, n_alt = -1
   Insn 28: point = 31, n_alt = 8
   Insn 27: point = 32, n_alt = 3
   Insn 26: point = 34, n_alt = 1
   Insn 25: point = 35, n_alt = 1
   Insn 352: point = 36, n_alt = 0
   Insn 24: point = 37, n_alt = 5
  BB 39
   Insn 33: point = 38, n_alt = 1
   Insn 32: point = 39, n_alt = 1
  BB 37
   Insn 23: point = 40, n_alt = -1
   Insn 22: point = 40, n_alt = 0
   Insn 297: point = 41, n_alt = -2
  BB 33
   Insn 319: point = 44, n_alt = -1
   Insn 278: point = 44, n_alt = 0
   Insn 277: point = 46, n_alt = 0
   Insn 276: point = 48, n_alt = 0
  BB 36
   Insn 292: point = 50, n_alt = 3
  BB 35
   Insn 290: point = 52, n_alt = -1
   Insn 289: point = 52, n_alt = 0
  BB 29
   Insn 317: point = 53, n_alt = -1
   Insn 243: point = 53, n_alt = 1
   Insn 242: point = 53, n_alt = 5
   Insn 241: point = 54, n_alt = 4
  BB 27
   Insn 234: point = 56, n_alt = -1
   Insn 233: point = 56, n_alt = 0
   Insn 232: point = 57, n_alt = 4
   Insn 231: point = 59, n_alt = -2
   Insn 230: point = 61, n_alt = 0
   Insn 349: point = 63, n_alt = -2
	Hard reg 1 is preferable by r219 with profit 1000
   Insn 229: point = 65, n_alt = 0
   Insn 348: point = 66, n_alt = -2
	Hard reg 1 is preferable by r219 with profit 1000
	Hard reg 0 is preferable by r219 with profit 1000
   Insn 228: point = 67, n_alt = -2
   Insn 227: point = 69, n_alt = 0
   Insn 226: point = 71, n_alt = 3
   Insn 225: point = 72, n_alt = 5
   Insn 224: point = 73, n_alt = 4
  BB 25
   Insn 217: point = 75, n_alt = -1
   Insn 216: point = 75, n_alt = 0
   Insn 215: point = 76, n_alt = 4
   Insn 214: point = 78, n_alt = -2
   Insn 213: point = 80, n_alt = 0
   Insn 347: point = 82, n_alt = -2
	Hard reg 1 is preferable by r218 with profit 1000
   Insn 212: point = 84, n_alt = 0
   Insn 346: point = 85, n_alt = -2
	Hard reg 1 is preferable by r218 with profit 1000
	Hard reg 0 is preferable by r218 with profit 1000
   Insn 211: point = 86, n_alt = -2
   Insn 210: point = 88, n_alt = 0
   Insn 209: point = 90, n_alt = 3
   Insn 208: point = 91, n_alt = 5
   Insn 207: point = 92, n_alt = 4
  BB 23
   Insn 200: point = 94, n_alt = -1
   Insn 199: point = 94, n_alt = 0
   Insn 198: point = 95, n_alt = 4
   Insn 197: point = 97, n_alt = -2
   Insn 196: point = 99, n_alt = 0
   Insn 345: point = 101, n_alt = -2
	Hard reg 1 is preferable by r217 with profit 1000
   Insn 195: point = 103, n_alt = 0
   Insn 344: point = 104, n_alt = -2
	Hard reg 1 is preferable by r217 with profit 1000
	Hard reg 0 is preferable by r217 with profit 1000
   Insn 194: point = 105, n_alt = -2
   Insn 193: point = 107, n_alt = 0
   Insn 192: point = 109, n_alt = 3
   Insn 191: point = 110, n_alt = 5
   Insn 190: point = 111, n_alt = 4
  BB 21
   Insn 183: point = 113, n_alt = -1
   Insn 182: point = 113, n_alt = 0
   Insn 181: point = 114, n_alt = 4
   Insn 180: point = 116, n_alt = -2
   Insn 179: point = 118, n_alt = 0
   Insn 343: point = 120, n_alt = -2
	Hard reg 1 is preferable by r216 with profit 1000
   Insn 178: point = 122, n_alt = 0
   Insn 342: point = 123, n_alt = -2
	Hard reg 1 is preferable by r216 with profit 1000
	Hard reg 0 is preferable by r216 with profit 1000
   Insn 177: point = 124, n_alt = -2
   Insn 176: point = 126, n_alt = 0
   Insn 175: point = 128, n_alt = 3
   Insn 174: point = 129, n_alt = 5
   Insn 173: point = 130, n_alt = 4
  BB 19
   Insn 166: point = 132, n_alt = -1
   Insn 165: point = 132, n_alt = 0
   Insn 164: point = 133, n_alt = 4
   Insn 163: point = 135, n_alt = -2
   Insn 162: point = 137, n_alt = 0
   Insn 341: point = 139, n_alt = -2
	Hard reg 1 is preferable by r215 with profit 1000
   Insn 161: point = 141, n_alt = 0
   Insn 340: point = 142, n_alt = -2
	Hard reg 1 is preferable by r215 with profit 1000
	Hard reg 0 is preferable by r215 with profit 1000
   Insn 160: point = 143, n_alt = -2
   Insn 159: point = 145, n_alt = 0
   Insn 158: point = 147, n_alt = 3
   Insn 157: point = 148, n_alt = 5
   Insn 156: point = 149, n_alt = 4
  BB 17
   Insn 149: point = 151, n_alt = -1
   Insn 148: point = 151, n_alt = 0
   Insn 147: point = 152, n_alt = 4
   Insn 146: point = 154, n_alt = -2
   Insn 145: point = 156, n_alt = 0
   Insn 339: point = 158, n_alt = -2
	Hard reg 1 is preferable by r214 with profit 1000
   Insn 144: point = 160, n_alt = 0
   Insn 338: point = 161, n_alt = -2
	Hard reg 1 is preferable by r214 with profit 1000
	Hard reg 0 is preferable by r214 with profit 1000
   Insn 143: point = 162, n_alt = -2
   Insn 142: point = 164, n_alt = 0
   Insn 141: point = 166, n_alt = 3
   Insn 140: point = 167, n_alt = 5
   Insn 139: point = 168, n_alt = 4
  BB 15
   Insn 132: point = 170, n_alt = -1
   Insn 131: point = 170, n_alt = 0
   Insn 130: point = 171, n_alt = 4
   Insn 129: point = 173, n_alt = -2
   Insn 128: point = 175, n_alt = 0
   Insn 337: point = 177, n_alt = -2
	Hard reg 1 is preferable by r213 with profit 1000
   Insn 127: point = 179, n_alt = 0
   Insn 336: point = 180, n_alt = -2
	Hard reg 1 is preferable by r213 with profit 1000
	Hard reg 0 is preferable by r213 with profit 1000
   Insn 126: point = 181, n_alt = -2
   Insn 125: point = 183, n_alt = 0
   Insn 124: point = 185, n_alt = 3
   Insn 123: point = 186, n_alt = 5
   Insn 122: point = 187, n_alt = 4
  BB 13
   Insn 115: point = 189, n_alt = -1
   Insn 114: point = 189, n_alt = 0
   Insn 113: point = 190, n_alt = 4
   Insn 112: point = 192, n_alt = -2
   Insn 111: point = 194, n_alt = 0
   Insn 335: point = 196, n_alt = -2
	Hard reg 1 is preferable by r212 with profit 1000
   Insn 110: point = 198, n_alt = 0
   Insn 334: point = 199, n_alt = -2
	Hard reg 1 is preferable by r212 with profit 1000
	Hard reg 0 is preferable by r212 with profit 1000
   Insn 109: point = 200, n_alt = -2
   Insn 108: point = 202, n_alt = 0
   Insn 107: point = 204, n_alt = 3
   Insn 106: point = 205, n_alt = 5
   Insn 105: point = 206, n_alt = 4
  BB 11
   Insn 98: point = 208, n_alt = -1
   Insn 97: point = 208, n_alt = 0
   Insn 96: point = 209, n_alt = 4
   Insn 95: point = 211, n_alt = -2
   Insn 94: point = 213, n_alt = 0
   Insn 333: point = 215, n_alt = -2
	Hard reg 1 is preferable by r211 with profit 1000
   Insn 93: point = 217, n_alt = 0
   Insn 332: point = 218, n_alt = -2
	Hard reg 1 is preferable by r211 with profit 1000
	Hard reg 0 is preferable by r211 with profit 1000
   Insn 92: point = 219, n_alt = -2
   Insn 91: point = 221, n_alt = 0
   Insn 90: point = 223, n_alt = 3
   Insn 89: point = 224, n_alt = 5
   Insn 88: point = 225, n_alt = 4
  BB 9
   Insn 81: point = 227, n_alt = -1
   Insn 80: point = 227, n_alt = 0
   Insn 79: point = 228, n_alt = 4
   Insn 78: point = 230, n_alt = -2
   Insn 77: point = 232, n_alt = 0
   Insn 331: point = 234, n_alt = -2
	Hard reg 1 is preferable by r210 with profit 1000
   Insn 76: point = 236, n_alt = 0
   Insn 330: point = 237, n_alt = -2
	Hard reg 1 is preferable by r210 with profit 1000
	Hard reg 0 is preferable by r210 with profit 1000
   Insn 75: point = 238, n_alt = -2
   Insn 74: point = 240, n_alt = 0
   Insn 73: point = 242, n_alt = 3
   Insn 72: point = 243, n_alt = 5
   Insn 71: point = 244, n_alt = 4
  BB 7
   Insn 64: point = 246, n_alt = -1
   Insn 63: point = 246, n_alt = 0
   Insn 62: point = 247, n_alt = 4
   Insn 61: point = 249, n_alt = -2
   Insn 60: point = 251, n_alt = 0
   Insn 329: point = 253, n_alt = -2
	Hard reg 1 is preferable by r209 with profit 1000
   Insn 59: point = 255, n_alt = 0
   Insn 328: point = 256, n_alt = -2
	Hard reg 1 is preferable by r209 with profit 1000
	Hard reg 0 is preferable by r209 with profit 1000
   Insn 58: point = 257, n_alt = -2
   Insn 57: point = 259, n_alt = 0
   Insn 56: point = 261, n_alt = 3
   Insn 55: point = 262, n_alt = 5
   Insn 54: point = 263, n_alt = 4
  BB 5
   Insn 47: point = 265, n_alt = -1
   Insn 46: point = 265, n_alt = 0
   Insn 45: point = 266, n_alt = 4
   Insn 44: point = 268, n_alt = -2
   Insn 43: point = 270, n_alt = 0
   Insn 327: point = 272, n_alt = -2
	Hard reg 1 is preferable by r208 with profit 1000
   Insn 42: point = 274, n_alt = 0
   Insn 326: point = 275, n_alt = -2
	Hard reg 1 is preferable by r208 with profit 1000
	Hard reg 0 is preferable by r208 with profit 1000
   Insn 41: point = 276, n_alt = -2
   Insn 40: point = 278, n_alt = 3
   Insn 37: point = 279, n_alt = 0
   Insn 21: point = 281, n_alt = 1
   Insn 20: point = 281, n_alt = 1
   Insn 325: point = 281, n_alt = -2
	Hard reg 41 is preferable by r207 with profit 1000
   Insn 19: point = 283, n_alt = 0
   Insn 324: point = 284, n_alt = -2
	Hard reg 41 is preferable by r207 with profit 1000
	Hard reg 40 is preferable by r207 with profit 1000
   Insn 18: point = 285, n_alt = 5
   Insn 17: point = 286, n_alt = 4
   Insn 16: point = 287, n_alt = 5
   Insn 15: point = 288, n_alt = 4
   Insn 14: point = 289, n_alt = 5
   Insn 13: point = 289, n_alt = -2
   Insn 12: point = 291, n_alt = 3
  BB 4
   Insn 10: point = 293, n_alt = -2
  BB 3
   Insn 9: point = 295, n_alt = -1
   Insn 8: point = 295, n_alt = 0
   Insn 7: point = 295, n_alt = 0
   Insn 6: point = 295, n_alt = 2
  BB 2
   Insn 5: point = 296, n_alt = -1
   Insn 4: point = 296, n_alt = 1
   Insn 3: point = 296, n_alt = -2
   Insn 2: point = 297, n_alt = 3
   Insn 35: point = 298, n_alt = 5
  BB 34
   Insn 283: point = 298, n_alt = 1
  BB 32
   Insn 274: point = 299, n_alt = -1
   Insn 273: point = 299, n_alt = 0
   Insn 272: point = 300, n_alt = -2
   Insn 271: point = 301, n_alt = 0
   Insn 270: point = 301, n_alt = -2
   Insn 269: point = 302, n_alt = -2
   Insn 268: point = 303, n_alt = 3
   Insn 267: point = 304, n_alt = 3
   Insn 266: point = 306, n_alt = 0
   Insn 265: point = 308, n_alt = 0
  BB 30
   Insn 258: point = 310, n_alt = -1
   Insn 257: point = 310, n_alt = 0
   Insn 256: point = 311, n_alt = 4
   Insn 255: point = 313, n_alt = -2
   Insn 254: point = 315, n_alt = 0
   Insn 351: point = 317, n_alt = -2
	Hard reg 1 is preferable by r220 with profit 1000
   Insn 253: point = 319, n_alt = 0
   Insn 350: point = 320, n_alt = -2
	Hard reg 1 is preferable by r220 with profit 1000
	Hard reg 0 is preferable by r220 with profit 1000
   Insn 252: point = 321, n_alt = -2
   Insn 251: point = 323, n_alt = 0
   Insn 250: point = 325, n_alt = 0
   Insn 249: point = 327, n_alt = 1
   Insn 248: point = 329, n_alt = 0
   Insn 247: point = 330, n_alt = 3
 r82: [302..304]
 r83: [299..300]
 r84: [45..46]
 r85: [50..50] [42..44]
 r86: [277..278]
 r87: [258..259]
 r88: [239..240]
 r89: [220..221]
 r90: [201..202]
 r91: [182..183]
 r92: [163..164]
 r93: [144..145]
 r94: [125..126]
 r95: [106..107]
 r96: [87..88]
 r97: [68..69]
 r98: [322..323]
 r99: [265..276] [0..1]
 r100: [271..272]
 r101: [269..270]
 r102: [267..268]
 r103: [265..266]
 r104: [246..257] [2..3]
 r105: [252..253]
 r106: [250..251]
 r107: [248..249]
 r108: [246..247]
 r109: [227..238] [4..5]
 r110: [233..234]
 r111: [231..232]
 r112: [229..230]
 r113: [227..228]
 r114: [208..219] [6..7]
 r115: [214..215]
 r116: [212..213]
 r117: [210..211]
 r118: [208..209]
 r119: [189..200] [8..9]
 r120: [195..196]
 r121: [193..194]
 r122: [191..192]
 r123: [189..190]
 r124: [170..181] [10..11]
 r125: [176..177]
 r126: [174..175]
 r127: [172..173]
 r128: [170..171]
 r129: [151..162] [12..13]
 r130: [157..158]
 r131: [155..156]
 r132: [153..154]
 r133: [151..152]
 r134: [132..143] [14..15]
 r135: [138..139]
 r136: [136..137]
 r137: [134..135]
 r138: [132..133]
 r139: [113..124] [16..17]
 r140: [119..120]
 r141: [117..118]
 r142: [115..116]
 r143: [113..114]
 r144: [94..105] [18..19]
 r145: [100..101]
 r146: [98..99]
 r147: [96..97]
 r148: [94..95]
 r149: [75..86] [20..21]
 r150: [81..82]
 r151: [79..80]
 r152: [77..78]
 r153: [75..76]
 r154: [56..67] [22..23]
 r155: [62..63]
 r156: [60..61]
 r157: [58..59]
 r158: [56..57]
 r159: [310..321] [24..25]
 r160: [316..317]
 r161: [314..315]
 r162: [312..313]
 r163: [310..311]
 r164: [298..331] [52..289]
 r165: [295..331] [40..293] [33..37]
 r166: [298..331] [40..296]
 r167: [290..291]
 r168: [287..288]
 r169: [285..286]
 r170: [298..331] [34..281]
 r171: [31..32]
 r172: [26..41]
 r173: [262..263]
 r174: [260..261]
 r175: [243..244]
 r176: [241..242]
 r177: [224..225]
 r178: [222..223]
 r179: [205..206]
 r180: [203..204]
 r181: [186..187]
 r182: [184..185]
 r183: [167..168]
 r184: [165..166]
 r185: [148..149]
 r186: [146..147]
 r187: [129..130]
 r188: [127..128]
 r189: [110..111]
 r190: [108..109]
 r191: [91..92]
 r192: [89..90]
 r193: [72..73]
 r194: [70..71]
 r195: [53..54]
 r196: [324..330]
 r197: [326..327]
 r198: [328..329]
 r199: [324..325]
 r200: [305..306]
 r201: [307..308]
 r202: [301..303]
 r203: [47..48]
 r205: [279..280]
 r206: [28..29]
 r207: [282..284]
 r208: [273..275]
 r209: [254..256]
 r210: [235..237]
 r211: [216..218]
 r212: [197..199]
 r213: [178..180]
 r214: [159..161]
 r215: [140..142]
 r216: [121..123]
 r217: [102..104]
 r218: [83..85]
 r219: [64..66]
 r220: [318..320]
 r221: [35..36]
Compressing live ranges: from 332 to 269 - 81%
Ranges after the compression:
 r82: [245..246]
 r83: [243..244]
 r84: [36..37]
 r85: [40..40] [34..35]
 r86: [229..230]
 r87: [213..214]
 r88: [197..198]
 r89: [181..182]
 r90: [165..166]
 r91: [149..150]
 r92: [133..134]
 r93: [117..118]
 r94: [101..102]
 r95: [85..86]
 r96: [69..70]
 r97: [53..54]
 r98: [261..262]
 r99: [219..228] [0..1]
 r100: [225..226]
 r101: [223..224]
 r102: [221..222]
 r103: [219..220]
 r104: [203..212] [2..3]
 r105: [209..210]
 r106: [207..208]
 r107: [205..206]
 r108: [203..204]
 r109: [187..196] [4..5]
 r110: [193..194]
 r111: [191..192]
 r112: [189..190]
 r113: [187..188]
 r114: [171..180] [6..7]
 r115: [177..178]
 r116: [175..176]
 r117: [173..174]
 r118: [171..172]
 r119: [155..164] [8..9]
 r120: [161..162]
 r121: [159..160]
 r122: [157..158]
 r123: [155..156]
 r124: [139..148] [10..11]
 r125: [145..146]
 r126: [143..144]
 r127: [141..142]
 r128: [139..140]
 r129: [123..132] [12..13]
 r130: [129..130]
 r131: [127..128]
 r132: [125..126]
 r133: [123..124]
 r134: [107..116] [14..15]
 r135: [113..114]
 r136: [111..112]
 r137: [109..110]
 r138: [107..108]
 r139: [91..100] [16..17]
 r140: [97..98]
 r141: [95..96]
 r142: [93..94]
 r143: [91..92]
 r144: [75..84] [18..19]
 r145: [81..82]
 r146: [79..80]
 r147: [77..78]
 r148: [75..76]
 r149: [59..68] [20..21]
 r150: [65..66]
 r151: [63..64]
 r152: [61..62]
 r153: [59..60]
 r154: [43..52] [22..23]
 r155: [49..50]
 r156: [47..48]
 r157: [45..46]
 r158: [43..44]
 r159: [251..260] [24..25]
 r160: [257..258]
 r161: [255..256]
 r162: [253..254]
 r163: [251..252]
 r164: [243..268] [41..238]
 r165: [30..268]
 r166: [32..268]
 r167: [239..240]
 r168: [237..238]
 r169: [235..236]
 r170: [243..268] [30..232]
 r171: [28..29]
 r172: [26..33]
 r173: [217..218]
 r174: [215..216]
 r175: [201..202]
 r176: [199..200]
 r177: [185..186]
 r178: [183..184]
 r179: [169..170]
 r180: [167..168]
 r181: [153..154]
 r182: [151..152]
 r183: [137..138]
 r184: [135..136]
 r185: [121..122]
 r186: [119..120]
 r187: [105..106]
 r188: [103..104]
 r189: [89..90]
 r190: [87..88]
 r191: [73..74]
 r192: [71..72]
 r193: [57..58]
 r194: [55..56]
 r195: [41..42]
 r196: [263..268]
 r197: [265..266]
 r198: [267..268]
 r199: [263..264]
 r200: [247..248]
 r201: [249..250]
 r202: [245..246]
 r203: [38..39]
 r205: [231..232]
 r206: [26..27]
 r207: [233..234]
 r208: [227..228]
 r209: [211..212]
 r210: [195..196]
 r211: [179..180]
 r212: [163..164]
 r213: [147..148]
 r214: [131..132]
 r215: [115..116]
 r216: [99..100]
 r217: [83..84]
 r218: [67..68]
 r219: [51..52]
 r220: [259..260]
 r221: [30..31]

********** Assignment #1: **********

	 Assigning to 221 (cl=INDEX_REGS, orig=221, freq=2000, tfirst=221, tfreq=2000)...
	   Assign 2 to reload r221 (freq=2000)
	 Assigning to 207 (cl=GENERAL_REGS, orig=170, freq=3000, tfirst=207, tfreq=3000)...
	   Assign 41 to reload r207 (freq=3000)
	 Assigning to 208 (cl=GENERAL_REGS, orig=100, freq=3000, tfirst=208, tfreq=3000)...
	   Assign 1 to reload r208 (freq=3000)
	 Assigning to 209 (cl=GENERAL_REGS, orig=105, freq=3000, tfirst=209, tfreq=3000)...
	   Assign 1 to reload r209 (freq=3000)
	 Assigning to 210 (cl=GENERAL_REGS, orig=110, freq=3000, tfirst=210, tfreq=3000)...
	   Assign 1 to reload r210 (freq=3000)
	 Assigning to 211 (cl=GENERAL_REGS, orig=115, freq=3000, tfirst=211, tfreq=3000)...
	   Assign 1 to reload r211 (freq=3000)
	 Assigning to 212 (cl=GENERAL_REGS, orig=120, freq=3000, tfirst=212, tfreq=3000)...
	   Assign 1 to reload r212 (freq=3000)
	 Assigning to 213 (cl=GENERAL_REGS, orig=125, freq=3000, tfirst=213, tfreq=3000)...
	   Assign 1 to reload r213 (freq=3000)
	 Assigning to 214 (cl=GENERAL_REGS, orig=130, freq=3000, tfirst=214, tfreq=3000)...
	   Assign 1 to reload r214 (freq=3000)
	 Assigning to 215 (cl=GENERAL_REGS, orig=135, freq=3000, tfirst=215, tfreq=3000)...
	   Assign 1 to reload r215 (freq=3000)
	 Assigning to 216 (cl=GENERAL_REGS, orig=140, freq=3000, tfirst=216, tfreq=3000)...
	   Assign 1 to reload r216 (freq=3000)
	 Assigning to 217 (cl=GENERAL_REGS, orig=145, freq=3000, tfirst=217, tfreq=3000)...
	   Assign 1 to reload r217 (freq=3000)
	 Assigning to 218 (cl=GENERAL_REGS, orig=150, freq=3000, tfirst=218, tfreq=3000)...
	   Assign 1 to reload r218 (freq=3000)
	 Assigning to 219 (cl=GENERAL_REGS, orig=155, freq=3000, tfirst=219, tfreq=3000)...
	   Assign 1 to reload r219 (freq=3000)
	 Assigning to 220 (cl=GENERAL_REGS, orig=160, freq=3000, tfirst=220, tfreq=3000)...
	   Assign 1 to reload r220 (freq=3000)
	 Assigning to 205 (cl=INDEX_REGS, orig=205, freq=1000, tfirst=205, tfreq=1000)...
	   Assign 0 to reload r205 (freq=1000)
	 Assigning to 206 (cl=INDEX_REGS, orig=206, freq=1000, tfirst=206, tfreq=1000)...
	   Assign 0 to reload r206 (freq=1000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=272, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=224, prev_offset=0)
Can eliminate 19 to 6 (offset=-32, prev_offset=-32)
changing reg in insn 267
changing reg in insn 269
changing reg in insn 272
changing reg in insn 273
changing reg in insn 277
changing reg in insn 278
changing reg in insn 292
changing reg in insn 278
changing reg in insn 297
changing reg in insn 40
changing reg in insn 41
changing reg in insn 57
changing reg in insn 58
changing reg in insn 74
changing reg in insn 75
changing reg in insn 91
changing reg in insn 92
changing reg in insn 108
changing reg in insn 109
changing reg in insn 125
changing reg in insn 126
changing reg in insn 142
changing reg in insn 143
changing reg in insn 159
changing reg in insn 160
changing reg in insn 176
changing reg in insn 177
changing reg in insn 193
changing reg in insn 194
changing reg in insn 210
changing reg in insn 211
changing reg in insn 227
changing reg in insn 228
changing reg in insn 251
changing reg in insn 252
changing reg in insn 41
changing reg in insn 49
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 58
changing reg in insn 66
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 63
changing reg in insn 75
changing reg in insn 83
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 92
changing reg in insn 100
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 109
changing reg in insn 117
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 126
changing reg in insn 134
changing reg in insn 128
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 131
changing reg in insn 143
changing reg in insn 151
changing reg in insn 145
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 148
changing reg in insn 160
changing reg in insn 168
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 165
changing reg in insn 177
changing reg in insn 185
changing reg in insn 179
changing reg in insn 179
changing reg in insn 180
changing reg in insn 180
changing reg in insn 181
changing reg in insn 181
changing reg in insn 182
changing reg in insn 194
changing reg in insn 202
changing reg in insn 196
changing reg in insn 196
changing reg in insn 197
changing reg in insn 197
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 211
changing reg in insn 219
changing reg in insn 213
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 215
changing reg in insn 215
changing reg in insn 216
changing reg in insn 228
changing reg in insn 236
changing reg in insn 230
changing reg in insn 230
changing reg in insn 231
changing reg in insn 231
changing reg in insn 232
changing reg in insn 232
changing reg in insn 233
changing reg in insn 252
changing reg in insn 260
changing reg in insn 254
changing reg in insn 254
changing reg in insn 255
changing reg in insn 255
changing reg in insn 256
changing reg in insn 256
changing reg in insn 257
changing reg in insn 13
changing reg in insn 267
changing reg in insn 247
changing reg in insn 242
changing reg in insn 226
changing reg in insn 225
changing reg in insn 209
changing reg in insn 208
changing reg in insn 192
changing reg in insn 191
changing reg in insn 175
changing reg in insn 174
changing reg in insn 158
changing reg in insn 157
changing reg in insn 141
changing reg in insn 140
changing reg in insn 124
changing reg in insn 123
changing reg in insn 107
changing reg in insn 106
changing reg in insn 90
changing reg in insn 89
changing reg in insn 73
changing reg in insn 72
changing reg in insn 56
changing reg in insn 55
changing reg in insn 40
changing reg in insn 10
changing reg in insn 2
changing reg in insn 27
changing reg in insn 24
changing reg in insn 22
changing reg in insn 18
changing reg in insn 16
changing reg in insn 14
changing reg in insn 12
changing reg in insn 3
changing reg in insn 3
changing reg in insn 22
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 33
changing reg in insn 32
changing reg in insn 26
changing reg in insn 25
changing reg in insn 21
changing reg in insn 20
changing reg in insn 27
changing reg in insn 28
changing reg in insn 297
changing reg in insn 306
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 142
changing reg in insn 156
changing reg in insn 157
changing reg in insn 158
changing reg in insn 159
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 176
changing reg in insn 190
changing reg in insn 191
changing reg in insn 192
changing reg in insn 193
changing reg in insn 207
changing reg in insn 208
changing reg in insn 209
changing reg in insn 210
changing reg in insn 224
changing reg in insn 225
changing reg in insn 226
changing reg in insn 227
changing reg in insn 241
changing reg in insn 242
changing reg in insn 247
changing reg in insn 251
changing reg in insn 249
changing reg in insn 250
changing reg in insn 248
changing reg in insn 249
changing reg in insn 250
changing reg in insn 251
changing reg in insn 266
changing reg in insn 267
changing reg in insn 265
changing reg in insn 266
changing reg in insn 268
changing reg in insn 270
changing reg in insn 276
changing reg in insn 277
changing reg in insn 37
changing reg in insn 301
deleting insn with uid = 325.
deleting insn with uid = 41.
deleting insn with uid = 327.
deleting insn with uid = 44.
deleting insn with uid = 58.
deleting insn with uid = 329.
deleting insn with uid = 61.
deleting insn with uid = 75.
deleting insn with uid = 331.
deleting insn with uid = 78.
deleting insn with uid = 92.
deleting insn with uid = 333.
deleting insn with uid = 95.
deleting insn with uid = 109.
deleting insn with uid = 335.
deleting insn with uid = 112.
deleting insn with uid = 126.
deleting insn with uid = 337.
deleting insn with uid = 129.
deleting insn with uid = 143.
deleting insn with uid = 339.
deleting insn with uid = 146.
deleting insn with uid = 160.
deleting insn with uid = 341.
deleting insn with uid = 163.
deleting insn with uid = 177.
deleting insn with uid = 343.
deleting insn with uid = 180.
deleting insn with uid = 194.
deleting insn with uid = 345.
deleting insn with uid = 197.
deleting insn with uid = 211.
deleting insn with uid = 347.
deleting insn with uid = 214.
deleting insn with uid = 228.
deleting insn with uid = 349.
deleting insn with uid = 231.
deleting insn with uid = 252.
deleting insn with uid = 351.
deleting insn with uid = 255.
deleting insn with uid = 272.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 50.
verify found no changes in insn with uid = 67.
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 101.
verify found no changes in insn with uid = 118.
verify found no changes in insn with uid = 135.
verify found no changes in insn with uid = 152.
verify found no changes in insn with uid = 169.
verify found no changes in insn with uid = 186.
verify found no changes in insn with uid = 203.
verify found no changes in insn with uid = 220.
verify found no changes in insn with uid = 237.
verify found no changes in insn with uid = 261.
verify found no changes in insn with uid = 271.
verify found no changes in insn with uid = 303.


monthToNum

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 40 [r12] 41 [r13] 42 [r14]
;;  ref usage 	r0={68d,65u} r1={74d,57u} r2={18d,1u} r3={2d,27u} r4={18d,1u} r5={32d,16u} r6={1d,54u} r7={1d,58u} r8={16d} r9={16d} r10={16d} r11={16d} r12={16d} r13={16d} r14={16d} r15={16d} r17={93d,19u} r18={16d} r19={1d,1u,1e} r20={17d} r21={17d} r22={17d} r23={17d} r24={17d} r25={17d} r26={17d} r27={17d} r28={16d} r29={16d} r30={16d} r31={16d} r32={16d} r33={16d} r34={16d} r35={16d} r36={17d} r37={17d} r38={16d} r39={16d} r40={2d,9u} r41={2d,7u} r42={1d,1u} r44={16d} r45={16d} r46={16d} r47={16d} r48={16d} r49={16d} r50={16d} r51={16d} r52={16d} r53={16d} r54={16d} r55={16d} r56={16d} r57={16d} r58={16d} r59={16d} r60={16d} r61={16d} r62={16d} r63={16d} r64={16d} r65={16d} r66={16d} r67={16d} r68={16d} r69={16d} r70={16d} r71={16d} r72={16d} r73={16d} r74={16d} r75={16d} 
;;    total ref usage 1616{1299d,316u,1e} in 214{198 regular + 16 call} insns.
(note 1 0 38 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 165 166
(note 38 1 35 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 35 38 2 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -248 [0xffffffffffffff08])) [3 s+0 S8 A64])
        (reg:DI 5 di [ s ])) "queryTAD.c":38:29 66 {*movdi_internal}
     (nil))
(insn 2 35 3 2 (parallel [
            (set (reg:DI 40 r12 [165])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -224 [0xffffffffffffff20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":38:29 191 {*adddi_1}
     (nil))
(insn 3 2 4 2 (set (reg:DI 42 r14 [166])
        (reg:DI 40 r12 [165])) "queryTAD.c":38:29 66 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (symbol_ref:DI ("__asan_option_detect_stack_use_after_return") [flags 0x40]  <var_decl 0x7fc58ec5e900 __asan_option_detect_stack_use_after_return>) [13 __asan_option_detect_stack_use_after_return+0 S4 A32])
            (const_int 0 [0]))) "queryTAD.c":38:29 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 5 4 309 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 11)
            (pc))) "queryTAD.c":38:29 659 {*jcc}
     (nil)
 -> 11)
;;  succ:       5
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165 166

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165 166
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 309 5 6 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 6 309 7 3 (set (reg:DI 5 di)
        (const_int 160 [0xa0])) "queryTAD.c":38:29 66 {*movdi_internal}
     (nil))
(call_insn 7 6 8 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__asan_stack_malloc_2") [flags 0x41]) [0  S1 A8])
            (const_int 0 [0]))) "queryTAD.c":38:29 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
        (nil))
    (expr_list (use (reg:DI 5 di))
        (nil)))
(insn 8 7 9 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax)
            (const_int 0 [0]))) "queryTAD.c":38:29 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 310 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 11)
            (pc))) "queryTAD.c":38:29 659 {*jcc}
     (nil)
 -> 11)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165 166

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 166
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 165
(note 310 9 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 10 310 11 4 (set (reg:DI 40 r12 [165])
        (reg:DI 0 ax)) "queryTAD.c":38:29 66 {*movdi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165 166

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165 166
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165
;; lr  def 	 17 [flags] 86 99 100 101 102 103 164 167 168 169 170
(code_label 11 10 311 5 14 (nil) [2 uses])
(note 311 11 12 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 12 311 13 5 (parallel [
            (set (reg:DI 0 ax [167])
                (plus:DI (reg:DI 40 r12 [165])
                    (const_int 192 [0xc0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":38:29 191 {*adddi_1}
     (nil))
(insn 13 12 14 5 (set (reg:DI 3 bx [164])
        (reg:DI 0 ax [167])) "queryTAD.c":38:29 66 {*movdi_internal}
     (nil))
(insn 14 13 15 5 (set (mem:DI (reg:DI 40 r12 [165]) [0  S8 A8])
        (const_int 1102416563 [0x41b58ab3])) "queryTAD.c":38:29 66 {*movdi_internal}
     (nil))
(insn 15 14 16 5 (set (reg/f:DI 0 ax [168])
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fc58ec5e990 *.LC1>)) "queryTAD.c":38:29 66 {*movdi_internal}
     (nil))
(insn 16 15 17 5 (set (mem:DI (plus:DI (reg:DI 40 r12 [165])
                (const_int 8 [0x8])) [0  S8 A8])
        (reg/f:DI 0 ax [168])) "queryTAD.c":38:29 66 {*movdi_internal}
     (nil))
(insn 17 16 18 5 (set (reg/f:DI 0 ax [169])
        (symbol_ref:DI ("*.LASANPC3") [flags 0x2]  <var_decl 0x7fc58ec5ea20 *.LASANPC3>)) "queryTAD.c":38:29 66 {*movdi_internal}
     (nil))
(insn 18 17 324 5 (set (mem:DI (plus:DI (reg:DI 40 r12 [165])
                (const_int 16 [0x10])) [0  S8 A8])
        (reg/f:DI 0 ax [169])) "queryTAD.c":38:29 66 {*movdi_internal}
     (nil))
(insn 324 18 19 5 (set (reg:DI 41 r13 [170])
        (reg:DI 40 r12 [165])) "queryTAD.c":38:29 66 {*movdi_internal}
     (nil))
(insn 19 324 20 5 (parallel [
            (set (reg:DI 41 r13 [170])
                (lshiftrt:DI (reg:DI 41 r13 [170])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":38:29 566 {*lshrdi3_1}
     (nil))
(insn 20 19 21 5 (set (mem:SI (plus:DI (reg:DI 41 r13 [170])
                (const_int 2147450880 [0x7fff8000])) [10  S4 A8])
        (const_int -235802127 [0xfffffffff1f1f1f1])) "queryTAD.c":38:29 67 {*movsi_internal}
     (nil))
(insn 21 20 36 5 (set (mem:SI (plus:DI (reg:DI 41 r13 [170])
                (const_int 2147450896 [0x7fff8010])) [10  S4 A8])
        (const_int -202116109 [0xfffffffff3f3f3f3])) "queryTAD.c":38:29 67 {*movsi_internal}
     (nil))
(note 36 21 37 5 NOTE_INSN_FUNCTION_BEG)
(insn 37 36 40 5 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [12 D.3543+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (reg:DI 0 ax [205])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":38:29 976 {stack_protect_set_di}
     (nil))
(insn 40 37 326 5 (parallel [
            (set (reg/f:DI 0 ax [orig:86 _26 ] [86])
                (plus:DI (reg:DI 3 bx [164])
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 326 40 42 5 (set (reg:DI 1 dx [orig:100 _55 ] [100])
        (reg:DI 0 ax [orig:99 _54 ] [99])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 42 326 43 5 (parallel [
            (set (reg:DI 1 dx [orig:100 _55 ] [100])
                (lshiftrt:DI (reg:DI 1 dx [orig:100 _55 ] [100])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (nil))
(insn 43 42 45 5 (parallel [
            (set (reg:DI 1 dx [orig:101 _56 ] [101])
                (plus:DI (reg:DI 1 dx [orig:100 _55 ] [100])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 45 43 46 5 (set (reg:QI 1 dx [orig:103 _58 ] [103])
        (mem:QI (reg/f:DI 1 dx [orig:102 _57 ] [102]) [10 *_57+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (nil))
(insn 46 45 47 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:103 _58 ] [103])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 47 46 48 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (nil)
 -> 52)
;;  succ:       7 [100.0% (guessed)] 
;;              6 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 99 164 165 166 170

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 [0.0% (guessed)]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 99
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 99
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 48 47 49 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:99 _54 ] [99])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(call_insn 50 49 51 6 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 51 50 52)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5 [100.0% (guessed)] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 87 104 105 106 107 108 173 174
(code_label 52 51 53 7 18 (nil) [1 uses])
(note 53 52 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 7 (set (reg/f:DI 0 ax [173])
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fc58ec5eab0 *.LC2>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 55 54 56 7 (set (mem/f/c:DI (plus:DI (reg:DI 3 bx [164])
                (const_int -160 [0xffffffffffffff60])) [3 months+0 S8 A64])
        (reg/f:DI 0 ax [173])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 56 55 57 7 (parallel [
            (set (reg:DI 0 ax [174])
                (plus:DI (reg:DI 3 bx [164])
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 57 56 328 7 (parallel [
            (set (reg/f:DI 0 ax [orig:87 _27 ] [87])
                (plus:DI (reg:DI 0 ax [174])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 328 57 59 7 (set (reg:DI 1 dx [orig:105 _60 ] [105])
        (reg:DI 0 ax [orig:104 _59 ] [104])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 59 328 60 7 (parallel [
            (set (reg:DI 1 dx [orig:105 _60 ] [105])
                (lshiftrt:DI (reg:DI 1 dx [orig:105 _60 ] [105])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (nil))
(insn 60 59 62 7 (parallel [
            (set (reg:DI 1 dx [orig:106 _61 ] [106])
                (plus:DI (reg:DI 1 dx [orig:105 _60 ] [105])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 62 60 63 7 (set (reg:QI 1 dx [orig:108 _63 ] [108])
        (mem:QI (reg/f:DI 1 dx [orig:107 _62 ] [107]) [10 *_62+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (nil))
(insn 63 62 64 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:108 _63 ] [108])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 64 63 65 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 69)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (nil)
 -> 69)
;;  succ:       9 [100.0% (guessed)] 
;;              8 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104 164 165 166 170

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 [0.0% (guessed)]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 104
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 65 64 66 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:104 _59 ] [104])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(call_insn 67 66 68 8 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 68 67 69)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       7 [100.0% (guessed)] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 88 109 110 111 112 113 175 176
(code_label 69 68 70 9 19 (nil) [1 uses])
(note 70 69 71 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 9 (set (reg/f:DI 0 ax [175])
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fc58ec5eb40 *.LC3>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 72 71 73 9 (set (mem/f/c:DI (plus:DI (reg:DI 3 bx [164])
                (const_int -152 [0xffffffffffffff68])) [3 months+8 S8 A64])
        (reg/f:DI 0 ax [175])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 73 72 74 9 (parallel [
            (set (reg:DI 0 ax [176])
                (plus:DI (reg:DI 3 bx [164])
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 74 73 330 9 (parallel [
            (set (reg/f:DI 0 ax [orig:88 _28 ] [88])
                (plus:DI (reg:DI 0 ax [176])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 330 74 76 9 (set (reg:DI 1 dx [orig:110 _65 ] [110])
        (reg:DI 0 ax [orig:109 _64 ] [109])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 76 330 77 9 (parallel [
            (set (reg:DI 1 dx [orig:110 _65 ] [110])
                (lshiftrt:DI (reg:DI 1 dx [orig:110 _65 ] [110])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (nil))
(insn 77 76 79 9 (parallel [
            (set (reg:DI 1 dx [orig:111 _66 ] [111])
                (plus:DI (reg:DI 1 dx [orig:110 _65 ] [110])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 79 77 80 9 (set (reg:QI 1 dx [orig:113 _68 ] [113])
        (mem:QI (reg/f:DI 1 dx [orig:112 _67 ] [112]) [10 *_67+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (nil))
(insn 80 79 81 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:113 _68 ] [113])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 81 80 82 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (nil)
 -> 86)
;;  succ:       11 [100.0% (guessed)] 
;;              10 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 109 164 165 166 170

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 [0.0% (guessed)]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 109
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 109
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 82 81 83 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:109 _64 ] [109])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(call_insn 84 83 85 10 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 85 84 86)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       9 [100.0% (guessed)] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 89 114 115 116 117 118 177 178
(code_label 86 85 87 11 20 (nil) [1 uses])
(note 87 86 88 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 11 (set (reg/f:DI 0 ax [177])
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7fc58ec5ebd0 *.LC4>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 89 88 90 11 (set (mem/f/c:DI (plus:DI (reg:DI 3 bx [164])
                (const_int -144 [0xffffffffffffff70])) [3 months+16 S8 A64])
        (reg/f:DI 0 ax [177])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 90 89 91 11 (parallel [
            (set (reg:DI 0 ax [178])
                (plus:DI (reg:DI 3 bx [164])
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 91 90 332 11 (parallel [
            (set (reg/f:DI 0 ax [orig:89 _29 ] [89])
                (plus:DI (reg:DI 0 ax [178])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 332 91 93 11 (set (reg:DI 1 dx [orig:115 _70 ] [115])
        (reg:DI 0 ax [orig:114 _69 ] [114])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 93 332 94 11 (parallel [
            (set (reg:DI 1 dx [orig:115 _70 ] [115])
                (lshiftrt:DI (reg:DI 1 dx [orig:115 _70 ] [115])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (nil))
(insn 94 93 96 11 (parallel [
            (set (reg:DI 1 dx [orig:116 _71 ] [116])
                (plus:DI (reg:DI 1 dx [orig:115 _70 ] [115])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 96 94 97 11 (set (reg:QI 1 dx [orig:118 _73 ] [118])
        (mem:QI (reg/f:DI 1 dx [orig:117 _72 ] [117]) [10 *_72+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (nil))
(insn 97 96 98 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:118 _73 ] [118])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 98 97 99 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 103)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (nil)
 -> 103)
;;  succ:       13 [100.0% (guessed)] 
;;              12 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 114 164 165 166 170

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 [0.0% (guessed)]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 114
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 114
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 99 98 100 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:114 _69 ] [114])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(call_insn 101 100 102 12 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 102 101 103)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       11 [100.0% (guessed)] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 90 119 120 121 122 123 179 180
(code_label 103 102 104 13 21 (nil) [1 uses])
(note 104 103 105 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 13 (set (reg/f:DI 0 ax [179])
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7fc58ec5ec60 *.LC5>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 106 105 107 13 (set (mem/f/c:DI (plus:DI (reg:DI 3 bx [164])
                (const_int -136 [0xffffffffffffff78])) [3 months+24 S8 A64])
        (reg/f:DI 0 ax [179])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 107 106 108 13 (parallel [
            (set (reg:DI 0 ax [180])
                (plus:DI (reg:DI 3 bx [164])
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 108 107 334 13 (parallel [
            (set (reg/f:DI 0 ax [orig:90 _30 ] [90])
                (plus:DI (reg:DI 0 ax [180])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 334 108 110 13 (set (reg:DI 1 dx [orig:120 _75 ] [120])
        (reg:DI 0 ax [orig:119 _74 ] [119])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 110 334 111 13 (parallel [
            (set (reg:DI 1 dx [orig:120 _75 ] [120])
                (lshiftrt:DI (reg:DI 1 dx [orig:120 _75 ] [120])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (nil))
(insn 111 110 113 13 (parallel [
            (set (reg:DI 1 dx [orig:121 _76 ] [121])
                (plus:DI (reg:DI 1 dx [orig:120 _75 ] [120])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 113 111 114 13 (set (reg:QI 1 dx [orig:123 _78 ] [123])
        (mem:QI (reg/f:DI 1 dx [orig:122 _77 ] [122]) [10 *_77+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (nil))
(insn 114 113 115 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:123 _78 ] [123])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 115 114 116 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 120)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (nil)
 -> 120)
;;  succ:       15 [100.0% (guessed)] 
;;              14 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119 164 165 166 170

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 [0.0% (guessed)]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 116 115 117 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:119 _74 ] [119])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(call_insn 118 117 119 14 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 119 118 120)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       13 [100.0% (guessed)] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 91 124 125 126 127 128 181 182
(code_label 120 119 121 15 22 (nil) [1 uses])
(note 121 120 122 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 15 (set (reg/f:DI 0 ax [181])
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7fc58ec5ecf0 *.LC6>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 123 122 124 15 (set (mem/f/c:DI (plus:DI (reg:DI 3 bx [164])
                (const_int -128 [0xffffffffffffff80])) [3 months+32 S8 A64])
        (reg/f:DI 0 ax [181])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 124 123 125 15 (parallel [
            (set (reg:DI 0 ax [182])
                (plus:DI (reg:DI 3 bx [164])
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 125 124 336 15 (parallel [
            (set (reg/f:DI 0 ax [orig:91 _31 ] [91])
                (plus:DI (reg:DI 0 ax [182])
                    (const_int 40 [0x28])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 336 125 127 15 (set (reg:DI 1 dx [orig:125 _80 ] [125])
        (reg:DI 0 ax [orig:124 _79 ] [124])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 127 336 128 15 (parallel [
            (set (reg:DI 1 dx [orig:125 _80 ] [125])
                (lshiftrt:DI (reg:DI 1 dx [orig:125 _80 ] [125])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (nil))
(insn 128 127 130 15 (parallel [
            (set (reg:DI 1 dx [orig:126 _81 ] [126])
                (plus:DI (reg:DI 1 dx [orig:125 _80 ] [125])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 130 128 131 15 (set (reg:QI 1 dx [orig:128 _83 ] [128])
        (mem:QI (reg/f:DI 1 dx [orig:127 _82 ] [127]) [10 *_82+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (nil))
(insn 131 130 132 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:128 _83 ] [128])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 132 131 133 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 137)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (nil)
 -> 137)
;;  succ:       17 [100.0% (guessed)] 
;;              16 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 124 164 165 166 170

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 [0.0% (guessed)]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 124
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 124
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 133 132 134 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 134 133 135 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:124 _79 ] [124])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(call_insn 135 134 136 16 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 136 135 137)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       15 [100.0% (guessed)] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 92 129 130 131 132 133 183 184
(code_label 137 136 138 17 23 (nil) [1 uses])
(note 138 137 139 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 17 (set (reg/f:DI 0 ax [183])
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7fc58ec5ed80 *.LC7>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 140 139 141 17 (set (mem/f/c:DI (plus:DI (reg:DI 3 bx [164])
                (const_int -120 [0xffffffffffffff88])) [3 months+40 S8 A64])
        (reg/f:DI 0 ax [183])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 141 140 142 17 (parallel [
            (set (reg:DI 0 ax [184])
                (plus:DI (reg:DI 3 bx [164])
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 142 141 338 17 (parallel [
            (set (reg/f:DI 0 ax [orig:92 _32 ] [92])
                (plus:DI (reg:DI 0 ax [184])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 338 142 144 17 (set (reg:DI 1 dx [orig:130 _85 ] [130])
        (reg:DI 0 ax [orig:129 _84 ] [129])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 144 338 145 17 (parallel [
            (set (reg:DI 1 dx [orig:130 _85 ] [130])
                (lshiftrt:DI (reg:DI 1 dx [orig:130 _85 ] [130])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (nil))
(insn 145 144 147 17 (parallel [
            (set (reg:DI 1 dx [orig:131 _86 ] [131])
                (plus:DI (reg:DI 1 dx [orig:130 _85 ] [130])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 147 145 148 17 (set (reg:QI 1 dx [orig:133 _88 ] [133])
        (mem:QI (reg/f:DI 1 dx [orig:132 _87 ] [132]) [10 *_87+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (nil))
(insn 148 147 149 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:133 _88 ] [133])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 149 148 150 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 154)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (nil)
 -> 154)
;;  succ:       19 [100.0% (guessed)] 
;;              18 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129 164 165 166 170

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 [0.0% (guessed)]  (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 150 149 151 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 151 150 152 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:129 _84 ] [129])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(call_insn 152 151 153 18 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 153 152 154)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       17 [100.0% (guessed)] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 93 134 135 136 137 138 185 186
(code_label 154 153 155 19 24 (nil) [1 uses])
(note 155 154 156 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 156 155 157 19 (set (reg/f:DI 0 ax [185])
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7fc58ec5ee10 *.LC8>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 157 156 158 19 (set (mem/f/c:DI (plus:DI (reg:DI 3 bx [164])
                (const_int -112 [0xffffffffffffff90])) [3 months+48 S8 A64])
        (reg/f:DI 0 ax [185])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 158 157 159 19 (parallel [
            (set (reg:DI 0 ax [186])
                (plus:DI (reg:DI 3 bx [164])
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 159 158 340 19 (parallel [
            (set (reg/f:DI 0 ax [orig:93 _33 ] [93])
                (plus:DI (reg:DI 0 ax [186])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 340 159 161 19 (set (reg:DI 1 dx [orig:135 _90 ] [135])
        (reg:DI 0 ax [orig:134 _89 ] [134])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 161 340 162 19 (parallel [
            (set (reg:DI 1 dx [orig:135 _90 ] [135])
                (lshiftrt:DI (reg:DI 1 dx [orig:135 _90 ] [135])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (nil))
(insn 162 161 164 19 (parallel [
            (set (reg:DI 1 dx [orig:136 _91 ] [136])
                (plus:DI (reg:DI 1 dx [orig:135 _90 ] [135])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 164 162 165 19 (set (reg:QI 1 dx [orig:138 _93 ] [138])
        (mem:QI (reg/f:DI 1 dx [orig:137 _92 ] [137]) [10 *_92+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (nil))
(insn 165 164 166 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:138 _93 ] [138])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 166 165 167 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 171)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (nil)
 -> 171)
;;  succ:       21 [100.0% (guessed)] 
;;              20 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 134 164 165 166 170

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 [0.0% (guessed)]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 134
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 134
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 167 166 168 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 168 167 169 20 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:134 _89 ] [134])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(call_insn 169 168 170 20 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 170 169 171)
;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       19 [100.0% (guessed)] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 94 139 140 141 142 143 187 188
(code_label 171 170 172 21 25 (nil) [1 uses])
(note 172 171 173 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 173 172 174 21 (set (reg/f:DI 0 ax [187])
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7fc58ec5eea0 *.LC9>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 174 173 175 21 (set (mem/f/c:DI (plus:DI (reg:DI 3 bx [164])
                (const_int -104 [0xffffffffffffff98])) [3 months+56 S8 A64])
        (reg/f:DI 0 ax [187])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 175 174 176 21 (parallel [
            (set (reg:DI 0 ax [188])
                (plus:DI (reg:DI 3 bx [164])
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 176 175 342 21 (parallel [
            (set (reg/f:DI 0 ax [orig:94 _34 ] [94])
                (plus:DI (reg:DI 0 ax [188])
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 342 176 178 21 (set (reg:DI 1 dx [orig:140 _95 ] [140])
        (reg:DI 0 ax [orig:139 _94 ] [139])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 178 342 179 21 (parallel [
            (set (reg:DI 1 dx [orig:140 _95 ] [140])
                (lshiftrt:DI (reg:DI 1 dx [orig:140 _95 ] [140])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (nil))
(insn 179 178 181 21 (parallel [
            (set (reg:DI 1 dx [orig:141 _96 ] [141])
                (plus:DI (reg:DI 1 dx [orig:140 _95 ] [140])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 181 179 182 21 (set (reg:QI 1 dx [orig:143 _98 ] [143])
        (mem:QI (reg/f:DI 1 dx [orig:142 _97 ] [142]) [10 *_97+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (nil))
(insn 182 181 183 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:143 _98 ] [143])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 183 182 184 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 188)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (nil)
 -> 188)
;;  succ:       23 [100.0% (guessed)] 
;;              22 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139 164 165 166 170

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 [0.0% (guessed)]  (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 184 183 185 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 185 184 186 22 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:139 _94 ] [139])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(call_insn 186 185 187 22 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 187 186 188)
;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       21 [100.0% (guessed)] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 95 144 145 146 147 148 189 190
(code_label 188 187 189 23 26 (nil) [1 uses])
(note 189 188 190 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 190 189 191 23 (set (reg/f:DI 0 ax [189])
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7fc58ec5ef30 *.LC10>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 191 190 192 23 (set (mem/f/c:DI (plus:DI (reg:DI 3 bx [164])
                (const_int -96 [0xffffffffffffffa0])) [3 months+64 S8 A64])
        (reg/f:DI 0 ax [189])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 192 191 193 23 (parallel [
            (set (reg:DI 0 ax [190])
                (plus:DI (reg:DI 3 bx [164])
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 193 192 344 23 (parallel [
            (set (reg/f:DI 0 ax [orig:95 _35 ] [95])
                (plus:DI (reg:DI 0 ax [190])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 344 193 195 23 (set (reg:DI 1 dx [orig:145 _100 ] [145])
        (reg:DI 0 ax [orig:144 _99 ] [144])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 195 344 196 23 (parallel [
            (set (reg:DI 1 dx [orig:145 _100 ] [145])
                (lshiftrt:DI (reg:DI 1 dx [orig:145 _100 ] [145])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (nil))
(insn 196 195 198 23 (parallel [
            (set (reg:DI 1 dx [orig:146 _101 ] [146])
                (plus:DI (reg:DI 1 dx [orig:145 _100 ] [145])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 198 196 199 23 (set (reg:QI 1 dx [orig:148 _103 ] [148])
        (mem:QI (reg/f:DI 1 dx [orig:147 _102 ] [147]) [10 *_102+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (nil))
(insn 199 198 200 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:148 _103 ] [148])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 200 199 201 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 205)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (nil)
 -> 205)
;;  succ:       25 [100.0% (guessed)] 
;;              24 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 144 164 165 166 170

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       23 [0.0% (guessed)]  (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 144
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 144
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 201 200 202 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 202 201 203 24 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:144 _99 ] [144])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(call_insn 203 202 204 24 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 204 203 205)
;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       23 [100.0% (guessed)] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 96 149 150 151 152 153 191 192
(code_label 205 204 206 25 27 (nil) [1 uses])
(note 206 205 207 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 207 206 208 25 (set (reg/f:DI 0 ax [191])
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fc58ec72000 *.LC11>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 208 207 209 25 (set (mem/f/c:DI (plus:DI (reg:DI 3 bx [164])
                (const_int -88 [0xffffffffffffffa8])) [3 months+72 S8 A64])
        (reg/f:DI 0 ax [191])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 209 208 210 25 (parallel [
            (set (reg:DI 0 ax [192])
                (plus:DI (reg:DI 3 bx [164])
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 210 209 346 25 (parallel [
            (set (reg/f:DI 0 ax [orig:96 _36 ] [96])
                (plus:DI (reg:DI 0 ax [192])
                    (const_int 80 [0x50])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 346 210 212 25 (set (reg:DI 1 dx [orig:150 _105 ] [150])
        (reg:DI 0 ax [orig:149 _104 ] [149])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 212 346 213 25 (parallel [
            (set (reg:DI 1 dx [orig:150 _105 ] [150])
                (lshiftrt:DI (reg:DI 1 dx [orig:150 _105 ] [150])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (nil))
(insn 213 212 215 25 (parallel [
            (set (reg:DI 1 dx [orig:151 _106 ] [151])
                (plus:DI (reg:DI 1 dx [orig:150 _105 ] [150])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 215 213 216 25 (set (reg:QI 1 dx [orig:153 _108 ] [153])
        (mem:QI (reg/f:DI 1 dx [orig:152 _107 ] [152]) [10 *_107+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (nil))
(insn 216 215 217 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:153 _108 ] [153])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 217 216 218 25 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 222)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (nil)
 -> 222)
;;  succ:       27 [100.0% (guessed)] 
;;              26 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 149 164 165 166 170

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25 [0.0% (guessed)]  (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 149
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 149
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 218 217 219 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 220 26 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:149 _104 ] [149])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(call_insn 220 219 221 26 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 221 220 222)
;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       25 [100.0% (guessed)] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 97 154 155 156 157 158 193 194
(code_label 222 221 223 27 28 (nil) [1 uses])
(note 223 222 224 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 27 (set (reg/f:DI 0 ax [193])
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7fc58ec72090 *.LC12>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 225 224 226 27 (set (mem/f/c:DI (plus:DI (reg:DI 3 bx [164])
                (const_int -80 [0xffffffffffffffb0])) [3 months+80 S8 A64])
        (reg/f:DI 0 ax [193])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 226 225 227 27 (parallel [
            (set (reg:DI 0 ax [194])
                (plus:DI (reg:DI 3 bx [164])
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 227 226 348 27 (parallel [
            (set (reg/f:DI 0 ax [orig:97 _37 ] [97])
                (plus:DI (reg:DI 0 ax [194])
                    (const_int 88 [0x58])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 348 227 229 27 (set (reg:DI 1 dx [orig:155 _110 ] [155])
        (reg:DI 0 ax [orig:154 _109 ] [154])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 229 348 230 27 (parallel [
            (set (reg:DI 1 dx [orig:155 _110 ] [155])
                (lshiftrt:DI (reg:DI 1 dx [orig:155 _110 ] [155])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 566 {*lshrdi3_1}
     (nil))
(insn 230 229 232 27 (parallel [
            (set (reg:DI 1 dx [orig:156 _111 ] [156])
                (plus:DI (reg:DI 1 dx [orig:155 _110 ] [155])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":39:11 191 {*adddi_1}
     (nil))
(insn 232 230 233 27 (set (reg:QI 1 dx [orig:158 _113 ] [158])
        (mem:QI (reg/f:DI 1 dx [orig:157 _112 ] [157]) [10 *_112+0 S1 A8])) "queryTAD.c":39:11 69 {*movqi_internal}
     (nil))
(insn 233 232 234 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:158 _113 ] [158])
            (const_int 0 [0]))) "queryTAD.c":39:11 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 234 233 235 27 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 239)
            (pc))) "queryTAD.c":39:11 659 {*jcc}
     (nil)
 -> 239)
;;  succ:       29 [100.0% (guessed)] 
;;              28 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 154 164 165 166 170

;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       27 [0.0% (guessed)]  (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 154
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 154
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 235 234 236 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 28 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:154 _109 ] [154])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(call_insn 237 236 238 28 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":39:11 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 238 237 239)
;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       27 [100.0% (guessed)] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 195
(code_label 239 238 240 29 29 (nil) [1 uses])
(note 240 239 241 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 241 240 242 29 (set (reg/f:DI 0 ax [195])
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7fc58ec72120 *.LC13>)) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 242 241 243 29 (set (mem/f/c:DI (plus:DI (reg:DI 3 bx [164])
                (const_int -72 [0xffffffffffffffb8])) [3 months+88 S8 A64])
        (reg/f:DI 0 ax [195])) "queryTAD.c":39:11 66 {*movdi_internal}
     (nil))
(insn 243 242 317 29 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -228 [0xffffffffffffff1c])) [13 i+0 S4 A32])
        (const_int 0 [0])) "queryTAD.c":40:14 67 {*movsi_internal}
     (nil))
(jump_insn 317 243 318 29 (set (pc)
        (label_ref 284)) "queryTAD.c":40:5 660 {jump}
     (nil)
 -> 284)
;;  succ:       35 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170

(barrier 318 317 286)
;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       35
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 17 [flags] 98 159 160 161 162 163 196 197 198 199
(code_label 286 318 246 30 34 (nil) [1 uses])
(note 246 286 247 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 247 246 248 30 (parallel [
            (set (reg:DI 0 ax [196])
                (plus:DI (reg:DI 3 bx [164])
                    (const_int -160 [0xffffffffffffff60])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":41:33 191 {*adddi_1}
     (nil))
(insn 248 247 249 30 (set (reg:SI 1 dx [198])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -228 [0xffffffffffffff1c])) [13 i+0 S4 A32])) "queryTAD.c":41:33 67 {*movsi_internal}
     (nil))
(insn 249 248 250 30 (set (reg:DI 1 dx [197])
        (sign_extend:DI (reg:SI 1 dx [198]))) "queryTAD.c":41:33 128 {*extendsidi2_rex64}
     (nil))
(insn 250 249 251 30 (parallel [
            (set (reg:DI 1 dx [199])
                (ashift:DI (reg:DI 1 dx [197])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":41:33 520 {*ashldi3_1}
     (nil))
(insn 251 250 350 30 (parallel [
            (set (reg/f:DI 0 ax [orig:98 _38 ] [98])
                (plus:DI (reg:DI 0 ax [196])
                    (reg:DI 1 dx [199])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":41:33 191 {*adddi_1}
     (nil))
(insn 350 251 253 30 (set (reg:DI 1 dx [orig:160 _115 ] [160])
        (reg:DI 0 ax [orig:159 _114 ] [159])) "queryTAD.c":41:33 66 {*movdi_internal}
     (nil))
(insn 253 350 254 30 (parallel [
            (set (reg:DI 1 dx [orig:160 _115 ] [160])
                (lshiftrt:DI (reg:DI 1 dx [orig:160 _115 ] [160])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":41:33 566 {*lshrdi3_1}
     (nil))
(insn 254 253 256 30 (parallel [
            (set (reg:DI 1 dx [orig:161 _116 ] [161])
                (plus:DI (reg:DI 1 dx [orig:160 _115 ] [160])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":41:33 191 {*adddi_1}
     (nil))
(insn 256 254 257 30 (set (reg:QI 1 dx [orig:163 _118 ] [163])
        (mem:QI (reg/f:DI 1 dx [orig:162 _117 ] [162]) [10 *_117+0 S1 A8])) "queryTAD.c":41:33 69 {*movqi_internal}
     (nil))
(insn 257 256 258 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:163 _118 ] [163])
            (const_int 0 [0]))) "queryTAD.c":41:33 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 258 257 259 30 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 263)
            (pc))) "queryTAD.c":41:33 659 {*jcc}
     (nil)
 -> 263)
;;  succ:       32 [100.0% (guessed)] 
;;              31 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 159 164 165 166 170

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       30 [0.0% (guessed)]  (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 159
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 159
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 259 258 260 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 260 259 261 31 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:159 _114 ] [159])) "queryTAD.c":41:33 66 {*movdi_internal}
     (nil))
(call_insn 261 260 262 31 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":41:33 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 262 261 263)
;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       30 [100.0% (guessed)] 
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 82 83 200 201 202
(code_label 263 262 264 32 31 (nil) [1 uses])
(note 264 263 265 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 265 264 266 32 (set (reg:SI 0 ax [201])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -228 [0xffffffffffffff1c])) [13 i+0 S4 A32])) "queryTAD.c":41:33 67 {*movsi_internal}
     (nil))
(insn 266 265 267 32 (set (reg:DI 0 ax [200])
        (sign_extend:DI (reg:SI 0 ax [201]))) "queryTAD.c":41:33 128 {*extendsidi2_rex64}
     (nil))
(insn 267 266 268 32 (set (reg/f:DI 1 dx [orig:82 _1 ] [82])
        (mem/f:DI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [200])
                        (const_int 8 [0x8]))
                    (reg:DI 3 bx [164]))
                (const_int -160 [0xffffffffffffff60])) [3 months S8 A64])) "queryTAD.c":41:33 66 {*movdi_internal}
     (nil))
(insn 268 267 269 32 (set (reg:DI 0 ax [202])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -248 [0xffffffffffffff08])) [3 s+0 S8 A64])) "queryTAD.c":41:13 66 {*movdi_internal}
     (nil))
(insn 269 268 270 32 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:82 _1 ] [82])) "queryTAD.c":41:13 66 {*movdi_internal}
     (nil))
(insn 270 269 271 32 (set (reg:DI 5 di)
        (reg:DI 0 ax [202])) "queryTAD.c":41:13 66 {*movdi_internal}
     (nil))
(call_insn/i 271 270 273 32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcasecmp") [flags 0x41]  <function_decl 0x7fc58ebf9400 strcasecmp>) [0 strcasecmp S1 A8])
            (const_int 0 [0]))) "queryTAD.c":41:13 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 273 271 274 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:83 _2 ] [83])
            (const_int 0 [0]))) "queryTAD.c":41:12 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 274 273 275 32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 281)
            (pc))) "queryTAD.c":41:12 659 {*jcc}
     (nil)
 -> 281)
;;  succ:       33 (FALLTHRU)
;;              34
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 84 85 203
(note 275 274 276 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 33 (set (reg:SI 0 ax [203])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -228 [0xffffffffffffff1c])) [13 i+0 S4 A32])) "queryTAD.c":42:21 67 {*movsi_internal}
     (nil))
(insn 277 276 278 33 (parallel [
            (set (reg:SI 0 ax [orig:84 _3 ] [84])
                (plus:SI (reg:SI 0 ax [203])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":42:21 190 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -196 [0xffffffffffffff3c])) [13 i+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 278 277 319 33 (set (reg:DI 0 ax [orig:85 _5 ] [85])
        (sign_extend:DI (reg:SI 0 ax [orig:84 _3 ] [84]))) "queryTAD.c":42:21 128 {*extendsidi2_rex64}
     (nil))
(jump_insn 319 278 320 33 (set (pc)
        (label_ref 295)) "queryTAD.c":42:21 660 {jump}
     (nil)
 -> 295)
;;  succ:       37 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 165 166 170

(barrier 320 319 281)
;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       32
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 281 320 282 34 32 (nil) [1 uses])
(note 282 281 283 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 283 282 284 34 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -228 [0xffffffffffffff1c])) [13 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -228 [0xffffffffffffff1c])) [13 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":40:26 190 {*addsi_1}
     (nil))
;;  succ:       35 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170

;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL, MODIFIED)
;;  pred:       34 (FALLTHRU,DFS_BACK)
;;              29 [always] 
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 284 283 285 35 30 (nil) [1 uses])
(note 285 284 289 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 289 285 290 35 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -228 [0xffffffffffffff1c])) [13 i+0 S4 A32])
            (const_int 11 [0xb]))) "queryTAD.c":40:5 11 {*cmpsi_1}
     (nil))
(jump_insn 290 289 291 35 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 286)
            (pc))) "queryTAD.c":40:5 659 {*jcc}
     (nil)
 -> 286)
;;  succ:       30
;;              36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164 165 166 170

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 85
(note 291 290 292 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 292 291 295 36 (set (reg:DI 0 ax [orig:85 _5 ] [85])
        (const_int -1 [0xffffffffffffffff])) "queryTAD.c":45:12 66 {*movdi_internal}
     (nil))
;;  succ:       37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 165 166 170

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 38, flags: (RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;;              33 [always] 
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 165 166 170
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 165 166
;; lr  def 	 17 [flags] 172
(code_label 295 292 296 37 35 (nil) [1 uses])
(note 296 295 297 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 297 296 22 37 (set (reg:DI 1 dx [orig:172 <retval> ] [172])
        (reg:DI 0 ax [orig:85 _5 ] [85])) 66 {*movdi_internal}
     (nil))
(insn 22 297 23 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 42 r14 [166])
            (reg:DI 40 r12 [165]))) "queryTAD.c":38:29 12 {*cmpdi_1}
     (nil))
(jump_insn 23 22 312 37 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) "queryTAD.c":38:29 659 {*jcc}
     (nil)
 -> 31)
;;  succ:       39
;;              38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165 170 172

;; basic block 38, loop depth 0, maybe hot
;;  prev block 37, next block 39, flags: (RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165 170 172
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 165 170
;; lr  def 	 171
(note 312 23 24 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 24 312 352 38 (set (mem:DI (reg:DI 40 r12 [165]) [0  S8 A8])
        (const_int 1172321806 [0x45e0360e])) "queryTAD.c":38:29 66 {*movdi_internal}
     (nil))
(insn 352 24 25 38 (set (reg:TI 2 cx [221])
        (const_wide_int 0xf5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5)) "queryTAD.c":38:29 65 {*movti_internal}
     (nil))
(insn 25 352 26 38 (set (mem:TI (plus:DI (reg:DI 41 r13 [170])
                (const_int 2147450880 [0x7fff8000])) [10  S16 A8])
        (reg:TI 2 cx [221])) "queryTAD.c":38:29 65 {*movti_internal}
     (nil))
(insn 26 25 27 38 (set (mem:SI (plus:DI (reg:DI 41 r13 [170])
                (const_int 2147450896 [0x7fff8010])) [10  S4 A8])
        (const_int -168430091 [0xfffffffff5f5f5f5])) "queryTAD.c":38:29 67 {*movsi_internal}
     (nil))
(insn 27 26 28 38 (set (reg:DI 0 ax [171])
        (mem:DI (plus:DI (reg:DI 40 r12 [165])
                (const_int 248 [0xf8])) [0  S8 A8])) "queryTAD.c":38:29 66 {*movdi_internal}
     (nil))
(insn 28 27 321 38 (set (mem:QI (reg:DI 0 ax [171]) [0  S1 A8])
        (const_int 0 [0])) "queryTAD.c":38:29 69 {*movqi_internal}
     (nil))
(jump_insn 321 28 322 38 (set (pc)
        (label_ref 34)) 660 {jump}
     (nil)
 -> 34)
;;  succ:       40 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172

(barrier 322 321 31)
;; basic block 39, loop depth 0, maybe hot
;;  prev block 38, next block 40, flags: (RTL, MODIFIED)
;;  pred:       37
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 170 172
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 170
;; lr  def 	
(code_label 31 322 313 39 15 (nil) [1 uses])
(note 313 31 32 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 32 313 33 39 (set (mem:SI (plus:DI (reg:DI 41 r13 [170])
                (const_int 2147450880 [0x7fff8000])) [10  S4 A8])
        (const_int 0 [0])) "queryTAD.c":38:29 67 {*movsi_internal}
     (nil))
(insn 33 32 34 39 (set (mem:SI (plus:DI (reg:DI 41 r13 [170])
                (const_int 2147450896 [0x7fff8010])) [10  S4 A8])
        (const_int 0 [0])) "queryTAD.c":38:29 67 {*movsi_internal}
     (nil))
;;  succ:       40 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172

;; basic block 40, loop depth 0, maybe hot
;;  prev block 39, next block 41, flags: (RTL, MODIFIED)
;;  pred:       39 (FALLTHRU)
;;              38 [always] 
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 34 33 314 40 16 (nil) [1 uses])
(note 314 34 301 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 301 314 302 40 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -40 [0xffffffffffffffd8])) [12 D.3543+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (reg:DI 0 ax [206]))
        ]) "queryTAD.c":46:1 978 {stack_protect_test_di}
     (nil))
(jump_insn 302 301 315 40 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 305)
            (pc))) "queryTAD.c":46:1 659 {*jcc}
     (nil)
 -> 305)
;;  succ:       42
;;              41 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172

;; basic block 41, loop depth 0, maybe hot
;;  prev block 40, next block 42, flags: (RTL, MODIFIED)
;;  pred:       40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 315 302 303 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(call_insn 303 315 304 41 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fc58ec4c100 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "queryTAD.c":46:1 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 304 303 305)
;; basic block 42, loop depth 0, maybe hot
;;  prev block 41, next block 1, flags: (RTL, MODIFIED)
;;  pred:       40
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172
;; lr  def 	 0 [ax]
(code_label 305 304 316 42 36 (nil) [1 uses])
(note 316 305 306 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 306 316 307 42 (set (reg/i:DI 0 ax)
        (reg:DI 1 dx [orig:172 <retval> ] [172])) "queryTAD.c":46:1 66 {*movdi_internal}
     (nil))
(insn 307 306 323 42 (use (reg/i:DI 0 ax)) "queryTAD.c":46:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 323 307 0 NOTE_INSN_DELETED)

;; Function dateCmp (dateCmp, funcdef_no=4, decl_uid=3427, cgraph_uid=5, symbol_order=4)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=48, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 12:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=111 from oldreg=87, assigning class GENERAL_REGS to r111
   12: {r111:DI=r111:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  133: r111:DI=r86:DI
    Inserting insn reload after:
  134: r87:DI=r111:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =qm {*setcc_qi}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=17,losers=2 -- refuse
            alt=3: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) Z {*anddi_1}
      Creating newreg=112 from oldreg=92, assigning class GENERAL_REGS to r112
   18: {r112:DI=r112:DI&0x7;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  135: r112:DI=r86:DI
    Inserting insn reload after:
  136: r92:DI=r112:DI

            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) R  (1) R {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =qm {*setcc_qi}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 22
	 Choosing alt 0 in insn 22:  (0) =qm  (1) %0  (2) qn {*andqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 37:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) q  (1) n {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rm {*cmpdi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) q  (1) n {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rm {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) rm {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) rm {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) rm {*cmpdi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) q  (1) n {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rm {*cmpdi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) q  (1) n {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) rm {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) r  (1) rm {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 91:  (0) r  (1) rm {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =qm {*setcc_qi}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) rm {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 103:  (0) r  (1) rm {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =qm {*setcc_qi}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) q  (1) n {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5
EBB 6 7
EBB 8 9 10 11 12
EBB 13 14
EBB 15 16 17
EBB 18 19
EBB 20
EBB 21

********** Pseudo live ranges #1: **********

  BB 3
   Insn 27: point = 0, n_alt = 0
   Insn 26: point = 0, n_alt = -2
  BB 21
   Insn 118: point = 2, n_alt = -1
   Insn 117: point = 2, n_alt = -2
   Insn 113: point = 3, n_alt = -2
  BB 19
   Insn 130: point = 6, n_alt = -1
   Insn 105: point = 6, n_alt = -2
   Insn 104: point = 8, n_alt = 0
   Insn 103: point = 9, n_alt = 1
   Insn 102: point = 10, n_alt = 3
  BB 17
   Insn 128: point = 11, n_alt = -1
   Insn 93: point = 11, n_alt = -2
   Insn 92: point = 13, n_alt = 0
   Insn 91: point = 14, n_alt = 1
   Insn 90: point = 15, n_alt = 3
  BB 14
   Insn 126: point = 16, n_alt = -1
   Insn 77: point = 16, n_alt = 3
  BB 12
   Insn 124: point = 17, n_alt = -1
   Insn 68: point = 17, n_alt = 3
  BB 7
   Insn 122: point = 18, n_alt = -1
   Insn 47: point = 18, n_alt = 3
  BB 5
   Insn 120: point = 19, n_alt = -1
   Insn 38: point = 19, n_alt = 3
   Insn 37: point = 20, n_alt = 8
   Insn 36: point = 21, n_alt = 3
  BB 20
   Insn 110: point = 22, n_alt = 3
  BB 18
   Insn 100: point = 23, n_alt = -1
   Insn 99: point = 23, n_alt = 1
   Insn 98: point = 24, n_alt = 3
  BB 16
   Insn 88: point = 25, n_alt = -1
   Insn 87: point = 25, n_alt = 1
   Insn 86: point = 26, n_alt = 3
  BB 15
   Insn 84: point = 27, n_alt = -1
   Insn 83: point = 27, n_alt = 1
   Insn 82: point = 28, n_alt = 3
  BB 13
   Insn 75: point = 29, n_alt = -1
   Insn 74: point = 29, n_alt = 1
   Insn 73: point = 30, n_alt = 3
  BB 11
   Insn 66: point = 31, n_alt = -1
   Insn 65: point = 31, n_alt = 1
   Insn 64: point = 32, n_alt = 3
  BB 10
   Insn 62: point = 33, n_alt = -1
   Insn 61: point = 33, n_alt = 1
   Insn 60: point = 34, n_alt = 3
  BB 9
   Insn 58: point = 35, n_alt = -1
   Insn 57: point = 35, n_alt = 1
   Insn 56: point = 36, n_alt = 3
  BB 8
   Insn 54: point = 37, n_alt = -1
   Insn 53: point = 37, n_alt = 1
   Insn 52: point = 38, n_alt = 3
  BB 6
   Insn 45: point = 39, n_alt = -1
   Insn 44: point = 39, n_alt = 1
   Insn 43: point = 40, n_alt = 3
  BB 4
   Insn 34: point = 41, n_alt = -1
   Insn 33: point = 41, n_alt = 0
   Insn 32: point = 42, n_alt = 4
   Insn 31: point = 44, n_alt = 3
  BB 2
   Insn 24: point = 45, n_alt = -1
   Insn 23: point = 45, n_alt = 0
   Insn 22: point = 46, n_alt = 0
   Insn 21: point = 48, n_alt = 0
   Insn 20: point = 49, n_alt = 0
   Insn 19: point = 50, n_alt = 1
   Insn 136: point = 52, n_alt = -2
	Hard reg 4 is preferable by r112 with profit 1000
   Insn 18: point = 54, n_alt = 0
   Insn 135: point = 55, n_alt = -2
	Hard reg 4 is preferable by r112 with profit 1000
	Hard reg 0 is preferable by r112 with profit 1000
   Insn 17: point = 56, n_alt = 0
   Insn 16: point = 57, n_alt = 0
   Insn 15: point = 57, n_alt = 4
   Insn 14: point = 59, n_alt = -2
   Insn 13: point = 61, n_alt = 0
   Insn 134: point = 63, n_alt = -2
	Hard reg 1 is preferable by r111 with profit 1000
   Insn 12: point = 65, n_alt = 0
   Insn 133: point = 66, n_alt = -2
	Hard reg 1 is preferable by r111 with profit 1000
	Hard reg 0 is preferable by r111 with profit 1000
   Insn 11: point = 67, n_alt = 3
   Insn 7: point = 68, n_alt = 5
   Insn 6: point = 68, n_alt = 5
   Insn 5: point = 68, n_alt = 5
   Insn 4: point = 68, n_alt = 5
   Insn 3: point = 68, n_alt = 5
   Insn 2: point = 68, n_alt = 5
 r82: [41..42]
 r83: [12..13]
 r84: [7..8]
 r85: [22..22] [16..19] [11..11] [4..6]
 r86: [45..67] [0..1]
 r87: [62..63]
 r88: [60..61]
 r89: [58..59]
 r90: [49..57]
 r91: [47..56]
 r92: [51..52]
 r93: [49..50]
 r94: [47..48]
 r95: [45..46]
 r96: [2..3]
 r97: [43..44]
 r98: [20..21]
 r99: [39..40]
 r100: [37..38]
 r101: [35..36]
 r102: [33..34]
 r103: [31..32]
 r104: [29..30]
 r105: [27..28]
 r106: [25..26]
 r107: [14..15]
 r108: [23..24]
 r109: [9..10]
 r111: [64..66]
 r112: [53..55]
Compressing live ranges: from 68 to 60 - 88%
Ranges after the compression:
 r82: [38..39]
 r83: [11..12]
 r84: [6..7]
 r85: [19..19] [15..16] [10..10] [4..5]
 r86: [42..59] [0..1]
 r87: [56..57]
 r88: [54..55]
 r89: [52..53]
 r90: [46..51]
 r91: [44..51]
 r92: [48..49]
 r93: [46..47]
 r94: [44..45]
 r95: [42..43]
 r96: [2..3]
 r97: [40..41]
 r98: [17..18]
 r99: [36..37]
 r100: [34..35]
 r101: [32..33]
 r102: [30..31]
 r103: [28..29]
 r104: [26..27]
 r105: [24..25]
 r106: [22..23]
 r107: [13..14]
 r108: [20..21]
 r109: [8..9]
 r111: [58..59]
 r112: [50..51]

********** Assignment #1: **********

	 Assigning to 111 (cl=GENERAL_REGS, orig=87, freq=3000, tfirst=111, tfreq=3000)...
	   Assign 1 to reload r111 (freq=3000)
	 Assigning to 112 (cl=GENERAL_REGS, orig=92, freq=3000, tfirst=112, tfreq=3000)...
	   Assign 4 to reload r112 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=48, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 32
changing reg in insn 33
changing reg in insn 92
changing reg in insn 93
changing reg in insn 104
changing reg in insn 105
changing reg in insn 110
changing reg in insn 105
changing reg in insn 93
changing reg in insn 77
changing reg in insn 68
changing reg in insn 47
changing reg in insn 38
changing reg in insn 113
changing reg in insn 11
changing reg in insn 26
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 20
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 113
changing reg in insn 117
changing reg in insn 31
changing reg in insn 32
changing reg in insn 36
changing reg in insn 37
changing reg in insn 43
changing reg in insn 44
changing reg in insn 52
changing reg in insn 53
changing reg in insn 56
changing reg in insn 57
changing reg in insn 60
changing reg in insn 61
changing reg in insn 64
changing reg in insn 65
changing reg in insn 73
changing reg in insn 74
changing reg in insn 82
changing reg in insn 83
changing reg in insn 86
changing reg in insn 87
changing reg in insn 90
changing reg in insn 91
changing reg in insn 98
changing reg in insn 99
changing reg in insn 102
changing reg in insn 103
deleting insn with uid = 134.
deleting insn with uid = 14.
deleting insn with uid = 136.
deleting insn with uid = 19.
deleting insn with uid = 93.
deleting insn with uid = 105.
deleting insn with uid = 113.
deleting insn with uid = 117.
starting the processing of deferred insns
ending the processing of deferred insns


dateCmp

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8] 37 [r9]
;;  ref usage 	r0={24d,19u} r1={8d,8u} r2={3d,2u} r4={4d,3u} r5={3d,2u} r6={1d,52u} r7={1d,22u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={20d,15u} r18={1d} r19={1d,1u} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d,1u} r37={2d,1u} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 262{136d,126u,0e} in 73{72 regular + 1 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8] 37 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8] 37 [r9]
;; lr  def 	 17 [flags] 86 87 88 89 90 91 92 93 94 95
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 year1+0 S8 A64])
        (reg:DI 5 di [ year1 ])) "queryTAD.c":48:149 66 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 year2+0 S8 A64])
        (reg:DI 4 si [ year2 ])) "queryTAD.c":48:149 66 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 month1+0 S8 A64])
        (reg:DI 1 dx [ month1 ])) "queryTAD.c":48:149 66 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 day1+0 S8 A64])
        (reg:DI 2 cx [ day1 ])) "queryTAD.c":48:149 66 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 month2+0 S8 A64])
        (reg:DI 36 r8 [ month2 ])) "queryTAD.c":48:149 66 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 day2+0 S8 A64])
        (reg:DI 37 r9 [ day2 ])) "queryTAD.c":48:149 66 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 133 2 (set (reg:DI 0 ax [orig:86 _25 ] [86])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [3 usedFlag+0 S8 A64])) "queryTAD.c":49:8 66 {*movdi_internal}
     (nil))
(insn 133 11 12 2 (set (reg:DI 1 dx [orig:87 _26 ] [87])
        (reg:DI 0 ax [orig:86 _25 ] [86])) "queryTAD.c":49:8 66 {*movdi_internal}
     (nil))
(insn 12 133 13 2 (parallel [
            (set (reg:DI 1 dx [orig:87 _26 ] [87])
                (lshiftrt:DI (reg:DI 1 dx [orig:87 _26 ] [87])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":49:8 566 {*lshrdi3_1}
     (nil))
(insn 13 12 15 2 (parallel [
            (set (reg:DI 1 dx [orig:88 _27 ] [88])
                (plus:DI (reg:DI 1 dx [orig:87 _26 ] [87])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":49:8 191 {*adddi_1}
     (nil))
(insn 15 13 16 2 (set (reg:QI 1 dx [orig:90 _29 ] [90])
        (mem:QI (reg/f:DI 1 dx [orig:89 _28 ] [89]) [10 *_28+0 S1 A8])) "queryTAD.c":49:8 69 {*movqi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:90 _29 ] [90])
            (const_int 0 [0]))) "queryTAD.c":49:8 5 {*cmpqi_ccno_1}
     (nil))
(insn 17 16 135 2 (set (reg:QI 2 cx [orig:91 _30 ] [91])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "queryTAD.c":49:8 655 {*setcc_qi}
     (nil))
(insn 135 17 18 2 (set (reg:DI 4 si [orig:92 _31 ] [92])
        (reg:DI 0 ax [orig:86 _25 ] [86])) "queryTAD.c":49:8 66 {*movdi_internal}
     (nil))
(insn 18 135 20 2 (parallel [
            (set (reg:DI 4 si [orig:92 _31 ] [92])
                (and:DI (reg:DI 4 si [orig:92 _31 ] [92])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":49:8 391 {*anddi_1}
     (nil))
(insn 20 18 21 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:QI 4 si [orig:93 _32 ] [93])
            (reg:QI 1 dx [orig:90 _29 ] [90]))) "queryTAD.c":49:8 9 {*cmpqi_1}
     (nil))
(insn 21 20 22 2 (set (reg:QI 1 dx [orig:94 _33 ] [94])
        (ge:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "queryTAD.c":49:8 655 {*setcc_qi}
     (nil))
(insn 22 21 23 2 (parallel [
            (set (reg:QI 1 dx [orig:95 _34 ] [95])
                (and:QI (reg:QI 1 dx [orig:94 _33 ] [94])
                    (reg:QI 2 cx [orig:91 _30 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":49:8 396 {*andqi_1}
     (nil))
(insn 23 22 24 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:95 _34 ] [95])
            (const_int 0 [0]))) "queryTAD.c":49:8 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 24 23 25 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "queryTAD.c":49:8 659 {*jcc}
     (nil)
 -> 29)
;;  succ:       4 [100.0% (guessed)] 
;;              3 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 [0.0% (guessed)]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 25 24 26 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:86 _25 ] [86])) "queryTAD.c":49:8 66 {*movdi_internal}
     (nil))
(call_insn 27 26 28 3 (call (mem:QI (symbol_ref:DI ("__asan_report_load1") [flags 0x41]  <function_decl 0x7fc58eea5600 __builtin___asan_report_load1>) [0 __builtin___asan_report_load1 S1 A8])
        (const_int 0 [0])) "queryTAD.c":49:8 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 28 27 29)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2 [100.0% (guessed)] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 97
(code_label 29 28 30 4 38 (nil) [1 uses])
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [3 usedFlag+0 S8 A64])) "queryTAD.c":49:8 66 {*movdi_internal}
     (nil))
(insn 32 31 33 4 (set (reg:QI 0 ax [orig:82 _1 ] [82])
        (mem:QI (reg/f:DI 0 ax [97]) [0 *usedFlag_7(D)+0 S1 A8])) "queryTAD.c":49:8 69 {*movqi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:82 _1 ] [82])
            (const_int 0 [0]))) "queryTAD.c":49:7 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 34 33 35 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 41)
            (pc))) "queryTAD.c":49:7 659 {*jcc}
     (nil)
 -> 41)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 85 98
(note 35 34 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 5 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [3 usedFlag+0 S8 A64])) "queryTAD.c":50:19 66 {*movdi_internal}
     (nil))
(insn 37 36 38 5 (set (mem:QI (reg/f:DI 0 ax [98]) [0 *usedFlag_7(D)+0 S1 A8])
        (const_int 1 [0x1])) "queryTAD.c":50:19 69 {*movqi_internal}
     (nil))
(insn 38 37 120 5 (set (reg:QI 0 ax [orig:85 _4 ] [85])
        (const_int -1 [0xffffffffffffffff])) "queryTAD.c":51:16 69 {*movqi_internal}
     (nil))
(jump_insn 120 38 121 5 (set (pc)
        (label_ref 111)) "queryTAD.c":51:16 660 {jump}
     (nil)
 -> 111)
;;  succ:       21 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85

(barrier 121 120 41)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 99
(code_label 41 121 42 6 39 (nil) [1 uses])
(note 42 41 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 6 (set (reg:DI 0 ax [99])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 year1+0 S8 A64])) "queryTAD.c":53:8 66 {*movdi_internal}
     (nil))
(insn 44 43 45 6 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [99])
            (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 year2+0 S8 A64]))) "queryTAD.c":53:8 12 {*cmpdi_1}
     (nil))
(jump_insn 45 44 46 6 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) "queryTAD.c":53:8 659 {*jcc}
     (nil)
 -> 50)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 85
(note 46 45 47 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 122 7 (set (reg:QI 0 ax [orig:85 _4 ] [85])
        (const_int 1 [0x1])) "queryTAD.c":54:16 69 {*movqi_internal}
     (nil))
(jump_insn 122 47 123 7 (set (pc)
        (label_ref 111)) "queryTAD.c":54:16 660 {jump}
     (nil)
 -> 111)
;;  succ:       21 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85

(barrier 123 122 50)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 100
(code_label 50 123 51 8 41 (nil) [1 uses])
(note 51 50 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 8 (set (reg:DI 0 ax [100])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 month1+0 S8 A64])) "queryTAD.c":56:7 66 {*movdi_internal}
     (nil))
(insn 53 52 54 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [100])
            (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [2 month2+0 S8 A64]))) "queryTAD.c":56:7 12 {*cmpdi_1}
     (nil))
(jump_insn 54 53 55 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) "queryTAD.c":56:7 659 {*jcc}
     (nil)
 -> 71)
;;  succ:       9 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 101
(note 55 54 56 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 9 (set (reg:DI 0 ax [101])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 day1+0 S8 A64])) "queryTAD.c":56:25 66 {*movdi_internal}
     (nil))
(insn 57 56 58 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [101])
            (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [2 day2+0 S8 A64]))) "queryTAD.c":56:25 12 {*cmpdi_1}
     (nil))
(jump_insn 58 57 59 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) "queryTAD.c":56:25 659 {*jcc}
     (nil)
 -> 71)
;;  succ:       10 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 102
(note 59 58 60 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 10 (set (reg:DI 0 ax [102])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 year1+0 S8 A64])) "queryTAD.c":56:39 66 {*movdi_internal}
     (nil))
(insn 61 60 62 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [102])
            (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 year2+0 S8 A64]))) "queryTAD.c":56:39 12 {*cmpdi_1}
     (nil))
(jump_insn 62 61 63 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) "queryTAD.c":56:39 659 {*jcc}
     (nil)
 -> 71)
;;  succ:       11 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 103
(note 63 62 64 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 11 (set (reg:DI 0 ax [103])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [2 time1+0 S8 A64])) "queryTAD.c":56:55 66 {*movdi_internal}
     (nil))
(insn 65 64 66 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [103])
            (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int 32 [0x20])) [2 time2+0 S8 A64]))) "queryTAD.c":56:55 12 {*cmpdi_1}
     (nil))
(jump_insn 66 65 67 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) "queryTAD.c":56:55 659 {*jcc}
     (nil)
 -> 71)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 85
(note 67 66 68 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 124 12 (set (reg:QI 0 ax [orig:85 _4 ] [85])
        (const_int 0 [0])) "queryTAD.c":57:16 69 {*movqi_internal}
     (nil))
(jump_insn 124 68 125 12 (set (pc)
        (label_ref 111)) "queryTAD.c":57:16 660 {jump}
     (nil)
 -> 111)
;;  succ:       21 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85

(barrier 125 124 71)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       8
;;              9
;;              10
;;              11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 104
(code_label 71 125 72 13 42 (nil) [4 uses])
(note 72 71 73 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 13 (set (reg:DI 0 ax [104])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 month1+0 S8 A64])) "queryTAD.c":59:8 66 {*movdi_internal}
     (nil))
(insn 74 73 75 13 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [104])
            (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [2 month2+0 S8 A64]))) "queryTAD.c":59:8 12 {*cmpdi_1}
     (nil))
(jump_insn 75 74 76 13 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 80)
            (pc))) "queryTAD.c":59:8 659 {*jcc}
     (nil)
 -> 80)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 85
(note 76 75 77 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 126 14 (set (reg:QI 0 ax [orig:85 _4 ] [85])
        (const_int 1 [0x1])) "queryTAD.c":60:16 69 {*movqi_internal}
     (nil))
(jump_insn 126 77 127 14 (set (pc)
        (label_ref 111)) "queryTAD.c":60:16 660 {jump}
     (nil)
 -> 111)
;;  succ:       21 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85

(barrier 127 126 80)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 105
(code_label 80 127 81 15 43 (nil) [1 uses])
(note 81 80 82 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 15 (set (reg:DI 0 ax [105])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 month1+0 S8 A64])) "queryTAD.c":62:7 66 {*movdi_internal}
     (nil))
(insn 83 82 84 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [105])
            (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [2 month2+0 S8 A64]))) "queryTAD.c":62:7 12 {*cmpdi_1}
     (nil))
(jump_insn 84 83 85 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 96)
            (pc))) "queryTAD.c":62:7 659 {*jcc}
     (nil)
 -> 96)
;;  succ:       16 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 106
(note 85 84 86 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 16 (set (reg:DI 0 ax [106])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 day1+0 S8 A64])) "queryTAD.c":62:25 66 {*movdi_internal}
     (nil))
(insn 87 86 88 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [106])
            (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [2 day2+0 S8 A64]))) "queryTAD.c":62:25 12 {*cmpdi_1}
     (nil))
(jump_insn 88 87 89 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 96)
            (pc))) "queryTAD.c":62:25 659 {*jcc}
     (nil)
 -> 96)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 83 85 107
(note 89 88 90 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 17 (set (reg:DI 0 ax [107])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [2 time1+0 S8 A64])) "queryTAD.c":63:21 66 {*movdi_internal}
     (nil))
(insn 91 90 92 17 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [107])
            (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int 32 [0x20])) [2 time2+0 S8 A64]))) "queryTAD.c":63:21 12 {*cmpdi_1}
     (nil))
(insn 92 91 128 17 (set (reg:QI 0 ax [orig:83 _2 ] [83])
        (ltu:QI (reg:CC 17 flags)
            (const_int 0 [0]))) "queryTAD.c":63:21 655 {*setcc_qi}
     (nil))
(jump_insn 128 92 129 17 (set (pc)
        (label_ref 111)) "queryTAD.c":63:21 660 {jump}
     (nil)
 -> 111)
;;  succ:       21 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85

(barrier 129 128 96)
;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       15
;;              16
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 108
(code_label 96 129 97 18 44 (nil) [2 uses])
(note 97 96 98 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 18 (set (reg:DI 0 ax [108])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 month1+0 S8 A64])) "queryTAD.c":65:8 66 {*movdi_internal}
     (nil))
(insn 99 98 100 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [108])
            (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [2 month2+0 S8 A64]))) "queryTAD.c":65:8 12 {*cmpdi_1}
     (nil))
(jump_insn 100 99 101 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 108)
            (pc))) "queryTAD.c":65:8 659 {*jcc}
     (nil)
 -> 108)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 84 85 109
(note 101 100 102 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 19 (set (reg:DI 0 ax [109])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 day1+0 S8 A64])) "queryTAD.c":66:21 66 {*movdi_internal}
     (nil))
(insn 103 102 104 19 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [109])
            (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [2 day2+0 S8 A64]))) "queryTAD.c":66:21 12 {*cmpdi_1}
     (nil))
(insn 104 103 130 19 (set (reg:QI 0 ax [orig:84 _3 ] [84])
        (ltu:QI (reg:CC 17 flags)
            (const_int 0 [0]))) "queryTAD.c":66:21 655 {*setcc_qi}
     (nil))
(jump_insn 130 104 131 19 (set (pc)
        (label_ref 111)) "queryTAD.c":66:21 660 {jump}
     (nil)
 -> 111)
;;  succ:       21 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85

(barrier 131 130 108)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 85
(code_label 108 131 109 20 45 (nil) [1 uses])
(note 109 108 110 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 111 20 (set (reg:QI 0 ax [orig:85 _4 ] [85])
        (const_int -1 [0xffffffffffffffff])) "queryTAD.c":68:12 69 {*movqi_internal}
     (nil))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 1, flags: (RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;;              5 [always] 
;;              7 [always] 
;;              12 [always] 
;;              14 [always] 
;;              17 [always] 
;;              19 [always] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  def 	 0 [ax] 96
(code_label 111 110 112 21 40 (nil) [6 uses])
(note 112 111 118 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 118 112 132 21 (use (reg/i:QI 0 ax)) "queryTAD.c":69:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 132 118 0 NOTE_INSN_DELETED)

;; Function addOldest (addOldest, funcdef_no=5, decl_uid=3382, cgraph_uid=6, symbol_order=5)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=64, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 12:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 14:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=244 from oldreg=140, assigning class GENERAL_REGS to r244
   14: {r244:DI=r244:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  322: r244:DI=r139:DI
    Inserting insn reload after:
  323: r140:DI=r244:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 36
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 37:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 39:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=245 from oldreg=145, assigning class GENERAL_REGS to r245
   39: {r245:DI=r245:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  324: r245:DI=r144:DI
    Inserting insn reload after:
  325: r145:DI=r245:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 42:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 61:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 62
	 Choosing alt 0 in insn 62:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 63:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 74
	 Choosing alt 0 in insn 74:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 75:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 77:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=246 from oldreg=150, assigning class GENERAL_REGS to r246
   77: {r246:DI=r246:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  326: r246:DI=r149:DI
    Inserting insn reload after:
  327: r150:DI=r246:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 78:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=16,losers=2,rld_nregs=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 80:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 99:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 100
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 101:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 103:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=247 from oldreg=155, assigning class GENERAL_REGS to r247
  103: {r247:DI=r247:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  328: r247:DI=r154:DI
    Inserting insn reload after:
  329: r155:DI=r247:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 104:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=16,losers=2,rld_nregs=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 106:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 126
	 Choosing alt 0 in insn 126:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 127:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 129:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=248 from oldreg=160, assigning class GENERAL_REGS to r248
  129: {r248:DI=r248:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  330: r248:DI=r159:DI
    Inserting insn reload after:
  331: r160:DI=r248:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 130:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=16,losers=2,rld_nregs=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 132:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 141:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 142:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 143:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 144:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-24)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) rem {*movdi_internal} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (1) rBwBz {*call_value} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 155:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) qm {extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 158:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 163:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 165:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=249 from oldreg=165, assigning class GENERAL_REGS to r249
  165: {r249:DI=r249:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  332: r249:DI=r164:DI
    Inserting insn reload after:
  333: r165:DI=r249:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 166:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 168:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 178:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 186:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 187
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 188:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 190:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=250 from oldreg=170, assigning class GENERAL_REGS to r250
  190: {r250:DI=r250:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  334: r250:DI=r169:DI
    Inserting insn reload after:
  335: r170:DI=r250:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 191:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 193:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 202:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 203:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 204:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 205:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 206:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 213:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 214
	 Choosing alt 0 in insn 214:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 215:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 217:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=251 from oldreg=175, assigning class GENERAL_REGS to r251
  217: {r251:DI=r251:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  336: r251:DI=r174:DI
    Inserting insn reload after:
  337: r175:DI=r251:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 218:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 220:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 229:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 230:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 231:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 232:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 233:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 240:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 241
	 Choosing alt 0 in insn 241:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 242:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 244:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=252 from oldreg=180, assigning class GENERAL_REGS to r252
  244: {r252:DI=r252:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  338: r252:DI=r179:DI
    Inserting insn reload after:
  339: r180:DI=r252:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 245:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 247:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 256:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 257:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 258:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 259:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 260:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 267:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 268
	 Choosing alt 0 in insn 268:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 269:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 271:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=253 from oldreg=185, assigning class GENERAL_REGS to r253
  271: {r253:DI=r253:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  340: r253:DI=r184:DI
    Inserting insn reload after:
  341: r185:DI=r253:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 272:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 274:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 283:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 284:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 285:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 286:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 287:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 289:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 294:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 295
	 Choosing alt 0 in insn 295:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 296:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 298:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=254 from oldreg=190, assigning class GENERAL_REGS to r254
  298: {r254:DI=r254:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  342: r254:DI=r189:DI
    Inserting insn reload after:
  343: r190:DI=r254:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 299:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 301:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 310:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 311:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 27
EBB 26

********** Pseudo live ranges #1: **********

  BB 3
   Insn 22: point = 0, n_alt = 0
   Insn 21: point = 0, n_alt = -2
  BB 5
   Insn 47: point = 2, n_alt = 0
   Insn 46: point = 2, n_alt = -2
  BB 7
   Insn 85: point = 4, n_alt = 0
   Insn 84: point = 4, n_alt = -2
  BB 9
   Insn 111: point = 6, n_alt = 0
   Insn 110: point = 6, n_alt = -2
  BB 11
   Insn 137: point = 8, n_alt = 0
   Insn 136: point = 8, n_alt = -2
  BB 14
   Insn 173: point = 10, n_alt = 0
   Insn 172: point = 10, n_alt = -2
  BB 16
   Insn 198: point = 12, n_alt = 0
   Insn 197: point = 12, n_alt = -2
  BB 18
   Insn 225: point = 14, n_alt = 0
   Insn 224: point = 14, n_alt = -2
  BB 20
   Insn 252: point = 16, n_alt = 0
   Insn 251: point = 16, n_alt = -2
  BB 22
   Insn 279: point = 18, n_alt = 0
   Insn 278: point = 18, n_alt = -2
  BB 24
   Insn 306: point = 20, n_alt = 0
   Insn 305: point = 20, n_alt = -2
  BB 26
  BB 27
   Insn 320: point = 22, n_alt = -1
  BB 25
   Insn 311: point = 22, n_alt = 5
   Insn 310: point = 23, n_alt = 3
  BB 23
   Insn 303: point = 25, n_alt = -1
   Insn 302: point = 25, n_alt = 0
   Insn 301: point = 26, n_alt = 4
   Insn 300: point = 28, n_alt = -2
   Insn 299: point = 30, n_alt = 0
   Insn 343: point = 32, n_alt = -2
	Hard reg 2 is preferable by r254 with profit 1000
   Insn 298: point = 34, n_alt = 0
   Insn 342: point = 35, n_alt = -2
	Hard reg 2 is preferable by r254 with profit 1000
	Hard reg 1 is preferable by r254 with profit 1000
   Insn 297: point = 36, n_alt = -2
   Insn 296: point = 38, n_alt = 3
   Insn 295: point = 39, n_alt = 0
   Insn 294: point = 41, n_alt = 0
   Insn 293: point = 43, n_alt = -2
   Insn 292: point = 45, n_alt = -2
   Insn 291: point = 47, n_alt = 0
   Insn 290: point = 49, n_alt = 0
   Insn 289: point = 51, n_alt = 0
   Insn 288: point = 52, n_alt = -2
   Insn 287: point = 53, n_alt = 3
   Insn 286: point = 54, n_alt = 3
   Insn 285: point = 56, n_alt = 3
   Insn 284: point = 57, n_alt = 5
   Insn 283: point = 58, n_alt = 3
  BB 21
   Insn 276: point = 60, n_alt = -1
   Insn 275: point = 60, n_alt = 0
   Insn 274: point = 61, n_alt = 4
   Insn 273: point = 63, n_alt = -2
   Insn 272: point = 65, n_alt = 0
   Insn 341: point = 67, n_alt = -2
	Hard reg 2 is preferable by r253 with profit 1000
   Insn 271: point = 69, n_alt = 0
   Insn 340: point = 70, n_alt = -2
	Hard reg 2 is preferable by r253 with profit 1000
	Hard reg 1 is preferable by r253 with profit 1000
   Insn 270: point = 71, n_alt = -2
   Insn 269: point = 73, n_alt = 3
   Insn 268: point = 74, n_alt = 0
   Insn 267: point = 76, n_alt = 0
   Insn 266: point = 78, n_alt = -2
   Insn 265: point = 80, n_alt = -2
   Insn 264: point = 82, n_alt = 0
   Insn 263: point = 84, n_alt = 0
   Insn 262: point = 86, n_alt = 0
   Insn 261: point = 87, n_alt = -2
   Insn 260: point = 88, n_alt = 3
   Insn 259: point = 89, n_alt = 3
   Insn 258: point = 91, n_alt = 3
   Insn 257: point = 92, n_alt = 5
   Insn 256: point = 93, n_alt = 3
  BB 19
   Insn 249: point = 95, n_alt = -1
   Insn 248: point = 95, n_alt = 0
   Insn 247: point = 96, n_alt = 4
   Insn 246: point = 98, n_alt = -2
   Insn 245: point = 100, n_alt = 0
   Insn 339: point = 102, n_alt = -2
	Hard reg 2 is preferable by r252 with profit 1000
   Insn 244: point = 104, n_alt = 0
   Insn 338: point = 105, n_alt = -2
	Hard reg 2 is preferable by r252 with profit 1000
	Hard reg 1 is preferable by r252 with profit 1000
   Insn 243: point = 106, n_alt = -2
   Insn 242: point = 108, n_alt = 3
   Insn 241: point = 109, n_alt = 0
   Insn 240: point = 111, n_alt = 0
   Insn 239: point = 113, n_alt = -2
   Insn 238: point = 115, n_alt = -2
   Insn 237: point = 117, n_alt = 0
   Insn 236: point = 119, n_alt = 0
   Insn 235: point = 121, n_alt = 0
   Insn 234: point = 122, n_alt = -2
   Insn 233: point = 123, n_alt = 3
   Insn 232: point = 124, n_alt = 3
   Insn 231: point = 126, n_alt = 3
   Insn 230: point = 127, n_alt = 5
   Insn 229: point = 128, n_alt = 3
  BB 17
   Insn 222: point = 130, n_alt = -1
   Insn 221: point = 130, n_alt = 0
   Insn 220: point = 131, n_alt = 4
   Insn 219: point = 133, n_alt = -2
   Insn 218: point = 135, n_alt = 0
   Insn 337: point = 137, n_alt = -2
	Hard reg 2 is preferable by r251 with profit 1000
   Insn 217: point = 139, n_alt = 0
   Insn 336: point = 140, n_alt = -2
	Hard reg 2 is preferable by r251 with profit 1000
	Hard reg 1 is preferable by r251 with profit 1000
   Insn 216: point = 141, n_alt = -2
   Insn 215: point = 143, n_alt = 3
   Insn 214: point = 144, n_alt = 0
   Insn 213: point = 146, n_alt = 0
   Insn 212: point = 148, n_alt = -2
   Insn 211: point = 150, n_alt = -2
   Insn 210: point = 152, n_alt = 0
   Insn 209: point = 154, n_alt = 0
   Insn 208: point = 156, n_alt = 0
   Insn 207: point = 157, n_alt = -2
   Insn 206: point = 158, n_alt = 3
   Insn 205: point = 159, n_alt = 3
   Insn 204: point = 161, n_alt = 3
   Insn 203: point = 162, n_alt = 5
   Insn 202: point = 163, n_alt = 3
  BB 15
   Insn 195: point = 165, n_alt = -1
   Insn 194: point = 165, n_alt = 0
   Insn 193: point = 166, n_alt = 4
   Insn 192: point = 168, n_alt = -2
   Insn 191: point = 170, n_alt = 0
   Insn 335: point = 172, n_alt = -2
	Hard reg 2 is preferable by r250 with profit 1000
   Insn 190: point = 174, n_alt = 0
   Insn 334: point = 175, n_alt = -2
	Hard reg 2 is preferable by r250 with profit 1000
	Hard reg 1 is preferable by r250 with profit 1000
   Insn 189: point = 176, n_alt = -2
   Insn 188: point = 178, n_alt = 3
   Insn 187: point = 179, n_alt = 0
   Insn 186: point = 181, n_alt = 0
   Insn 185: point = 183, n_alt = -2
   Insn 184: point = 185, n_alt = -2
   Insn 183: point = 187, n_alt = 0
   Insn 182: point = 189, n_alt = 0
   Insn 181: point = 191, n_alt = 0
   Insn 180: point = 192, n_alt = -2
   Insn 179: point = 193, n_alt = 3
   Insn 178: point = 194, n_alt = 3
   Insn 177: point = 196, n_alt = 3
  BB 13
   Insn 170: point = 197, n_alt = -1
   Insn 169: point = 197, n_alt = 0
   Insn 168: point = 198, n_alt = 4
   Insn 167: point = 200, n_alt = -2
   Insn 166: point = 202, n_alt = 0
   Insn 333: point = 204, n_alt = -2
	Hard reg 1 is preferable by r249 with profit 1000
   Insn 165: point = 206, n_alt = 0
   Insn 332: point = 207, n_alt = -2
	Hard reg 1 is preferable by r249 with profit 1000
	Hard reg 0 is preferable by r249 with profit 1000
   Insn 164: point = 208, n_alt = -2
   Insn 163: point = 210, n_alt = 0
   Insn 162: point = 212, n_alt = 3
  BB 12
   Insn 160: point = 213, n_alt = -1
   Insn 159: point = 213, n_alt = 0
   Insn 158: point = 213, n_alt = 1
   Insn 157: point = 214, n_alt = 0
   Insn 156: point = 216, n_alt = -2
   Insn 155: point = 217, n_alt = 0
   Insn 154: point = 217, n_alt = 0
   Insn 153: point = 217, n_alt = -2
   Insn 152: point = 218, n_alt = 3
   Insn 151: point = 218, n_alt = -2
   Insn 150: point = 219, n_alt = -2
   Insn 149: point = 220, n_alt = -2
   Insn 148: point = 221, n_alt = -2
   Insn 147: point = 222, n_alt = 0
   Insn 146: point = 223, n_alt = 0
   Insn 145: point = 224, n_alt = 0
   Insn 144: point = 224, n_alt = 0
   Insn 143: point = 224, n_alt = 3
   Insn 142: point = 225, n_alt = 3
   Insn 141: point = 226, n_alt = 3
  BB 10
   Insn 134: point = 229, n_alt = -1
   Insn 133: point = 229, n_alt = 0
   Insn 132: point = 230, n_alt = 4
   Insn 131: point = 232, n_alt = -2
   Insn 130: point = 234, n_alt = 0
   Insn 331: point = 236, n_alt = -2
	Hard reg 5 is preferable by r248 with profit 1000
   Insn 129: point = 238, n_alt = 0
   Insn 330: point = 239, n_alt = -2
	Hard reg 5 is preferable by r248 with profit 1000
	Hard reg 1 is preferable by r248 with profit 1000
   Insn 128: point = 240, n_alt = -2
   Insn 127: point = 242, n_alt = 3
   Insn 126: point = 243, n_alt = 0
   Insn 125: point = 245, n_alt = 0
   Insn 124: point = 247, n_alt = -2
   Insn 123: point = 249, n_alt = -2
   Insn 122: point = 251, n_alt = 0
   Insn 121: point = 253, n_alt = 0
   Insn 120: point = 255, n_alt = 0
   Insn 119: point = 256, n_alt = -2
   Insn 118: point = 257, n_alt = 3
   Insn 117: point = 258, n_alt = 3
   Insn 116: point = 260, n_alt = 3
   Insn 115: point = 261, n_alt = 3
  BB 8
   Insn 108: point = 264, n_alt = -1
   Insn 107: point = 264, n_alt = 0
   Insn 106: point = 265, n_alt = 4
   Insn 105: point = 267, n_alt = -2
   Insn 104: point = 269, n_alt = 0
   Insn 329: point = 271, n_alt = -2
	Hard reg 4 is preferable by r247 with profit 1000
   Insn 103: point = 273, n_alt = 0
   Insn 328: point = 274, n_alt = -2
	Hard reg 4 is preferable by r247 with profit 1000
	Hard reg 1 is preferable by r247 with profit 1000
   Insn 102: point = 275, n_alt = -2
   Insn 101: point = 277, n_alt = 3
   Insn 100: point = 278, n_alt = 0
   Insn 99: point = 280, n_alt = 0
   Insn 98: point = 282, n_alt = -2
   Insn 97: point = 284, n_alt = -2
   Insn 96: point = 286, n_alt = 0
   Insn 95: point = 288, n_alt = 0
   Insn 94: point = 290, n_alt = 0
   Insn 93: point = 291, n_alt = -2
   Insn 92: point = 292, n_alt = 3
   Insn 91: point = 293, n_alt = 3
   Insn 90: point = 295, n_alt = 3
   Insn 89: point = 296, n_alt = 3
  BB 6
   Insn 82: point = 299, n_alt = -1
   Insn 81: point = 299, n_alt = 0
   Insn 80: point = 300, n_alt = 4
   Insn 79: point = 302, n_alt = -2
   Insn 78: point = 304, n_alt = 0
   Insn 327: point = 306, n_alt = -2
	Hard reg 4 is preferable by r246 with profit 1000
   Insn 77: point = 308, n_alt = 0
   Insn 326: point = 309, n_alt = -2
	Hard reg 4 is preferable by r246 with profit 1000
	Hard reg 1 is preferable by r246 with profit 1000
   Insn 76: point = 310, n_alt = -2
   Insn 75: point = 312, n_alt = 3
   Insn 74: point = 313, n_alt = 0
   Insn 73: point = 315, n_alt = 0
   Insn 72: point = 317, n_alt = -2
   Insn 71: point = 319, n_alt = -2
   Insn 70: point = 321, n_alt = 0
   Insn 69: point = 323, n_alt = 0
   Insn 68: point = 325, n_alt = 0
   Insn 67: point = 326, n_alt = -2
   Insn 66: point = 327, n_alt = 3
   Insn 65: point = 328, n_alt = 3
   Insn 64: point = 330, n_alt = 3
   Insn 63: point = 331, n_alt = 3
   Insn 62: point = 333, n_alt = 0
   Insn 61: point = 335, n_alt = 0
   Insn 60: point = 337, n_alt = -2
   Insn 59: point = 339, n_alt = -2
   Insn 58: point = 341, n_alt = 0
   Insn 57: point = 343, n_alt = 0
   Insn 56: point = 345, n_alt = 0
   Insn 55: point = 346, n_alt = -2
   Insn 54: point = 347, n_alt = 3
   Insn 53: point = 348, n_alt = 3
   Insn 52: point = 350, n_alt = 3
   Insn 51: point = 351, n_alt = 3
  BB 4
   Insn 44: point = 354, n_alt = -1
   Insn 43: point = 354, n_alt = 0
   Insn 42: point = 355, n_alt = 4
   Insn 41: point = 357, n_alt = -2
   Insn 40: point = 359, n_alt = 0
   Insn 325: point = 361, n_alt = -2
	Hard reg 2 is preferable by r245 with profit 1000
   Insn 39: point = 363, n_alt = 0
   Insn 324: point = 364, n_alt = -2
	Hard reg 2 is preferable by r245 with profit 1000
	Hard reg 1 is preferable by r245 with profit 1000
   Insn 38: point = 365, n_alt = -2
   Insn 37: point = 367, n_alt = 3
   Insn 36: point = 368, n_alt = 0
   Insn 35: point = 370, n_alt = 0
   Insn 34: point = 372, n_alt = -2
   Insn 33: point = 374, n_alt = -2
   Insn 32: point = 376, n_alt = 0
   Insn 31: point = 378, n_alt = 0
   Insn 30: point = 380, n_alt = 0
   Insn 29: point = 381, n_alt = -2
   Insn 28: point = 382, n_alt = 3
   Insn 27: point = 383, n_alt = 3
   Insn 26: point = 385, n_alt = 3
  BB 2
   Insn 19: point = 386, n_alt = -1
   Insn 18: point = 386, n_alt = 0
   Insn 17: point = 387, n_alt = 4
   Insn 16: point = 389, n_alt = -2
   Insn 15: point = 391, n_alt = 0
   Insn 323: point = 393, n_alt = -2
	Hard reg 1 is preferable by r244 with profit 1000
   Insn 14: point = 395, n_alt = 0
   Insn 322: point = 396, n_alt = -2
	Hard reg 1 is preferable by r244 with profit 1000
	Hard reg 0 is preferable by r244 with profit 1000
   Insn 13: point = 397, n_alt = -2
   Insn 12: point = 399, n_alt = 0
   Insn 11: point = 401, n_alt = 3
   Insn 7: point = 402, n_alt = 5
   Insn 6: point = 402, n_alt = 5
   Insn 5: point = 402, n_alt = 5
   Insn 4: point = 402, n_alt = 5
   Insn 3: point = 402, n_alt = 5
   Insn 2: point = 402, n_alt = 5
 r82: [369..383]
 r83: [371..372]
 r84: [369..370]
 r85: [352..368]
 r86: [223..351]
 r87: [334..348]
 r88: [336..337]
 r89: [334..335]
 r90: [332..333]
 r91: [222..331]
 r92: [314..328]
 r93: [316..317]
 r94: [314..315]
 r95: [297..313]
 r96: [220..296]
 r97: [279..293]
 r98: [281..282]
 r99: [279..280]
 r100: [262..278]
 r101: [218..261]
 r102: [244..258]
 r103: [246..247]
 r104: [244..245]
 r105: [227..243]
 r106: [217..226]
 r107: [215..216]
 r108: [180..194]
 r109: [182..183]
 r110: [180..181]
 r111: [162..179]
 r112: [145..159]
 r113: [147..148]
 r114: [145..146]
 r115: [127..144]
 r116: [110..124]
 r117: [112..113]
 r118: [110..111]
 r119: [92..109]
 r120: [75..89]
 r121: [77..78]
 r122: [75..76]
 r123: [57..74]
 r124: [40..54]
 r125: [42..43]
 r126: [40..41]
 r127: [22..39]
 r128: [398..399]
 r129: [366..367]
 r130: [311..312]
 r131: [276..277]
 r132: [241..242]
 r133: [209..210]
 r134: [177..178]
 r135: [142..143]
 r136: [107..108]
 r137: [72..73]
 r138: [37..38]
 r139: [386..397] [0..1]
 r140: [392..393]
 r141: [390..391]
 r142: [388..389]
 r143: [386..387]
 r144: [354..365] [2..3]
 r145: [360..361]
 r146: [358..359]
 r147: [356..357]
 r148: [354..355]
 r149: [299..310] [4..5]
 r150: [305..306]
 r151: [303..304]
 r152: [301..302]
 r153: [299..300]
 r154: [264..275] [6..7]
 r155: [270..271]
 r156: [268..269]
 r157: [266..267]
 r158: [264..265]
 r159: [229..240] [8..9]
 r160: [235..236]
 r161: [233..234]
 r162: [231..232]
 r163: [229..230]
 r164: [197..208] [10..11]
 r165: [203..204]
 r166: [201..202]
 r167: [199..200]
 r168: [197..198]
 r169: [165..176] [12..13]
 r170: [171..172]
 r171: [169..170]
 r172: [167..168]
 r173: [165..166]
 r174: [130..141] [14..15]
 r175: [136..137]
 r176: [134..135]
 r177: [132..133]
 r178: [130..131]
 r179: [95..106] [16..17]
 r180: [101..102]
 r181: [99..100]
 r182: [97..98]
 r183: [95..96]
 r184: [60..71] [18..19]
 r185: [66..67]
 r186: [64..65]
 r187: [62..63]
 r188: [60..61]
 r189: [25..36] [20..21]
 r190: [31..32]
 r191: [29..30]
 r192: [27..28]
 r193: [25..26]
 r194: [400..401]
 r195: [384..385]
 r196: [379..382]
 r197: [377..381] [373..374]
 r198: [375..376]
 r199: [349..350]
 r200: [344..347]
 r201: [342..346] [338..339]
 r202: [340..341]
 r203: [329..330]
 r204: [324..327]
 r205: [322..326] [318..319]
 r206: [320..321]
 r207: [294..295]
 r208: [289..292]
 r209: [287..291] [283..284]
 r210: [285..286]
 r211: [259..260]
 r212: [254..257]
 r213: [252..256] [248..249]
 r214: [250..251]
 r215: [221..225]
 r216: [219..224]
 r217: [213..214]
 r218: [211..212]
 r219: [195..196]
 r220: [190..193]
 r221: [188..192] [184..185]
 r222: [186..187]
 r223: [162..163]
 r224: [160..161]
 r225: [155..158]
 r226: [153..157] [149..150]
 r227: [151..152]
 r228: [127..128]
 r229: [125..126]
 r230: [120..123]
 r231: [118..122] [114..115]
 r232: [116..117]
 r233: [92..93]
 r234: [90..91]
 r235: [85..88]
 r236: [83..87] [79..80]
 r237: [81..82]
 r238: [57..58]
 r239: [55..56]
 r240: [50..53]
 r241: [48..52] [44..45]
 r242: [46..47]
 r243: [22..23]
 r244: [394..396]
 r245: [362..364]
 r246: [307..309]
 r247: [272..274]
 r248: [237..239]
 r249: [205..207]
 r250: [173..175]
 r251: [138..140]
 r252: [103..105]
 r253: [68..70]
 r254: [33..35]
Compressing live ranges: from 402 to 296 - 73%
Ranges after the compression:
 r82: [270..279]
 r83: [272..273]
 r84: [270..271]
 r85: [258..269]
 r86: [170..257]
 r87: [246..255]
 r88: [248..249]
 r89: [246..247]
 r90: [244..245]
 r91: [170..243]
 r92: [232..241]
 r93: [234..235]
 r94: [232..233]
 r95: [220..231]
 r96: [170..219]
 r97: [208..217]
 r98: [210..211]
 r99: [208..209]
 r100: [196..207]
 r101: [170..195]
 r102: [184..193]
 r103: [186..187]
 r104: [184..185]
 r105: [172..183]
 r106: [170..171]
 r107: [168..169]
 r108: [140..149]
 r109: [142..143]
 r110: [140..141]
 r111: [126..139]
 r112: [114..123]
 r113: [116..117]
 r114: [114..115]
 r115: [100..113]
 r116: [88..97]
 r117: [90..91]
 r118: [88..89]
 r119: [74..87]
 r120: [62..71]
 r121: [64..65]
 r122: [62..63]
 r123: [48..61]
 r124: [36..45]
 r125: [38..39]
 r126: [36..37]
 r127: [22..35]
 r128: [292..293]
 r129: [268..269]
 r130: [230..231]
 r131: [206..207]
 r132: [182..183]
 r133: [162..163]
 r134: [138..139]
 r135: [112..113]
 r136: [86..87]
 r137: [60..61]
 r138: [34..35]
 r139: [282..291] [0..1]
 r140: [288..289]
 r141: [286..287]
 r142: [284..285]
 r143: [282..283]
 r144: [258..267] [2..3]
 r145: [264..265]
 r146: [262..263]
 r147: [260..261]
 r148: [258..259]
 r149: [220..229] [4..5]
 r150: [226..227]
 r151: [224..225]
 r152: [222..223]
 r153: [220..221]
 r154: [196..205] [6..7]
 r155: [202..203]
 r156: [200..201]
 r157: [198..199]
 r158: [196..197]
 r159: [172..181] [8..9]
 r160: [178..179]
 r161: [176..177]
 r162: [174..175]
 r163: [172..173]
 r164: [152..161] [10..11]
 r165: [158..159]
 r166: [156..157]
 r167: [154..155]
 r168: [152..153]
 r169: [128..137] [12..13]
 r170: [134..135]
 r171: [132..133]
 r172: [130..131]
 r173: [128..129]
 r174: [102..111] [14..15]
 r175: [108..109]
 r176: [106..107]
 r177: [104..105]
 r178: [102..103]
 r179: [76..85] [16..17]
 r180: [82..83]
 r181: [80..81]
 r182: [78..79]
 r183: [76..77]
 r184: [50..59] [18..19]
 r185: [56..57]
 r186: [54..55]
 r187: [52..53]
 r188: [50..51]
 r189: [24..33] [20..21]
 r190: [30..31]
 r191: [28..29]
 r192: [26..27]
 r193: [24..25]
 r194: [294..295]
 r195: [280..281]
 r196: [278..279]
 r197: [278..279] [274..275]
 r198: [276..277]
 r199: [256..257]
 r200: [254..255]
 r201: [254..255] [250..251]
 r202: [252..253]
 r203: [242..243]
 r204: [240..241]
 r205: [240..241] [236..237]
 r206: [238..239]
 r207: [218..219]
 r208: [216..217]
 r209: [216..217] [212..213]
 r210: [214..215]
 r211: [194..195]
 r212: [192..193]
 r213: [192..193] [188..189]
 r214: [190..191]
 r215: [170..171]
 r216: [170..171]
 r217: [166..167]
 r218: [164..165]
 r219: [150..151]
 r220: [148..149]
 r221: [148..149] [144..145]
 r222: [146..147]
 r223: [126..127]
 r224: [124..125]
 r225: [122..123]
 r226: [122..123] [118..119]
 r227: [120..121]
 r228: [100..101]
 r229: [98..99]
 r230: [96..97]
 r231: [96..97] [92..93]
 r232: [94..95]
 r233: [74..75]
 r234: [72..73]
 r235: [70..71]
 r236: [70..71] [66..67]
 r237: [68..69]
 r238: [48..49]
 r239: [46..47]
 r240: [44..45]
 r241: [44..45] [40..41]
 r242: [42..43]
 r243: [22..23]
 r244: [290..291]
 r245: [266..267]
 r246: [228..229]
 r247: [204..205]
 r248: [180..181]
 r249: [160..161]
 r250: [136..137]
 r251: [110..111]
 r252: [84..85]
 r253: [58..59]
 r254: [32..33]

********** Assignment #1: **********

	 Assigning to 244 (cl=GENERAL_REGS, orig=140, freq=3000, tfirst=244, tfreq=3000)...
	   Assign 1 to reload r244 (freq=3000)
	 Assigning to 245 (cl=GENERAL_REGS, orig=145, freq=3000, tfirst=245, tfreq=3000)...
	   Assign 2 to reload r245 (freq=3000)
	 Assigning to 246 (cl=GENERAL_REGS, orig=150, freq=3000, tfirst=246, tfreq=3000)...
	   Assign 4 to reload r246 (freq=3000)
	 Assigning to 247 (cl=GENERAL_REGS, orig=155, freq=3000, tfirst=247, tfreq=3000)...
	   Assign 4 to reload r247 (freq=3000)
	 Assigning to 248 (cl=GENERAL_REGS, orig=160, freq=3000, tfirst=248, tfreq=3000)...
	   Assign 5 to reload r248 (freq=3000)
	 Assigning to 249 (cl=GENERAL_REGS, orig=165, freq=3000, tfirst=249, tfreq=3000)...
	   Assign 1 to reload r249 (freq=3000)
	 Assigning to 250 (cl=GENERAL_REGS, orig=170, freq=3000, tfirst=250, tfreq=3000)...
	   Assign 2 to reload r250 (freq=3000)
	 Assigning to 251 (cl=GENERAL_REGS, orig=175, freq=3000, tfirst=251, tfreq=3000)...
	   Assign 2 to reload r251 (freq=3000)
	 Assigning to 252 (cl=GENERAL_REGS, orig=180, freq=3000, tfirst=252, tfreq=3000)...
	   Assign 2 to reload r252 (freq=3000)
	 Assigning to 253 (cl=GENERAL_REGS, orig=185, freq=3000, tfirst=253, tfreq=3000)...
	   Assign 2 to reload r253 (freq=3000)
	 Assigning to 254 (cl=GENERAL_REGS, orig=190, freq=3000, tfirst=254, tfreq=3000)...
	   Assign 2 to reload r254 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=64, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 27
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 51
changing reg in insn 37
changing reg in insn 51
changing reg in insn 146
changing reg in insn 53
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 147
changing reg in insn 65
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 74
changing reg in insn 89
changing reg in insn 75
changing reg in insn 89
changing reg in insn 149
changing reg in insn 91
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 100
changing reg in insn 115
changing reg in insn 101
changing reg in insn 115
changing reg in insn 151
changing reg in insn 117
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 141
changing reg in insn 127
changing reg in insn 141
changing reg in insn 153
changing reg in insn 156
changing reg in insn 157
changing reg in insn 178
changing reg in insn 185
changing reg in insn 186
changing reg in insn 186
changing reg in insn 187
changing reg in insn 203
changing reg in insn 188
changing reg in insn 205
changing reg in insn 212
changing reg in insn 213
changing reg in insn 213
changing reg in insn 214
changing reg in insn 230
changing reg in insn 215
changing reg in insn 232
changing reg in insn 239
changing reg in insn 240
changing reg in insn 240
changing reg in insn 241
changing reg in insn 257
changing reg in insn 242
changing reg in insn 259
changing reg in insn 266
changing reg in insn 267
changing reg in insn 267
changing reg in insn 268
changing reg in insn 284
changing reg in insn 269
changing reg in insn 286
changing reg in insn 293
changing reg in insn 294
changing reg in insn 294
changing reg in insn 295
changing reg in insn 311
changing reg in insn 296
changing reg in insn 12
changing reg in insn 13
changing reg in insn 37
changing reg in insn 38
changing reg in insn 75
changing reg in insn 76
changing reg in insn 101
changing reg in insn 102
changing reg in insn 127
changing reg in insn 128
changing reg in insn 163
changing reg in insn 164
changing reg in insn 188
changing reg in insn 189
changing reg in insn 215
changing reg in insn 216
changing reg in insn 242
changing reg in insn 243
changing reg in insn 269
changing reg in insn 270
changing reg in insn 296
changing reg in insn 297
changing reg in insn 13
changing reg in insn 21
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 38
changing reg in insn 46
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 76
changing reg in insn 84
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 81
changing reg in insn 102
changing reg in insn 110
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 107
changing reg in insn 128
changing reg in insn 136
changing reg in insn 130
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 164
changing reg in insn 172
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 169
changing reg in insn 189
changing reg in insn 197
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 193
changing reg in insn 193
changing reg in insn 194
changing reg in insn 216
changing reg in insn 224
changing reg in insn 218
changing reg in insn 218
changing reg in insn 219
changing reg in insn 219
changing reg in insn 220
changing reg in insn 220
changing reg in insn 221
changing reg in insn 243
changing reg in insn 251
changing reg in insn 245
changing reg in insn 245
changing reg in insn 246
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 248
changing reg in insn 270
changing reg in insn 278
changing reg in insn 272
changing reg in insn 272
changing reg in insn 273
changing reg in insn 273
changing reg in insn 274
changing reg in insn 274
changing reg in insn 275
changing reg in insn 297
changing reg in insn 305
changing reg in insn 299
changing reg in insn 299
changing reg in insn 300
changing reg in insn 300
changing reg in insn 301
changing reg in insn 301
changing reg in insn 302
changing reg in insn 11
changing reg in insn 12
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 31
changing reg in insn 29
changing reg in insn 31
changing reg in insn 33
changing reg in insn 31
changing reg in insn 30
changing reg in insn 29
changing reg in insn 34
changing reg in insn 32
changing reg in insn 31
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 57
changing reg in insn 55
changing reg in insn 57
changing reg in insn 59
changing reg in insn 57
changing reg in insn 56
changing reg in insn 55
changing reg in insn 60
changing reg in insn 58
changing reg in insn 57
changing reg in insn 56
changing reg in insn 58
changing reg in insn 59
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 69
changing reg in insn 67
changing reg in insn 69
changing reg in insn 71
changing reg in insn 69
changing reg in insn 68
changing reg in insn 67
changing reg in insn 72
changing reg in insn 70
changing reg in insn 69
changing reg in insn 68
changing reg in insn 70
changing reg in insn 71
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 95
changing reg in insn 93
changing reg in insn 95
changing reg in insn 97
changing reg in insn 95
changing reg in insn 94
changing reg in insn 93
changing reg in insn 98
changing reg in insn 96
changing reg in insn 95
changing reg in insn 94
changing reg in insn 96
changing reg in insn 97
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 121
changing reg in insn 119
changing reg in insn 121
changing reg in insn 123
changing reg in insn 121
changing reg in insn 120
changing reg in insn 119
changing reg in insn 124
changing reg in insn 122
changing reg in insn 121
changing reg in insn 120
changing reg in insn 122
changing reg in insn 123
changing reg in insn 142
changing reg in insn 148
changing reg in insn 143
changing reg in insn 150
changing reg in insn 157
changing reg in insn 158
changing reg in insn 162
changing reg in insn 163
changing reg in insn 177
changing reg in insn 178
changing reg in insn 179
changing reg in insn 182
changing reg in insn 180
changing reg in insn 182
changing reg in insn 184
changing reg in insn 182
changing reg in insn 181
changing reg in insn 180
changing reg in insn 185
changing reg in insn 183
changing reg in insn 182
changing reg in insn 181
changing reg in insn 183
changing reg in insn 184
changing reg in insn 202
changing reg in insn 203
changing reg in insn 204
changing reg in insn 205
changing reg in insn 206
changing reg in insn 209
changing reg in insn 207
changing reg in insn 209
changing reg in insn 211
changing reg in insn 209
changing reg in insn 208
changing reg in insn 207
changing reg in insn 212
changing reg in insn 210
changing reg in insn 209
changing reg in insn 208
changing reg in insn 210
changing reg in insn 211
changing reg in insn 229
changing reg in insn 230
changing reg in insn 231
changing reg in insn 232
changing reg in insn 233
changing reg in insn 236
changing reg in insn 234
changing reg in insn 236
changing reg in insn 238
changing reg in insn 236
changing reg in insn 235
changing reg in insn 234
changing reg in insn 239
changing reg in insn 237
changing reg in insn 236
changing reg in insn 235
changing reg in insn 237
changing reg in insn 238
changing reg in insn 256
changing reg in insn 257
changing reg in insn 258
changing reg in insn 259
changing reg in insn 260
changing reg in insn 263
changing reg in insn 261
changing reg in insn 263
changing reg in insn 265
changing reg in insn 263
changing reg in insn 262
changing reg in insn 261
changing reg in insn 266
changing reg in insn 264
changing reg in insn 263
changing reg in insn 262
changing reg in insn 264
changing reg in insn 265
changing reg in insn 283
changing reg in insn 284
changing reg in insn 285
changing reg in insn 286
changing reg in insn 287
changing reg in insn 290
changing reg in insn 288
changing reg in insn 290
changing reg in insn 292
changing reg in insn 290
changing reg in insn 289
changing reg in insn 288
changing reg in insn 293
changing reg in insn 291
changing reg in insn 290
changing reg in insn 289
changing reg in insn 291
changing reg in insn 292
changing reg in insn 310
changing reg in insn 311
deleting insn with uid = 13.
deleting insn with uid = 323.
deleting insn with uid = 16.
deleting insn with uid = 33.
deleting insn with uid = 34.
deleting insn with uid = 38.
deleting insn with uid = 325.
deleting insn with uid = 41.
deleting insn with uid = 59.
deleting insn with uid = 60.
deleting insn with uid = 71.
deleting insn with uid = 72.
deleting insn with uid = 76.
deleting insn with uid = 327.
deleting insn with uid = 79.
deleting insn with uid = 97.
deleting insn with uid = 98.
deleting insn with uid = 102.
deleting insn with uid = 329.
deleting insn with uid = 105.
deleting insn with uid = 123.
deleting insn with uid = 124.
deleting insn with uid = 128.
deleting insn with uid = 331.
deleting insn with uid = 131.
deleting insn with uid = 156.
deleting insn with uid = 164.
deleting insn with uid = 333.
deleting insn with uid = 167.
deleting insn with uid = 184.
deleting insn with uid = 185.
deleting insn with uid = 189.
deleting insn with uid = 335.
deleting insn with uid = 192.
deleting insn with uid = 211.
deleting insn with uid = 212.
deleting insn with uid = 216.
deleting insn with uid = 337.
deleting insn with uid = 219.
deleting insn with uid = 238.
deleting insn with uid = 239.
deleting insn with uid = 243.
deleting insn with uid = 339.
deleting insn with uid = 246.
deleting insn with uid = 265.
deleting insn with uid = 266.
deleting insn with uid = 270.
deleting insn with uid = 341.
deleting insn with uid = 273.
deleting insn with uid = 292.
deleting insn with uid = 293.
deleting insn with uid = 297.
deleting insn with uid = 343.
deleting insn with uid = 300.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 47.
verify found no changes in insn with uid = 85.
verify found no changes in insn with uid = 111.
verify found no changes in insn with uid = 137.
verify found no changes in insn with uid = 154.
verify found no changes in insn with uid = 173.
verify found no changes in insn with uid = 198.
verify found no changes in insn with uid = 225.
verify found no changes in insn with uid = 252.
verify found no changes in insn with uid = 279.
verify found no changes in insn with uid = 306.


addOldest

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8] 37 [r9] 38 [r10]
;;  ref usage 	r0={89d,88u} r1={47d,54u,10e} r2={45d,33u} r4={26d,14u} r5={31d,19u} r6={1d,66u} r7={6d,46u} r8={12d} r9={12d} r10={12d} r11={12d} r12={12d} r13={12d} r14={12d} r15={12d} r17={110d,12u} r18={12d} r19={1d,1u,2e} r20={13d} r21={13d} r22={13d} r23={13d} r24={13d} r25={13d} r26={13d} r27={13d} r28={12d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={15d,3u} r37={14d,2u} r38={13d,1u} r39={12d} r44={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} r53={12d} r54={12d} r55={12d} r56={12d} r57={12d} r58={12d} r59={12d} r60={12d} r61={12d} r62={12d} r63={12d} r64={12d} r65={12d} r66={12d} r67={12d} r68={12d} r69={12d} r70={12d} r71={12d} r72={12d} r73={12d} r74={12d} r75={12d} 
;;    total ref usage 1453{1102d,339u,12e} in 231{219 regular + 12 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8] 37 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8] 37 [r9]
;; lr  def 	 17 [flags] 128 139 140 141 142 143 194
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])
        (reg:DI 5 di [ q ])) "queryTAD.c":71:111 66 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])
        (reg:DI 4 si [ ID ])) "queryTAD.c":71:111 66 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 month+0 S8 A64])
        (reg:DI 1 dx [ month ])) "queryTAD.c":71:111 66 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 dayN+0 S8 A64])
        (reg:DI 2 cx [ dayN ])) "queryTAD.c":71:111 66 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 time+0 S8 A64])
        (reg:DI 36 r8 [ time ])) "queryTAD.c":71:111 66 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 pedestrians+0 S8 A64])
        (reg:DI 37 r9 [ pedestrians ])) "queryTAD.c":71:111 66 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg/f:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":72:177 66 {*movdi_internal}
     (nil))
(insn 12 11 322 2 (parallel [
            (set (reg/f:DI 0 ax [orig:128 _63 ] [128])
                (plus:DI (reg/f:DI 0 ax [194])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:177 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 322 12 14 2 (set (reg:DI 1 dx [orig:140 _86 ] [140])
        (reg:DI 0 ax [orig:139 _85 ] [139])) "queryTAD.c":72:177 66 {*movdi_internal}
     (nil))
(insn 14 322 15 2 (parallel [
            (set (reg:DI 1 dx [orig:140 _86 ] [140])
                (lshiftrt:DI (reg:DI 1 dx [orig:140 _86 ] [140])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:177 566 {*lshrdi3_1}
     (nil))
(insn 15 14 17 2 (parallel [
            (set (reg:DI 1 dx [orig:141 _87 ] [141])
                (plus:DI (reg:DI 1 dx [orig:140 _86 ] [140])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:177 191 {*adddi_1}
     (nil))
(insn 17 15 18 2 (set (reg:QI 1 dx [orig:143 _89 ] [143])
        (mem:QI (reg/f:DI 1 dx [orig:142 _88 ] [142]) [10 *_88+0 S1 A8])) "queryTAD.c":72:177 69 {*movqi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:143 _89 ] [143])
            (const_int 0 [0]))) "queryTAD.c":72:177 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 19 18 20 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) "queryTAD.c":72:177 659 {*jcc}
     (nil)
 -> 24)
;;  succ:       4 [100.0% (guessed)] 
;;              3 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 [0.0% (guessed)]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:139 _85 ] [139])) "queryTAD.c":72:177 66 {*movdi_internal}
     (nil))
(call_insn 22 21 23 3 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":72:177 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 23 22 24)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2 [100.0% (guessed)] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 83 84 85 129 144 145 146 147 148 195 196 197 198
(code_label 24 23 25 4 47 (nil) [1 uses])
(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 4 (set (reg/f:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":72:177 66 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (reg/f:DI 2 cx [orig:82 _1 ] [82])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [195])
                (const_int 24 [0x18])) [7 q_49(D)->sensorsID+0 S8 A64])) "queryTAD.c":72:177 66 {*movdi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:DI 1 dx [196])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])) "queryTAD.c":72:188 66 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:DI 0 ax [197])
        (reg:DI 1 dx [196])) "queryTAD.c":72:188 66 {*movdi_internal}
     (nil))
(insn 30 29 31 4 (parallel [
            (set (reg:DI 0 ax [197])
                (ashift:DI (reg:DI 0 ax [197])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:188 520 {*ashldi3_1}
     (nil))
(insn 31 30 32 4 (parallel [
            (set (reg:DI 0 ax [197])
                (plus:DI (reg:DI 0 ax [197])
                    (reg:DI 1 dx [196])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:188 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [196])
            (const_int 5 [0x5]))
        (nil)))
(insn 32 31 35 4 (parallel [
            (set (reg:DI 0 ax [198])
                (ashift:DI (reg:DI 0 ax [197])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:188 520 {*ashldi3_1}
     (nil))
(insn 35 32 36 4 (parallel [
            (set (reg:DI 0 ax [orig:84 _3 ] [84])
                (plus:DI (reg:DI 0 ax [orig:83 _2 ] [83])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:188 191 {*adddi_1}
     (nil))
(insn 36 35 37 4 (parallel [
            (set (reg/f:DI 0 ax [orig:85 _4 ] [85])
                (plus:DI (reg:DI 0 ax [orig:84 _3 ] [84])
                    (reg/f:DI 2 cx [orig:82 _1 ] [82])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:188 191 {*adddi_1}
     (nil))
(insn 37 36 324 4 (parallel [
            (set (reg/f:DI 1 dx [orig:129 _64 ] [129])
                (plus:DI (reg/f:DI 0 ax [orig:85 _4 ] [85])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (nil))
(insn 324 37 39 4 (set (reg:DI 2 cx [orig:145 _91 ] [145])
        (reg:DI 1 dx [orig:144 _90 ] [144])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(insn 39 324 40 4 (parallel [
            (set (reg:DI 2 cx [orig:145 _91 ] [145])
                (lshiftrt:DI (reg:DI 2 cx [orig:145 _91 ] [145])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 566 {*lshrdi3_1}
     (nil))
(insn 40 39 42 4 (parallel [
            (set (reg:DI 2 cx [orig:146 _92 ] [146])
                (plus:DI (reg:DI 2 cx [orig:145 _91 ] [145])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (nil))
(insn 42 40 43 4 (set (reg:QI 2 cx [orig:148 _94 ] [148])
        (mem:QI (reg/f:DI 2 cx [orig:147 _93 ] [147]) [10 *_93+0 S1 A8])) "queryTAD.c":72:13 69 {*movqi_internal}
     (nil))
(insn 43 42 44 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:148 _94 ] [148])
            (const_int 0 [0]))) "queryTAD.c":72:13 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 44 43 45 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) "queryTAD.c":72:13 659 {*jcc}
     (nil)
 -> 49)
;;  succ:       6 [100.0% (guessed)] 
;;              5 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 144

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 [0.0% (guessed)]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 144
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 144
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 45 44 46 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 5 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:144 _90 ] [144])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(call_insn 47 46 48 5 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":72:13 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 48 47 49)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4 [100.0% (guessed)] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  def 	 17 [flags] 86 87 88 89 90 91 92 93 94 95 130 149 150 151 152 153 199 200 201 202 203 204 205 206
(code_label 49 48 50 6 48 (nil) [1 uses])
(note 50 49 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 6 (set (reg:DI 2 cx [orig:86 _5 ] [86])
        (mem:DI (plus:DI (reg/f:DI 0 ax [orig:85 _4 ] [85])
                (const_int 48 [0x30])) [2 _4->oldest.time+0 S8 A64])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(insn 52 51 53 6 (set (reg/f:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":72:145 66 {*movdi_internal}
     (nil))
(insn 53 52 54 6 (set (reg/f:DI 4 si [orig:87 _6 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [199])
                (const_int 24 [0x18])) [7 q_49(D)->sensorsID+0 S8 A64])) "queryTAD.c":72:145 66 {*movdi_internal}
     (nil))
(insn 54 53 55 6 (set (reg:DI 1 dx [200])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])) "queryTAD.c":72:156 66 {*movdi_internal}
     (nil))
(insn 55 54 56 6 (set (reg:DI 0 ax [201])
        (reg:DI 1 dx [200])) "queryTAD.c":72:156 66 {*movdi_internal}
     (nil))
(insn 56 55 57 6 (parallel [
            (set (reg:DI 0 ax [201])
                (ashift:DI (reg:DI 0 ax [201])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:156 520 {*ashldi3_1}
     (nil))
(insn 57 56 58 6 (parallel [
            (set (reg:DI 0 ax [201])
                (plus:DI (reg:DI 0 ax [201])
                    (reg:DI 1 dx [200])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:156 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [200])
            (const_int 5 [0x5]))
        (nil)))
(insn 58 57 61 6 (parallel [
            (set (reg:DI 0 ax [202])
                (ashift:DI (reg:DI 0 ax [201])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:156 520 {*ashldi3_1}
     (nil))
(insn 61 58 62 6 (parallel [
            (set (reg:DI 0 ax [orig:89 _8 ] [89])
                (plus:DI (reg:DI 0 ax [orig:88 _7 ] [88])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:156 191 {*adddi_1}
     (nil))
(insn 62 61 63 6 (parallel [
            (set (reg/f:DI 0 ax [orig:90 _9 ] [90])
                (plus:DI (reg:DI 0 ax [orig:89 _8 ] [89])
                    (reg/f:DI 4 si [orig:87 _6 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:156 191 {*adddi_1}
     (nil))
(insn 63 62 64 6 (parallel [
            (set (reg/f:DI 36 r8 [orig:91 _10 ] [91])
                (plus:DI (reg/f:DI 0 ax [orig:90 _9 ] [90])
                    (const_int 40 [0x28])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (nil))
(insn 64 63 65 6 (set (reg/f:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":72:103 66 {*movdi_internal}
     (nil))
(insn 65 64 66 6 (set (reg/f:DI 4 si [orig:92 _11 ] [92])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [203])
                (const_int 24 [0x18])) [7 q_49(D)->sensorsID+0 S8 A64])) "queryTAD.c":72:103 66 {*movdi_internal}
     (nil))
(insn 66 65 67 6 (set (reg:DI 1 dx [204])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])) "queryTAD.c":72:114 66 {*movdi_internal}
     (nil))
(insn 67 66 68 6 (set (reg:DI 0 ax [205])
        (reg:DI 1 dx [204])) "queryTAD.c":72:114 66 {*movdi_internal}
     (nil))
(insn 68 67 69 6 (parallel [
            (set (reg:DI 0 ax [205])
                (ashift:DI (reg:DI 0 ax [205])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:114 520 {*ashldi3_1}
     (nil))
(insn 69 68 70 6 (parallel [
            (set (reg:DI 0 ax [205])
                (plus:DI (reg:DI 0 ax [205])
                    (reg:DI 1 dx [204])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:114 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [204])
            (const_int 5 [0x5]))
        (nil)))
(insn 70 69 73 6 (parallel [
            (set (reg:DI 0 ax [206])
                (ashift:DI (reg:DI 0 ax [205])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:114 520 {*ashldi3_1}
     (nil))
(insn 73 70 74 6 (parallel [
            (set (reg:DI 0 ax [orig:94 _13 ] [94])
                (plus:DI (reg:DI 0 ax [orig:93 _12 ] [93])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:114 191 {*adddi_1}
     (nil))
(insn 74 73 75 6 (parallel [
            (set (reg/f:DI 0 ax [orig:95 _14 ] [95])
                (plus:DI (reg:DI 0 ax [orig:94 _13 ] [94])
                    (reg/f:DI 4 si [orig:92 _11 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:114 191 {*adddi_1}
     (nil))
(insn 75 74 326 6 (parallel [
            (set (reg/f:DI 1 dx [orig:130 _65 ] [130])
                (plus:DI (reg/f:DI 0 ax [orig:95 _14 ] [95])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (nil))
(insn 326 75 77 6 (set (reg:DI 4 si [orig:150 _96 ] [150])
        (reg:DI 1 dx [orig:149 _95 ] [149])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(insn 77 326 78 6 (parallel [
            (set (reg:DI 4 si [orig:150 _96 ] [150])
                (lshiftrt:DI (reg:DI 4 si [orig:150 _96 ] [150])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 566 {*lshrdi3_1}
     (nil))
(insn 78 77 80 6 (parallel [
            (set (reg:DI 4 si [orig:151 _97 ] [151])
                (plus:DI (reg:DI 4 si [orig:150 _96 ] [150])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (nil))
(insn 80 78 81 6 (set (reg:QI 4 si [orig:153 _99 ] [153])
        (mem:QI (reg/f:DI 4 si [orig:152 _98 ] [152]) [10 *_98+0 S1 A8])) "queryTAD.c":72:13 69 {*movqi_internal}
     (nil))
(insn 81 80 82 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 4 si [orig:153 _99 ] [153])
            (const_int 0 [0]))) "queryTAD.c":72:13 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 82 81 83 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 87)
            (pc))) "queryTAD.c":72:13 659 {*jcc}
     (nil)
 -> 87)
;;  succ:       8 [100.0% (guessed)] 
;;              7 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 91 95 149

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 [0.0% (guessed)]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 149
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 149
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 83 82 84 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 7 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:149 _95 ] [149])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(call_insn 85 84 86 7 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":72:13 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 86 85 87)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6 [100.0% (guessed)] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 91 95
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 95
;; lr  def 	 17 [flags] 96 97 98 99 100 131 154 155 156 157 158 207 208 209 210
(code_label 87 86 88 8 49 (nil) [1 uses])
(note 88 87 89 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 8 (set (reg:DI 38 r10 [orig:96 _15 ] [96])
        (mem:DI (plus:DI (reg/f:DI 0 ax [orig:95 _14 ] [95])
                (const_int 72 [0x48])) [2 _14->oldest.dayN+0 S8 A64])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(insn 90 89 91 8 (set (reg/f:DI 0 ax [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":72:61 66 {*movdi_internal}
     (nil))
(insn 91 90 92 8 (set (reg/f:DI 4 si [orig:97 _16 ] [97])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [207])
                (const_int 24 [0x18])) [7 q_49(D)->sensorsID+0 S8 A64])) "queryTAD.c":72:61 66 {*movdi_internal}
     (nil))
(insn 92 91 93 8 (set (reg:DI 1 dx [208])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])) "queryTAD.c":72:72 66 {*movdi_internal}
     (nil))
(insn 93 92 94 8 (set (reg:DI 0 ax [209])
        (reg:DI 1 dx [208])) "queryTAD.c":72:72 66 {*movdi_internal}
     (nil))
(insn 94 93 95 8 (parallel [
            (set (reg:DI 0 ax [209])
                (ashift:DI (reg:DI 0 ax [209])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:72 520 {*ashldi3_1}
     (nil))
(insn 95 94 96 8 (parallel [
            (set (reg:DI 0 ax [209])
                (plus:DI (reg:DI 0 ax [209])
                    (reg:DI 1 dx [208])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:72 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [208])
            (const_int 5 [0x5]))
        (nil)))
(insn 96 95 99 8 (parallel [
            (set (reg:DI 0 ax [210])
                (ashift:DI (reg:DI 0 ax [209])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:72 520 {*ashldi3_1}
     (nil))
(insn 99 96 100 8 (parallel [
            (set (reg:DI 0 ax [orig:99 _18 ] [99])
                (plus:DI (reg:DI 0 ax [orig:98 _17 ] [98])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:72 191 {*adddi_1}
     (nil))
(insn 100 99 101 8 (parallel [
            (set (reg/f:DI 0 ax [orig:100 _19 ] [100])
                (plus:DI (reg:DI 0 ax [orig:99 _18 ] [99])
                    (reg/f:DI 4 si [orig:97 _16 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:72 191 {*adddi_1}
     (nil))
(insn 101 100 328 8 (parallel [
            (set (reg/f:DI 1 dx [orig:131 _66 ] [131])
                (plus:DI (reg/f:DI 0 ax [orig:100 _19 ] [100])
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (nil))
(insn 328 101 103 8 (set (reg:DI 4 si [orig:155 _101 ] [155])
        (reg:DI 1 dx [orig:154 _100 ] [154])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(insn 103 328 104 8 (parallel [
            (set (reg:DI 4 si [orig:155 _101 ] [155])
                (lshiftrt:DI (reg:DI 4 si [orig:155 _101 ] [155])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 566 {*lshrdi3_1}
     (nil))
(insn 104 103 106 8 (parallel [
            (set (reg:DI 4 si [orig:156 _102 ] [156])
                (plus:DI (reg:DI 4 si [orig:155 _101 ] [155])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (nil))
(insn 106 104 107 8 (set (reg:QI 4 si [orig:158 _104 ] [158])
        (mem:QI (reg/f:DI 4 si [orig:157 _103 ] [157]) [10 *_103+0 S1 A8])) "queryTAD.c":72:13 69 {*movqi_internal}
     (nil))
(insn 107 106 108 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 4 si [orig:158 _104 ] [158])
            (const_int 0 [0]))) "queryTAD.c":72:13 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 108 107 109 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 113)
            (pc))) "queryTAD.c":72:13 659 {*jcc}
     (nil)
 -> 113)
;;  succ:       10 [100.0% (guessed)] 
;;              9 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 91 96 100 154

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 [0.0% (guessed)]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 154
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 154
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 109 108 110 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 111 9 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:154 _100 ] [154])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(call_insn 111 110 112 9 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":72:13 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 112 111 113)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       8 [100.0% (guessed)] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 91 96 100
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 100
;; lr  def 	 17 [flags] 101 102 103 104 105 132 159 160 161 162 163 211 212 213 214
(code_label 113 112 114 10 50 (nil) [1 uses])
(note 114 113 115 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 115 114 116 10 (set (reg:DI 4 si [orig:101 _20 ] [101])
        (mem:DI (plus:DI (reg/f:DI 0 ax [orig:100 _19 ] [100])
                (const_int 64 [0x40])) [2 _19->oldest.month+0 S8 A64])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(insn 116 115 117 10 (set (reg/f:DI 0 ax [211])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":72:22 66 {*movdi_internal}
     (nil))
(insn 117 116 118 10 (set (reg/f:DI 5 di [orig:102 _21 ] [102])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [211])
                (const_int 24 [0x18])) [7 q_49(D)->sensorsID+0 S8 A64])) "queryTAD.c":72:22 66 {*movdi_internal}
     (nil))
(insn 118 117 119 10 (set (reg:DI 1 dx [212])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])) "queryTAD.c":72:33 66 {*movdi_internal}
     (nil))
(insn 119 118 120 10 (set (reg:DI 0 ax [213])
        (reg:DI 1 dx [212])) "queryTAD.c":72:33 66 {*movdi_internal}
     (nil))
(insn 120 119 121 10 (parallel [
            (set (reg:DI 0 ax [213])
                (ashift:DI (reg:DI 0 ax [213])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:33 520 {*ashldi3_1}
     (nil))
(insn 121 120 122 10 (parallel [
            (set (reg:DI 0 ax [213])
                (plus:DI (reg:DI 0 ax [213])
                    (reg:DI 1 dx [212])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:33 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [212])
            (const_int 5 [0x5]))
        (nil)))
(insn 122 121 125 10 (parallel [
            (set (reg:DI 0 ax [214])
                (ashift:DI (reg:DI 0 ax [213])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:33 520 {*ashldi3_1}
     (nil))
(insn 125 122 126 10 (parallel [
            (set (reg:DI 0 ax [orig:104 _23 ] [104])
                (plus:DI (reg:DI 0 ax [orig:103 _22 ] [103])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:33 191 {*adddi_1}
     (nil))
(insn 126 125 127 10 (parallel [
            (set (reg/f:DI 0 ax [orig:105 _24 ] [105])
                (plus:DI (reg:DI 0 ax [orig:104 _23 ] [104])
                    (reg/f:DI 5 di [orig:102 _21 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:33 191 {*adddi_1}
     (nil))
(insn 127 126 330 10 (parallel [
            (set (reg/f:DI 1 dx [orig:132 _67 ] [132])
                (plus:DI (reg/f:DI 0 ax [orig:105 _24 ] [105])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (nil))
(insn 330 127 129 10 (set (reg:DI 5 di [orig:160 _106 ] [160])
        (reg:DI 1 dx [orig:159 _105 ] [159])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(insn 129 330 130 10 (parallel [
            (set (reg:DI 5 di [orig:160 _106 ] [160])
                (lshiftrt:DI (reg:DI 5 di [orig:160 _106 ] [160])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 566 {*lshrdi3_1}
     (nil))
(insn 130 129 132 10 (parallel [
            (set (reg:DI 5 di [orig:161 _107 ] [161])
                (plus:DI (reg:DI 5 di [orig:160 _106 ] [160])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (nil))
(insn 132 130 133 10 (set (reg:QI 5 di [orig:163 _109 ] [163])
        (mem:QI (reg/f:DI 5 di [orig:162 _108 ] [162]) [10 *_108+0 S1 A8])) "queryTAD.c":72:13 69 {*movqi_internal}
     (nil))
(insn 133 132 134 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 5 di [orig:163 _109 ] [163])
            (const_int 0 [0]))) "queryTAD.c":72:13 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 134 133 135 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 139)
            (pc))) "queryTAD.c":72:13 659 {*jcc}
     (nil)
 -> 139)
;;  succ:       12 [100.0% (guessed)] 
;;              11 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 91 96 101 105 159

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 [0.0% (guessed)]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 159
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 159
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 135 134 136 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 136 135 137 11 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:159 _105 ] [159])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(call_insn 137 136 138 11 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":72:13 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 138 137 139)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       10 [100.0% (guessed)] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 91 96 101 105
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 91 96 101 105
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 106 107 215 216 217
(code_label 139 138 140 12 51 (nil) [1 uses])
(note 140 139 141 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 141 140 142 12 (set (reg:DI 0 ax [orig:106 _25 ] [106])
        (mem:DI (plus:DI (reg/f:DI 0 ax [orig:105 _24 ] [105])
                (const_int 32 [0x20])) [2 _24->oldest.year+0 S8 A64])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(insn 142 141 143 12 (set (reg:DI 5 di [215])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 dayN+0 S8 A64])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(insn 143 142 144 12 (set (reg:DI 1 dx [216])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 month+0 S8 A64])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(insn 144 143 145 12 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 145 144 146 12 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [2  S8 A64])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 time+0 S8 A64])) "queryTAD.c":72:13 42 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 146 145 147 12 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [2  S8 A64])
        (reg:DI 2 cx [orig:86 _5 ] [86])) "queryTAD.c":72:13 42 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
        (nil)))
(insn 147 146 148 12 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [3  S8 A64])
        (reg/f:DI 36 r8 [orig:91 _10 ] [91])) "queryTAD.c":72:13 42 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(insn 148 147 149 12 (set (reg:DI 37 r9)
        (reg:DI 5 di [215])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(insn 149 148 150 12 (set (reg:DI 36 r8)
        (reg:DI 38 r10 [orig:96 _15 ] [96])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(insn 150 149 151 12 (set (reg:DI 2 cx)
        (reg:DI 1 dx [216])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(insn 151 150 152 12 (set (reg:DI 1 dx)
        (reg:DI 4 si [orig:101 _20 ] [101])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(insn 152 151 153 12 (set (reg:DI 4 si)
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [2 year+0 S8 A64])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(insn 153 152 154 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:106 _25 ] [106])) "queryTAD.c":72:13 66 {*movdi_internal}
     (nil))
(call_insn 154 153 155 12 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dateCmp") [flags 0x3]  <function_decl 0x7fc58ec06800 dateCmp>) [0 dateCmp S1 A8])
            (const_int 32 [0x20]))) "queryTAD.c":72:13 677 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (expr_list:DI (use (reg:DI 37 r9))
                            (nil))))))))
(insn 155 154 157 12 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":72:13 191 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 157 155 158 12 (set (reg:SI 0 ax [217])
        (sign_extend:SI (reg:QI 0 ax [orig:107 _26 ] [107]))) "queryTAD.c":72:9 134 {extendqisi2}
     (nil))
(insn 158 157 159 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [13 c+0 S4 A32])
        (reg:SI 0 ax [217])) "queryTAD.c":72:9 67 {*movsi_internal}
     (nil))
(insn 159 158 160 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [13 c+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))) "queryTAD.c":74:7 11 {*cmpsi_1}
     (nil))
(jump_insn 160 159 161 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 319)
            (pc))) "queryTAD.c":74:7 659 {*jcc}
     (nil)
 -> 319)
;;  succ:       13 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 133 164 165 166 167 168 218
(note 161 160 162 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 162 161 163 13 (set (reg/f:DI 0 ax [218])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":75:10 66 {*movdi_internal}
     (nil))
(insn 163 162 332 13 (parallel [
            (set (reg/f:DI 0 ax [orig:133 _68 ] [133])
                (plus:DI (reg/f:DI 0 ax [218])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:10 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 332 163 165 13 (set (reg:DI 1 dx [orig:165 _111 ] [165])
        (reg:DI 0 ax [orig:164 _110 ] [164])) "queryTAD.c":75:10 66 {*movdi_internal}
     (nil))
(insn 165 332 166 13 (parallel [
            (set (reg:DI 1 dx [orig:165 _111 ] [165])
                (lshiftrt:DI (reg:DI 1 dx [orig:165 _111 ] [165])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:10 566 {*lshrdi3_1}
     (nil))
(insn 166 165 168 13 (parallel [
            (set (reg:DI 1 dx [orig:166 _112 ] [166])
                (plus:DI (reg:DI 1 dx [orig:165 _111 ] [165])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:10 191 {*adddi_1}
     (nil))
(insn 168 166 169 13 (set (reg:QI 1 dx [orig:168 _114 ] [168])
        (mem:QI (reg/f:DI 1 dx [orig:167 _113 ] [167]) [10 *_113+0 S1 A8])) "queryTAD.c":75:10 69 {*movqi_internal}
     (nil))
(insn 169 168 170 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:168 _114 ] [168])
            (const_int 0 [0]))) "queryTAD.c":75:10 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 170 169 171 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 175)
            (pc))) "queryTAD.c":75:10 659 {*jcc}
     (nil)
 -> 175)
;;  succ:       15 [100.0% (guessed)] 
;;              14 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 [0.0% (guessed)]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 171 170 172 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 172 171 173 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:164 _110 ] [164])) "queryTAD.c":75:10 66 {*movdi_internal}
     (nil))
(call_insn 173 172 174 14 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":75:10 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 174 173 175)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       13 [100.0% (guessed)] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 108 109 110 111 134 169 170 171 172 173 219 220 221 222
(code_label 175 174 176 15 53 (nil) [1 uses])
(note 176 175 177 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 177 176 178 15 (set (reg/f:DI 0 ax [219])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":75:10 66 {*movdi_internal}
     (nil))
(insn 178 177 179 15 (set (reg/f:DI 2 cx [orig:108 _27 ] [108])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [219])
                (const_int 24 [0x18])) [7 q_49(D)->sensorsID+0 S8 A64])) "queryTAD.c":75:10 66 {*movdi_internal}
     (nil))
(insn 179 178 180 15 (set (reg:DI 1 dx [220])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])) "queryTAD.c":75:21 66 {*movdi_internal}
     (nil))
(insn 180 179 181 15 (set (reg:DI 0 ax [221])
        (reg:DI 1 dx [220])) "queryTAD.c":75:21 66 {*movdi_internal}
     (nil))
(insn 181 180 182 15 (parallel [
            (set (reg:DI 0 ax [221])
                (ashift:DI (reg:DI 0 ax [221])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:21 520 {*ashldi3_1}
     (nil))
(insn 182 181 183 15 (parallel [
            (set (reg:DI 0 ax [221])
                (plus:DI (reg:DI 0 ax [221])
                    (reg:DI 1 dx [220])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:21 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [220])
            (const_int 5 [0x5]))
        (nil)))
(insn 183 182 186 15 (parallel [
            (set (reg:DI 0 ax [222])
                (ashift:DI (reg:DI 0 ax [221])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:21 520 {*ashldi3_1}
     (nil))
(insn 186 183 187 15 (parallel [
            (set (reg:DI 0 ax [orig:110 _29 ] [110])
                (plus:DI (reg:DI 0 ax [orig:109 _28 ] [109])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:21 191 {*adddi_1}
     (nil))
(insn 187 186 188 15 (parallel [
            (set (reg/f:DI 0 ax [orig:111 _30 ] [111])
                (plus:DI (reg:DI 0 ax [orig:110 _29 ] [110])
                    (reg/f:DI 2 cx [orig:108 _27 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:21 191 {*adddi_1}
     (nil))
(insn 188 187 334 15 (parallel [
            (set (reg/f:DI 1 dx [orig:134 _69 ] [134])
                (plus:DI (reg/f:DI 0 ax [orig:111 _30 ] [111])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:40 191 {*adddi_1}
     (nil))
(insn 334 188 190 15 (set (reg:DI 2 cx [orig:170 _116 ] [170])
        (reg:DI 1 dx [orig:169 _115 ] [169])) "queryTAD.c":75:40 66 {*movdi_internal}
     (nil))
(insn 190 334 191 15 (parallel [
            (set (reg:DI 2 cx [orig:170 _116 ] [170])
                (lshiftrt:DI (reg:DI 2 cx [orig:170 _116 ] [170])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:40 566 {*lshrdi3_1}
     (nil))
(insn 191 190 193 15 (parallel [
            (set (reg:DI 2 cx [orig:171 _117 ] [171])
                (plus:DI (reg:DI 2 cx [orig:170 _116 ] [170])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":75:40 191 {*adddi_1}
     (nil))
(insn 193 191 194 15 (set (reg:QI 2 cx [orig:173 _119 ] [173])
        (mem:QI (reg/f:DI 2 cx [orig:172 _118 ] [172]) [10 *_118+0 S1 A8])) "queryTAD.c":75:40 69 {*movqi_internal}
     (nil))
(insn 194 193 195 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:173 _119 ] [173])
            (const_int 0 [0]))) "queryTAD.c":75:40 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 195 194 196 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 200)
            (pc))) "queryTAD.c":75:40 659 {*jcc}
     (nil)
 -> 200)
;;  succ:       17 [100.0% (guessed)] 
;;              16 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 111 169

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 [0.0% (guessed)]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 169
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 169
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 196 195 197 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 197 196 198 16 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:169 _115 ] [169])) "queryTAD.c":75:40 66 {*movdi_internal}
     (nil))
(call_insn 198 197 199 16 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":75:40 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 199 198 200)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       15 [100.0% (guessed)] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 111
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 111
;; lr  def 	 17 [flags] 112 113 114 115 135 174 175 176 177 178 223 224 225 226 227
(code_label 200 199 201 17 54 (nil) [1 uses])
(note 201 200 202 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 202 201 203 17 (set (reg:DI 1 dx [223])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [2 year+0 S8 A64])) "queryTAD.c":75:40 66 {*movdi_internal}
     (nil))
(insn 203 202 204 17 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:111 _30 ] [111])
                (const_int 32 [0x20])) [2 _30->oldest.year+0 S8 A64])
        (reg:DI 1 dx [223])) "queryTAD.c":75:40 66 {*movdi_internal}
     (nil))
(insn 204 203 205 17 (set (reg/f:DI 0 ax [224])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":76:10 66 {*movdi_internal}
     (nil))
(insn 205 204 206 17 (set (reg/f:DI 2 cx [orig:112 _31 ] [112])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [224])
                (const_int 24 [0x18])) [7 q_49(D)->sensorsID+0 S8 A64])) "queryTAD.c":76:10 66 {*movdi_internal}
     (nil))
(insn 206 205 207 17 (set (reg:DI 1 dx [225])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])) "queryTAD.c":76:21 66 {*movdi_internal}
     (nil))
(insn 207 206 208 17 (set (reg:DI 0 ax [226])
        (reg:DI 1 dx [225])) "queryTAD.c":76:21 66 {*movdi_internal}
     (nil))
(insn 208 207 209 17 (parallel [
            (set (reg:DI 0 ax [226])
                (ashift:DI (reg:DI 0 ax [226])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":76:21 520 {*ashldi3_1}
     (nil))
(insn 209 208 210 17 (parallel [
            (set (reg:DI 0 ax [226])
                (plus:DI (reg:DI 0 ax [226])
                    (reg:DI 1 dx [225])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":76:21 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [225])
            (const_int 5 [0x5]))
        (nil)))
(insn 210 209 213 17 (parallel [
            (set (reg:DI 0 ax [227])
                (ashift:DI (reg:DI 0 ax [226])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":76:21 520 {*ashldi3_1}
     (nil))
(insn 213 210 214 17 (parallel [
            (set (reg:DI 0 ax [orig:114 _33 ] [114])
                (plus:DI (reg:DI 0 ax [orig:113 _32 ] [113])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":76:21 191 {*adddi_1}
     (nil))
(insn 214 213 215 17 (parallel [
            (set (reg/f:DI 0 ax [orig:115 _34 ] [115])
                (plus:DI (reg:DI 0 ax [orig:114 _33 ] [114])
                    (reg/f:DI 2 cx [orig:112 _31 ] [112])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":76:21 191 {*adddi_1}
     (nil))
(insn 215 214 336 17 (parallel [
            (set (reg/f:DI 1 dx [orig:135 _70 ] [135])
                (plus:DI (reg/f:DI 0 ax [orig:115 _34 ] [115])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":76:45 191 {*adddi_1}
     (nil))
(insn 336 215 217 17 (set (reg:DI 2 cx [orig:175 _121 ] [175])
        (reg:DI 1 dx [orig:174 _120 ] [174])) "queryTAD.c":76:45 66 {*movdi_internal}
     (nil))
(insn 217 336 218 17 (parallel [
            (set (reg:DI 2 cx [orig:175 _121 ] [175])
                (lshiftrt:DI (reg:DI 2 cx [orig:175 _121 ] [175])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":76:45 566 {*lshrdi3_1}
     (nil))
(insn 218 217 220 17 (parallel [
            (set (reg:DI 2 cx [orig:176 _122 ] [176])
                (plus:DI (reg:DI 2 cx [orig:175 _121 ] [175])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":76:45 191 {*adddi_1}
     (nil))
(insn 220 218 221 17 (set (reg:QI 2 cx [orig:178 _124 ] [178])
        (mem:QI (reg/f:DI 2 cx [orig:177 _123 ] [177]) [10 *_123+0 S1 A8])) "queryTAD.c":76:45 69 {*movqi_internal}
     (nil))
(insn 221 220 222 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:178 _124 ] [178])
            (const_int 0 [0]))) "queryTAD.c":76:45 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 222 221 223 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 227)
            (pc))) "queryTAD.c":76:45 659 {*jcc}
     (nil)
 -> 227)
;;  succ:       19 [100.0% (guessed)] 
;;              18 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 115 174

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 [0.0% (guessed)]  (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 174
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 174
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 223 222 224 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 18 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:174 _120 ] [174])) "queryTAD.c":76:45 66 {*movdi_internal}
     (nil))
(call_insn 225 224 226 18 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":76:45 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 226 225 227)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       17 [100.0% (guessed)] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 115
;; lr  def 	 17 [flags] 116 117 118 119 136 179 180 181 182 183 228 229 230 231 232
(code_label 227 226 228 19 55 (nil) [1 uses])
(note 228 227 229 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 229 228 230 19 (set (reg:DI 1 dx [228])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 pedestrians+0 S8 A64])) "queryTAD.c":76:45 66 {*movdi_internal}
     (nil))
(insn 230 229 231 19 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:115 _34 ] [115])
                (const_int 56 [0x38])) [2 _34->oldest.old_count+0 S8 A64])
        (reg:DI 1 dx [228])) "queryTAD.c":76:45 66 {*movdi_internal}
     (nil))
(insn 231 230 232 19 (set (reg/f:DI 0 ax [229])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":77:10 66 {*movdi_internal}
     (nil))
(insn 232 231 233 19 (set (reg/f:DI 2 cx [orig:116 _35 ] [116])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [229])
                (const_int 24 [0x18])) [7 q_49(D)->sensorsID+0 S8 A64])) "queryTAD.c":77:10 66 {*movdi_internal}
     (nil))
(insn 233 232 234 19 (set (reg:DI 1 dx [230])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])) "queryTAD.c":77:21 66 {*movdi_internal}
     (nil))
(insn 234 233 235 19 (set (reg:DI 0 ax [231])
        (reg:DI 1 dx [230])) "queryTAD.c":77:21 66 {*movdi_internal}
     (nil))
(insn 235 234 236 19 (parallel [
            (set (reg:DI 0 ax [231])
                (ashift:DI (reg:DI 0 ax [231])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":77:21 520 {*ashldi3_1}
     (nil))
(insn 236 235 237 19 (parallel [
            (set (reg:DI 0 ax [231])
                (plus:DI (reg:DI 0 ax [231])
                    (reg:DI 1 dx [230])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":77:21 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [230])
            (const_int 5 [0x5]))
        (nil)))
(insn 237 236 240 19 (parallel [
            (set (reg:DI 0 ax [232])
                (ashift:DI (reg:DI 0 ax [231])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":77:21 520 {*ashldi3_1}
     (nil))
(insn 240 237 241 19 (parallel [
            (set (reg:DI 0 ax [orig:118 _37 ] [118])
                (plus:DI (reg:DI 0 ax [orig:117 _36 ] [117])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":77:21 191 {*adddi_1}
     (nil))
(insn 241 240 242 19 (parallel [
            (set (reg/f:DI 0 ax [orig:119 _38 ] [119])
                (plus:DI (reg:DI 0 ax [orig:118 _37 ] [118])
                    (reg/f:DI 2 cx [orig:116 _35 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":77:21 191 {*adddi_1}
     (nil))
(insn 242 241 338 19 (parallel [
            (set (reg/f:DI 1 dx [orig:136 _71 ] [136])
                (plus:DI (reg/f:DI 0 ax [orig:119 _38 ] [119])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":77:40 191 {*adddi_1}
     (nil))
(insn 338 242 244 19 (set (reg:DI 2 cx [orig:180 _126 ] [180])
        (reg:DI 1 dx [orig:179 _125 ] [179])) "queryTAD.c":77:40 66 {*movdi_internal}
     (nil))
(insn 244 338 245 19 (parallel [
            (set (reg:DI 2 cx [orig:180 _126 ] [180])
                (lshiftrt:DI (reg:DI 2 cx [orig:180 _126 ] [180])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":77:40 566 {*lshrdi3_1}
     (nil))
(insn 245 244 247 19 (parallel [
            (set (reg:DI 2 cx [orig:181 _127 ] [181])
                (plus:DI (reg:DI 2 cx [orig:180 _126 ] [180])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":77:40 191 {*adddi_1}
     (nil))
(insn 247 245 248 19 (set (reg:QI 2 cx [orig:183 _129 ] [183])
        (mem:QI (reg/f:DI 2 cx [orig:182 _128 ] [182]) [10 *_128+0 S1 A8])) "queryTAD.c":77:40 69 {*movqi_internal}
     (nil))
(insn 248 247 249 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:183 _129 ] [183])
            (const_int 0 [0]))) "queryTAD.c":77:40 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 249 248 250 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 254)
            (pc))) "queryTAD.c":77:40 659 {*jcc}
     (nil)
 -> 254)
;;  succ:       21 [100.0% (guessed)] 
;;              20 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119 179

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 [0.0% (guessed)]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 179
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 179
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 250 249 251 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 251 250 252 20 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:179 _125 ] [179])) "queryTAD.c":77:40 66 {*movdi_internal}
     (nil))
(call_insn 252 251 253 20 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":77:40 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 253 252 254)
;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       19 [100.0% (guessed)] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119
;; lr  def 	 17 [flags] 120 121 122 123 137 184 185 186 187 188 233 234 235 236 237
(code_label 254 253 255 21 56 (nil) [1 uses])
(note 255 254 256 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 256 255 257 21 (set (reg:DI 1 dx [233])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 dayN+0 S8 A64])) "queryTAD.c":77:40 66 {*movdi_internal}
     (nil))
(insn 257 256 258 21 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:119 _38 ] [119])
                (const_int 72 [0x48])) [2 _38->oldest.dayN+0 S8 A64])
        (reg:DI 1 dx [233])) "queryTAD.c":77:40 66 {*movdi_internal}
     (nil))
(insn 258 257 259 21 (set (reg/f:DI 0 ax [234])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":78:10 66 {*movdi_internal}
     (nil))
(insn 259 258 260 21 (set (reg/f:DI 2 cx [orig:120 _39 ] [120])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [234])
                (const_int 24 [0x18])) [7 q_49(D)->sensorsID+0 S8 A64])) "queryTAD.c":78:10 66 {*movdi_internal}
     (nil))
(insn 260 259 261 21 (set (reg:DI 1 dx [235])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])) "queryTAD.c":78:21 66 {*movdi_internal}
     (nil))
(insn 261 260 262 21 (set (reg:DI 0 ax [236])
        (reg:DI 1 dx [235])) "queryTAD.c":78:21 66 {*movdi_internal}
     (nil))
(insn 262 261 263 21 (parallel [
            (set (reg:DI 0 ax [236])
                (ashift:DI (reg:DI 0 ax [236])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":78:21 520 {*ashldi3_1}
     (nil))
(insn 263 262 264 21 (parallel [
            (set (reg:DI 0 ax [236])
                (plus:DI (reg:DI 0 ax [236])
                    (reg:DI 1 dx [235])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":78:21 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [235])
            (const_int 5 [0x5]))
        (nil)))
(insn 264 263 267 21 (parallel [
            (set (reg:DI 0 ax [237])
                (ashift:DI (reg:DI 0 ax [236])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":78:21 520 {*ashldi3_1}
     (nil))
(insn 267 264 268 21 (parallel [
            (set (reg:DI 0 ax [orig:122 _41 ] [122])
                (plus:DI (reg:DI 0 ax [orig:121 _40 ] [121])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":78:21 191 {*adddi_1}
     (nil))
(insn 268 267 269 21 (parallel [
            (set (reg/f:DI 0 ax [orig:123 _42 ] [123])
                (plus:DI (reg:DI 0 ax [orig:122 _41 ] [122])
                    (reg/f:DI 2 cx [orig:120 _39 ] [120])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":78:21 191 {*adddi_1}
     (nil))
(insn 269 268 340 21 (parallel [
            (set (reg/f:DI 1 dx [orig:137 _72 ] [137])
                (plus:DI (reg/f:DI 0 ax [orig:123 _42 ] [123])
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":78:41 191 {*adddi_1}
     (nil))
(insn 340 269 271 21 (set (reg:DI 2 cx [orig:185 _131 ] [185])
        (reg:DI 1 dx [orig:184 _130 ] [184])) "queryTAD.c":78:41 66 {*movdi_internal}
     (nil))
(insn 271 340 272 21 (parallel [
            (set (reg:DI 2 cx [orig:185 _131 ] [185])
                (lshiftrt:DI (reg:DI 2 cx [orig:185 _131 ] [185])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":78:41 566 {*lshrdi3_1}
     (nil))
(insn 272 271 274 21 (parallel [
            (set (reg:DI 2 cx [orig:186 _132 ] [186])
                (plus:DI (reg:DI 2 cx [orig:185 _131 ] [185])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":78:41 191 {*adddi_1}
     (nil))
(insn 274 272 275 21 (set (reg:QI 2 cx [orig:188 _134 ] [188])
        (mem:QI (reg/f:DI 2 cx [orig:187 _133 ] [187]) [10 *_133+0 S1 A8])) "queryTAD.c":78:41 69 {*movqi_internal}
     (nil))
(insn 275 274 276 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:188 _134 ] [188])
            (const_int 0 [0]))) "queryTAD.c":78:41 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 276 275 277 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 281)
            (pc))) "queryTAD.c":78:41 659 {*jcc}
     (nil)
 -> 281)
;;  succ:       23 [100.0% (guessed)] 
;;              22 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 123 184

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 [0.0% (guessed)]  (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 184
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 184
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 277 276 278 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 278 277 279 22 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:184 _130 ] [184])) "queryTAD.c":78:41 66 {*movdi_internal}
     (nil))
(call_insn 279 278 280 22 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":78:41 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 280 279 281)
;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       21 [100.0% (guessed)] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 123
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 123
;; lr  def 	 17 [flags] 124 125 126 127 138 189 190 191 192 193 238 239 240 241 242
(code_label 281 280 282 23 57 (nil) [1 uses])
(note 282 281 283 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 283 282 284 23 (set (reg:DI 1 dx [238])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 month+0 S8 A64])) "queryTAD.c":78:41 66 {*movdi_internal}
     (nil))
(insn 284 283 285 23 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:123 _42 ] [123])
                (const_int 64 [0x40])) [2 _42->oldest.month+0 S8 A64])
        (reg:DI 1 dx [238])) "queryTAD.c":78:41 66 {*movdi_internal}
     (nil))
(insn 285 284 286 23 (set (reg/f:DI 0 ax [239])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":79:10 66 {*movdi_internal}
     (nil))
(insn 286 285 287 23 (set (reg/f:DI 2 cx [orig:124 _43 ] [124])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [239])
                (const_int 24 [0x18])) [7 q_49(D)->sensorsID+0 S8 A64])) "queryTAD.c":79:10 66 {*movdi_internal}
     (nil))
(insn 287 286 288 23 (set (reg:DI 1 dx [240])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 ID+0 S8 A64])) "queryTAD.c":79:21 66 {*movdi_internal}
     (nil))
(insn 288 287 289 23 (set (reg:DI 0 ax [241])
        (reg:DI 1 dx [240])) "queryTAD.c":79:21 66 {*movdi_internal}
     (nil))
(insn 289 288 290 23 (parallel [
            (set (reg:DI 0 ax [241])
                (ashift:DI (reg:DI 0 ax [241])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":79:21 520 {*ashldi3_1}
     (nil))
(insn 290 289 291 23 (parallel [
            (set (reg:DI 0 ax [241])
                (plus:DI (reg:DI 0 ax [241])
                    (reg:DI 1 dx [240])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":79:21 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [240])
            (const_int 5 [0x5]))
        (nil)))
(insn 291 290 294 23 (parallel [
            (set (reg:DI 0 ax [242])
                (ashift:DI (reg:DI 0 ax [241])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":79:21 520 {*ashldi3_1}
     (nil))
(insn 294 291 295 23 (parallel [
            (set (reg:DI 0 ax [orig:126 _45 ] [126])
                (plus:DI (reg:DI 0 ax [orig:125 _44 ] [125])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":79:21 191 {*adddi_1}
     (nil))
(insn 295 294 296 23 (parallel [
            (set (reg/f:DI 0 ax [orig:127 _46 ] [127])
                (plus:DI (reg:DI 0 ax [orig:126 _45 ] [126])
                    (reg/f:DI 2 cx [orig:124 _43 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":79:21 191 {*adddi_1}
     (nil))
(insn 296 295 342 23 (parallel [
            (set (reg/f:DI 1 dx [orig:138 _73 ] [138])
                (plus:DI (reg/f:DI 0 ax [orig:127 _46 ] [127])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":79:40 191 {*adddi_1}
     (nil))
(insn 342 296 298 23 (set (reg:DI 2 cx [orig:190 _136 ] [190])
        (reg:DI 1 dx [orig:189 _135 ] [189])) "queryTAD.c":79:40 66 {*movdi_internal}
     (nil))
(insn 298 342 299 23 (parallel [
            (set (reg:DI 2 cx [orig:190 _136 ] [190])
                (lshiftrt:DI (reg:DI 2 cx [orig:190 _136 ] [190])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":79:40 566 {*lshrdi3_1}
     (nil))
(insn 299 298 301 23 (parallel [
            (set (reg:DI 2 cx [orig:191 _137 ] [191])
                (plus:DI (reg:DI 2 cx [orig:190 _136 ] [190])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":79:40 191 {*adddi_1}
     (nil))
(insn 301 299 302 23 (set (reg:QI 2 cx [orig:193 _139 ] [193])
        (mem:QI (reg/f:DI 2 cx [orig:192 _138 ] [192]) [10 *_138+0 S1 A8])) "queryTAD.c":79:40 69 {*movqi_internal}
     (nil))
(insn 302 301 303 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:193 _139 ] [193])
            (const_int 0 [0]))) "queryTAD.c":79:40 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 303 302 304 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 308)
            (pc))) "queryTAD.c":79:40 659 {*jcc}
     (nil)
 -> 308)
;;  succ:       25 [100.0% (guessed)] 
;;              24 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 127 189

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       23 [0.0% (guessed)]  (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 189
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 189
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 304 303 305 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 305 304 306 24 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:189 _135 ] [189])) "queryTAD.c":79:40 66 {*movdi_internal}
     (nil))
(call_insn 306 305 307 24 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":79:40 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 307 306 308)
;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 27, flags: (RTL, MODIFIED)
;;  pred:       23 [100.0% (guessed)] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 127
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 127
;; lr  def 	 243
(code_label 308 307 309 25 58 (nil) [1 uses])
(note 309 308 310 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 310 309 311 25 (set (reg:DI 1 dx [243])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 time+0 S8 A64])) "queryTAD.c":79:40 66 {*movdi_internal}
     (nil))
(insn 311 310 319 25 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:127 _46 ] [127])
                (const_int 48 [0x30])) [2 _46->oldest.time+0 S8 A64])
        (reg:DI 1 dx [243])) "queryTAD.c":79:40 66 {*movdi_internal}
     (nil))
;;  succ:       27 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 27, loop depth 0, maybe hot
;;  prev block 25, next block 26, flags: (RTL, MODIFIED)
;;  pred:       12
;;              25 [always]  (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 319 311 318 27 59 (nil) [1 uses])
(note 318 319 320 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 320 318 314 27 (const_int 0 [0]) "queryTAD.c":89:1 696 {nop}
     (nil))
;;  succ:       26 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 27, next block 1, flags: (RTL, MODIFIED)
;;  pred:       27 [always]  (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 314 320 315 26 46 (nil) [0 uses])
(note 315 314 321 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 321 315 0 NOTE_INSN_DELETED)

;; Function insertYearL (insertYearL, funcdef_no=6, decl_uid=3371, cgraph_uid=7, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 8:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 10:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=91 from oldreg=84, assigning class GENERAL_REGS to r91
   10: {r91:DI=r91:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
   30: r91:DI=r83:DI
    Inserting insn reload after:
   31: r84:DI=r91:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 24:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5

********** Pseudo live ranges #1: **********

  BB 3
   Insn 18: point = 0, n_alt = 0
   Insn 17: point = 0, n_alt = -2
  BB 5
   Insn 28: point = 2, n_alt = -1
  BB 4
   Insn 24: point = 2, n_alt = 5
   Insn 23: point = 3, n_alt = 3
   Insn 22: point = 4, n_alt = 3
  BB 2
   Insn 15: point = 5, n_alt = -1
   Insn 14: point = 5, n_alt = 0
   Insn 13: point = 6, n_alt = 4
   Insn 12: point = 8, n_alt = -2
   Insn 11: point = 10, n_alt = 0
   Insn 31: point = 12, n_alt = -2
	Hard reg 1 is preferable by r91 with profit 1000
   Insn 10: point = 14, n_alt = 0
   Insn 30: point = 15, n_alt = -2
	Hard reg 1 is preferable by r91 with profit 1000
	Hard reg 0 is preferable by r91 with profit 1000
   Insn 9: point = 16, n_alt = -2
   Insn 8: point = 18, n_alt = 0
   Insn 7: point = 20, n_alt = 3
   Insn 3: point = 21, n_alt = 5
   Insn 2: point = 21, n_alt = 5
 r82: [17..18]
 r83: [5..16] [0..1]
 r84: [11..12]
 r85: [9..10]
 r86: [7..8]
 r87: [5..6]
 r88: [19..20]
 r89: [2..4]
 r90: [2..3]
 r91: [13..15]
Compressing live ranges: from 21 to 18 - 85%
Ranges after the compression:
 r82: [14..15]
 r83: [4..13] [0..1]
 r84: [10..11]
 r85: [8..9]
 r86: [6..7]
 r87: [4..5]
 r88: [16..17]
 r89: [2..3]
 r90: [2..3]
 r91: [12..13]

********** Assignment #1: **********

	 Assigning to 91 (cl=GENERAL_REGS, orig=84, freq=3000, tfirst=91, tfreq=3000)...
	   Assign 1 to reload r91 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 17
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 7
changing reg in insn 8
changing reg in insn 22
changing reg in insn 24
changing reg in insn 23
changing reg in insn 24
deleting insn with uid = 9.
deleting insn with uid = 31.
deleting insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.


insertYearL

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={5d,4u} r1={7d,5u} r2={2d} r4={2d,1u} r5={3d,2u} r6={1d,10u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={5d,1u} r18={1d} r19={1d,1u,1e} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 129{98d,30u,1e} in 16{15 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 83 84 85 86 87 88
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 query+0 S8 A64])
        (reg:DI 5 di [ query ])) "queryTAD.c":91:48 66 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [6 years+0 S8 A64])
        (reg:DI 4 si [ years ])) "queryTAD.c":91:48 66 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 query+0 S8 A64])) "queryTAD.c":92:18 66 {*movdi_internal}
     (nil))
(insn 8 7 30 2 (parallel [
            (set (reg/f:DI 0 ax [orig:82 _5 ] [82])
                (plus:DI (reg/f:DI 0 ax [88])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":92:18 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [11 query+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 30 8 10 2 (set (reg:DI 1 dx [orig:84 _8 ] [84])
        (reg:DI 0 ax [orig:83 _7 ] [83])) "queryTAD.c":92:18 66 {*movdi_internal}
     (nil))
(insn 10 30 11 2 (parallel [
            (set (reg:DI 1 dx [orig:84 _8 ] [84])
                (lshiftrt:DI (reg:DI 1 dx [orig:84 _8 ] [84])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":92:18 566 {*lshrdi3_1}
     (nil))
(insn 11 10 13 2 (parallel [
            (set (reg:DI 1 dx [orig:85 _9 ] [85])
                (plus:DI (reg:DI 1 dx [orig:84 _8 ] [84])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":92:18 191 {*adddi_1}
     (nil))
(insn 13 11 14 2 (set (reg:QI 1 dx [orig:87 _11 ] [87])
        (mem:QI (reg/f:DI 1 dx [orig:86 _10 ] [86]) [10 *_10+0 S1 A8])) "queryTAD.c":92:18 69 {*movqi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:87 _11 ] [87])
            (const_int 0 [0]))) "queryTAD.c":92:18 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "queryTAD.c":92:18 659 {*jcc}
     (nil)
 -> 20)
;;  succ:       4 [100.0% (guessed)] 
;;              3 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 [0.0% (guessed)]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:83 _7 ] [83])) "queryTAD.c":92:18 66 {*movdi_internal}
     (nil))
(call_insn 18 17 19 3 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":92:18 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 19 18 20)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2 [100.0% (guessed)] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 89 90
(code_label 20 19 21 4 61 (nil) [1 uses])
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 query+0 S8 A64])) "queryTAD.c":92:18 66 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg/f:DI 1 dx [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [6 years+0 S8 A64])) "queryTAD.c":92:18 66 {*movdi_internal}
     (nil))
(insn 24 23 27 4 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 16 [0x10])) [6 query_2(D)->years+0 S8 A64])
        (reg/f:DI 1 dx [90])) "queryTAD.c":92:18 66 {*movdi_internal}
     (nil))
;;  succ:       5 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 [always]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 27 24 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (const_int 0 [0]) "queryTAD.c":93:1 696 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 29 28 0 NOTE_INSN_DELETED)

;; Function makeSenLRec (makeSenLRec, funcdef_no=7, decl_uid=3389, cgraph_uid=8, symbol_order=7)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 15:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=172 from oldreg=107, assigning class GENERAL_REGS to r172
   15: {r172:DI=r172:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  209: r172:DI=r106:DI
    Inserting insn reload after:
  210: r107:DI=r172:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 16:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 32:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=173 from oldreg=112, assigning class GENERAL_REGS to r173
   32: {r173:DI=r173:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  211: r173:DI=r111:DI
    Inserting insn reload after:
  212: r112:DI=r173:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 35:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 64
	 Choosing alt 0 in insn 64:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 65:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 67:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=174 from oldreg=117, assigning class GENERAL_REGS to r174
   67: {r174:DI=r174:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  213: r174:DI=r116:DI
    Inserting insn reload after:
  214: r117:DI=r174:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 70:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 82:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=175 from oldreg=122, assigning class GENERAL_REGS to r175
   82: {r175:DI=r175:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  215: r175:DI=r121:DI
    Inserting insn reload after:
  216: r122:DI=r175:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 85:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 94:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 102:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 104
	 Choosing alt 0 in insn 104:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 105:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 107:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=176 from oldreg=127, assigning class GENERAL_REGS to r176
  107: {r176:DI=r176:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  217: r176:DI=r126:DI
    Inserting insn reload after:
  218: r127:DI=r176:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 108:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=16,losers=2,rld_nregs=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 110:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 131:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 133:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=177 from oldreg=132, assigning class GENERAL_REGS to r177
  133: {r177:DI=r177:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  219: r177:DI=r131:DI
    Inserting insn reload after:
  220: r132:DI=r177:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 134:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 136:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 147:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 153:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 154:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 156:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=178 from oldreg=137, assigning class GENERAL_REGS to r178
  156: {r178:DI=r178:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  221: r178:DI=r136:DI
    Inserting insn reload after:
  222: r137:DI=r178:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 157:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 159:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 168:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 169:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 170:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 171:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 172:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 180:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 182:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=179 from oldreg=142, assigning class GENERAL_REGS to r179
  182: {r179:DI=r179:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  223: r179:DI=r141:DI
    Inserting insn reload after:
  224: r142:DI=r179:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 183:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 185:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 194:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 195:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 196:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
EBB 6
EBB 7 8 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24

********** Pseudo live ranges #1: **********

  BB 4
   Insn 23: point = 0, n_alt = 0
   Insn 22: point = 0, n_alt = -2
  BB 6
   Insn 40: point = 2, n_alt = 0
   Insn 39: point = 2, n_alt = -2
  BB 10
   Insn 75: point = 4, n_alt = 0
   Insn 74: point = 4, n_alt = -2
  BB 12
   Insn 90: point = 6, n_alt = 0
   Insn 89: point = 6, n_alt = -2
  BB 14
   Insn 115: point = 8, n_alt = 0
   Insn 114: point = 8, n_alt = -2
  BB 17
   Insn 141: point = 10, n_alt = 0
   Insn 140: point = 10, n_alt = -2
  BB 20
   Insn 164: point = 12, n_alt = 0
   Insn 163: point = 12, n_alt = -2
  BB 22
   Insn 190: point = 14, n_alt = 0
   Insn 189: point = 14, n_alt = -2
  BB 24
   Insn 204: point = 16, n_alt = -1
   Insn 203: point = 16, n_alt = -2
   Insn 199: point = 17, n_alt = -2
  BB 18
   Insn 206: point = 20, n_alt = -1
   Insn 148: point = 20, n_alt = 3
   Insn 147: point = 21, n_alt = 5
   Insn 146: point = 22, n_alt = 3
   Insn 145: point = 23, n_alt = 3
  BB 16
   Insn 138: point = 24, n_alt = -1
   Insn 137: point = 24, n_alt = 0
   Insn 136: point = 25, n_alt = 4
   Insn 135: point = 27, n_alt = -2
   Insn 134: point = 29, n_alt = 0
   Insn 220: point = 31, n_alt = -2
	Hard reg 1 is preferable by r177 with profit 1000
   Insn 133: point = 33, n_alt = 0
   Insn 219: point = 34, n_alt = -2
	Hard reg 1 is preferable by r177 with profit 1000
	Hard reg 0 is preferable by r177 with profit 1000
   Insn 132: point = 35, n_alt = -2
   Insn 131: point = 37, n_alt = 0
   Insn 130: point = 39, n_alt = 3
  BB 23
   Insn 196: point = 40, n_alt = 3
   Insn 195: point = 41, n_alt = 5
   Insn 194: point = 42, n_alt = 3
  BB 21
   Insn 187: point = 44, n_alt = -1
   Insn 186: point = 44, n_alt = 0
   Insn 185: point = 45, n_alt = 4
   Insn 184: point = 47, n_alt = -2
   Insn 183: point = 49, n_alt = 0
   Insn 224: point = 51, n_alt = -2
	Hard reg 2 is preferable by r179 with profit 1000
   Insn 182: point = 53, n_alt = 0
   Insn 223: point = 54, n_alt = -2
	Hard reg 2 is preferable by r179 with profit 1000
	Hard reg 1 is preferable by r179 with profit 1000
   Insn 181: point = 55, n_alt = -2
   Insn 180: point = 57, n_alt = 0
   Insn 179: point = 59, n_alt = 3
   Insn 178: point = 60, n_alt = -2
   Insn 177: point = 61, n_alt = 0
   Insn 176: point = 61, n_alt = -2
   Insn 175: point = 62, n_alt = -2
   Insn 174: point = 63, n_alt = -2
   Insn 173: point = 64, n_alt = -2
   Insn 172: point = 65, n_alt = 3
   Insn 171: point = 66, n_alt = 3
   Insn 170: point = 67, n_alt = 3
   Insn 169: point = 68, n_alt = 3
   Insn 168: point = 70, n_alt = 3
  BB 19
   Insn 161: point = 71, n_alt = -1
   Insn 160: point = 71, n_alt = 0
   Insn 159: point = 72, n_alt = 4
   Insn 158: point = 74, n_alt = -2
   Insn 157: point = 76, n_alt = 0
   Insn 222: point = 78, n_alt = -2
	Hard reg 1 is preferable by r178 with profit 1000
   Insn 156: point = 80, n_alt = 0
   Insn 221: point = 81, n_alt = -2
	Hard reg 1 is preferable by r178 with profit 1000
	Hard reg 0 is preferable by r178 with profit 1000
   Insn 155: point = 82, n_alt = -2
   Insn 154: point = 84, n_alt = 0
   Insn 153: point = 86, n_alt = 3
  BB 15
   Insn 127: point = 87, n_alt = -1
   Insn 126: point = 87, n_alt = 0
   Insn 123: point = 88, n_alt = -2
   Insn 122: point = 89, n_alt = 0
   Insn 121: point = 89, n_alt = -2
   Insn 120: point = 90, n_alt = -2
   Insn 119: point = 91, n_alt = 3
  BB 13
   Insn 112: point = 94, n_alt = -1
   Insn 111: point = 94, n_alt = 0
   Insn 110: point = 95, n_alt = 4
   Insn 109: point = 97, n_alt = -2
   Insn 108: point = 99, n_alt = 0
   Insn 218: point = 101, n_alt = -2
	Hard reg 4 is preferable by r176 with profit 1000
   Insn 107: point = 103, n_alt = 0
   Insn 217: point = 104, n_alt = -2
	Hard reg 4 is preferable by r176 with profit 1000
	Hard reg 1 is preferable by r176 with profit 1000
   Insn 106: point = 105, n_alt = -2
   Insn 105: point = 107, n_alt = 3
   Insn 104: point = 108, n_alt = 0
   Insn 103: point = 110, n_alt = 3
   Insn 102: point = 111, n_alt = 3
   Insn 101: point = 113, n_alt = -2
   Insn 100: point = 115, n_alt = -2
   Insn 99: point = 117, n_alt = 0
   Insn 98: point = 119, n_alt = 0
   Insn 97: point = 121, n_alt = 0
   Insn 96: point = 122, n_alt = -2
   Insn 95: point = 123, n_alt = 3
   Insn 94: point = 125, n_alt = 3
  BB 11
   Insn 87: point = 127, n_alt = -1
   Insn 86: point = 127, n_alt = 0
   Insn 85: point = 128, n_alt = 4
   Insn 84: point = 130, n_alt = -2
   Insn 83: point = 132, n_alt = 0
   Insn 216: point = 134, n_alt = -2
	Hard reg 1 is preferable by r175 with profit 1000
   Insn 82: point = 136, n_alt = 0
   Insn 215: point = 137, n_alt = -2
	Hard reg 1 is preferable by r175 with profit 1000
	Hard reg 0 is preferable by r175 with profit 1000
   Insn 81: point = 138, n_alt = -2
   Insn 80: point = 140, n_alt = 3
   Insn 79: point = 141, n_alt = 3
  BB 9
   Insn 72: point = 144, n_alt = -1
   Insn 71: point = 144, n_alt = 0
   Insn 70: point = 145, n_alt = 4
   Insn 69: point = 147, n_alt = -2
   Insn 68: point = 149, n_alt = 0
   Insn 214: point = 151, n_alt = -2
	Hard reg 2 is preferable by r174 with profit 1000
   Insn 67: point = 153, n_alt = 0
   Insn 213: point = 154, n_alt = -2
	Hard reg 2 is preferable by r174 with profit 1000
	Hard reg 1 is preferable by r174 with profit 1000
   Insn 66: point = 155, n_alt = -2
   Insn 65: point = 157, n_alt = 3
   Insn 64: point = 158, n_alt = 0
   Insn 63: point = 160, n_alt = 3
   Insn 62: point = 161, n_alt = -2
   Insn 61: point = 163, n_alt = -2
   Insn 60: point = 165, n_alt = 0
   Insn 59: point = 167, n_alt = 0
   Insn 58: point = 169, n_alt = 0
   Insn 57: point = 170, n_alt = -2
   Insn 56: point = 171, n_alt = 3
  BB 8
   Insn 54: point = 172, n_alt = -1
   Insn 53: point = 172, n_alt = 0
   Insn 52: point = 173, n_alt = 3
   Insn 51: point = 175, n_alt = 3
   Insn 50: point = 176, n_alt = 3
   Insn 49: point = 178, n_alt = 3
  BB 7
   Insn 47: point = 179, n_alt = -1
   Insn 46: point = 179, n_alt = 0
   Insn 45: point = 180, n_alt = 3
   Insn 44: point = 182, n_alt = 3
  BB 5
   Insn 37: point = 184, n_alt = -1
   Insn 36: point = 184, n_alt = 0
   Insn 35: point = 185, n_alt = 4
   Insn 34: point = 187, n_alt = -2
   Insn 33: point = 189, n_alt = 0
   Insn 212: point = 191, n_alt = -2
	Hard reg 1 is preferable by r173 with profit 1000
   Insn 32: point = 193, n_alt = 0
   Insn 211: point = 194, n_alt = -2
	Hard reg 1 is preferable by r173 with profit 1000
	Hard reg 0 is preferable by r173 with profit 1000
   Insn 31: point = 195, n_alt = -2
   Insn 30: point = 197, n_alt = 0
   Insn 29: point = 199, n_alt = 3
   Insn 28: point = 200, n_alt = 3
   Insn 27: point = 202, n_alt = 3
  BB 3
   Insn 20: point = 203, n_alt = -1
   Insn 19: point = 203, n_alt = 0
   Insn 18: point = 204, n_alt = 4
   Insn 17: point = 206, n_alt = -2
   Insn 16: point = 208, n_alt = 0
   Insn 210: point = 210, n_alt = -2
	Hard reg 1 is preferable by r172 with profit 1000
   Insn 15: point = 212, n_alt = 0
   Insn 209: point = 213, n_alt = -2
	Hard reg 1 is preferable by r172 with profit 1000
	Hard reg 0 is preferable by r172 with profit 1000
   Insn 14: point = 214, n_alt = -2
   Insn 13: point = 216, n_alt = 0
   Insn 12: point = 218, n_alt = 3
  BB 2
   Insn 10: point = 219, n_alt = -1
   Insn 9: point = 219, n_alt = 1
   Insn 5: point = 219, n_alt = 5
   Insn 4: point = 219, n_alt = 5
   Insn 3: point = 219, n_alt = 5
   Insn 2: point = 219, n_alt = 5
 r82: [179..200]
 r83: [179..180]
 r84: [172..176]
 r85: [172..173]
 r86: [159..161]
 r87: [142..158]
 r88: [90..141]
 r89: [120..123]
 r90: [112..113]
 r91: [109..111]
 r92: [92..108]
 r93: [89..91]
 r94: [87..88]
 r95: [61..68]
 r96: [41..60]
 r97: [40..40] [18..20]
 r98: [215..216]
 r99: [196..197]
 r100: [156..157]
 r101: [139..140]
 r102: [106..107]
 r103: [36..37]
 r104: [83..84]
 r105: [56..57]
 r106: [203..214] [0..1]
 r107: [209..210]
 r108: [207..208]
 r109: [205..206]
 r110: [203..204]
 r111: [184..195] [2..3]
 r112: [190..191]
 r113: [188..189]
 r114: [186..187]
 r115: [184..185]
 r116: [144..155] [4..5]
 r117: [150..151]
 r118: [148..149]
 r119: [146..147]
 r120: [144..145]
 r121: [127..138] [6..7]
 r122: [133..134]
 r123: [131..132]
 r124: [129..130]
 r125: [127..128]
 r126: [94..105] [8..9]
 r127: [100..101]
 r128: [98..99]
 r129: [96..97]
 r130: [94..95]
 r131: [24..35] [10..11]
 r132: [30..31]
 r133: [28..29]
 r134: [26..27]
 r135: [24..25]
 r136: [71..82] [12..13]
 r137: [77..78]
 r138: [75..76]
 r139: [73..74]
 r140: [71..72]
 r141: [44..55] [14..15]
 r142: [50..51]
 r143: [48..49]
 r144: [46..47]
 r145: [44..45]
 r146: [16..17]
 r147: [217..218]
 r148: [201..202]
 r149: [198..199]
 r150: [181..182]
 r151: [177..178]
 r152: [174..175]
 r153: [168..171]
 r154: [166..170] [162..163]
 r155: [164..165]
 r156: [159..160]
 r157: [124..125]
 r158: [118..122] [114..115]
 r159: [116..117]
 r160: [109..110]
 r161: [38..39]
 r162: [21..23]
 r163: [21..22]
 r164: [85..86]
 r165: [69..70]
 r166: [64..67]
 r167: [63..66]
 r168: [62..65]
 r169: [58..59]
 r170: [41..42]
 r172: [211..213]
 r173: [192..194]
 r174: [152..154]
 r175: [135..137]
 r176: [102..104]
 r177: [32..34]
 r178: [79..81]
 r179: [52..54]
Compressing live ranges: from 219 to 171 - 78%
Ranges after the compression:
 r82: [137..154]
 r83: [137..138]
 r84: [131..134]
 r85: [131..132]
 r86: [123..124]
 r87: [111..122]
 r88: [73..110]
 r89: [95..96]
 r90: [89..90]
 r91: [87..88]
 r92: [75..86]
 r93: [73..74]
 r94: [71..72]
 r95: [53..54]
 r96: [37..52]
 r97: [36..36] [18..19]
 r98: [167..168]
 r99: [151..152]
 r100: [121..122]
 r101: [109..110]
 r102: [85..86]
 r103: [32..33]
 r104: [67..68]
 r105: [49..50]
 r106: [157..166] [0..1]
 r107: [163..164]
 r108: [161..162]
 r109: [159..160]
 r110: [157..158]
 r111: [141..150] [2..3]
 r112: [147..148]
 r113: [145..146]
 r114: [143..144]
 r115: [141..142]
 r116: [111..120] [4..5]
 r117: [117..118]
 r118: [115..116]
 r119: [113..114]
 r120: [111..112]
 r121: [99..108] [6..7]
 r122: [105..106]
 r123: [103..104]
 r124: [101..102]
 r125: [99..100]
 r126: [75..84] [8..9]
 r127: [81..82]
 r128: [79..80]
 r129: [77..78]
 r130: [75..76]
 r131: [22..31] [10..11]
 r132: [28..29]
 r133: [26..27]
 r134: [24..25]
 r135: [22..23]
 r136: [57..66] [12..13]
 r137: [63..64]
 r138: [61..62]
 r139: [59..60]
 r140: [57..58]
 r141: [39..48] [14..15]
 r142: [45..46]
 r143: [43..44]
 r144: [41..42]
 r145: [39..40]
 r146: [16..17]
 r147: [169..170]
 r148: [155..156]
 r149: [153..154]
 r150: [139..140]
 r151: [135..136]
 r152: [133..134]
 r153: [129..130]
 r154: [129..130] [125..126]
 r155: [127..128]
 r156: [123..124]
 r157: [97..98]
 r158: [95..96] [91..92]
 r159: [93..94]
 r160: [87..88]
 r161: [34..35]
 r162: [20..21]
 r163: [20..21]
 r164: [69..70]
 r165: [55..56]
 r166: [53..54]
 r167: [53..54]
 r168: [53..54]
 r169: [51..52]
 r170: [37..38]
 r172: [165..166]
 r173: [149..150]
 r174: [119..120]
 r175: [107..108]
 r176: [83..84]
 r177: [30..31]
 r178: [65..66]
 r179: [47..48]

********** Assignment #1: **********

	 Assigning to 172 (cl=GENERAL_REGS, orig=107, freq=3000, tfirst=172, tfreq=3000)...
	   Assign 1 to reload r172 (freq=3000)
	 Assigning to 173 (cl=GENERAL_REGS, orig=112, freq=3000, tfirst=173, tfreq=3000)...
	   Assign 1 to reload r173 (freq=3000)
	 Assigning to 174 (cl=GENERAL_REGS, orig=117, freq=3000, tfirst=174, tfreq=3000)...
	   Assign 2 to reload r174 (freq=3000)
	 Assigning to 175 (cl=GENERAL_REGS, orig=122, freq=3000, tfirst=175, tfreq=3000)...
	   Assign 1 to reload r175 (freq=3000)
	 Assigning to 176 (cl=GENERAL_REGS, orig=127, freq=3000, tfirst=176, tfreq=3000)...
	   Assign 4 to reload r176 (freq=3000)
	 Assigning to 177 (cl=GENERAL_REGS, orig=132, freq=3000, tfirst=177, tfreq=3000)...
	   Assign 1 to reload r177 (freq=3000)
	 Assigning to 178 (cl=GENERAL_REGS, orig=137, freq=3000, tfirst=178, tfreq=3000)...
	   Assign 1 to reload r178 (freq=3000)
	 Assigning to 179 (cl=GENERAL_REGS, orig=142, freq=3000, tfirst=179, tfreq=3000)...
	   Assign 2 to reload r179 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 28
changing reg in insn 46
changing reg in insn 45
changing reg in insn 46
changing reg in insn 50
changing reg in insn 53
changing reg in insn 52
changing reg in insn 53
changing reg in insn 62
changing reg in insn 64
changing reg in insn 64
changing reg in insn 79
changing reg in insn 65
changing reg in insn 79
changing reg in insn 120
changing reg in insn 95
changing reg in insn 98
changing reg in insn 96
changing reg in insn 98
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 104
changing reg in insn 104
changing reg in insn 119
changing reg in insn 105
changing reg in insn 119
changing reg in insn 121
changing reg in insn 123
changing reg in insn 126
changing reg in insn 169
changing reg in insn 176
changing reg in insn 178
changing reg in insn 195
changing reg in insn 196
changing reg in insn 148
changing reg in insn 199
changing reg in insn 13
changing reg in insn 14
changing reg in insn 30
changing reg in insn 31
changing reg in insn 65
changing reg in insn 66
changing reg in insn 80
changing reg in insn 81
changing reg in insn 105
changing reg in insn 106
changing reg in insn 131
changing reg in insn 132
changing reg in insn 154
changing reg in insn 155
changing reg in insn 180
changing reg in insn 181
changing reg in insn 14
changing reg in insn 22
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 31
changing reg in insn 39
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 66
changing reg in insn 74
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 81
changing reg in insn 89
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 106
changing reg in insn 114
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 132
changing reg in insn 140
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 155
changing reg in insn 163
changing reg in insn 157
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 159
changing reg in insn 159
changing reg in insn 160
changing reg in insn 181
changing reg in insn 189
changing reg in insn 183
changing reg in insn 183
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 186
changing reg in insn 199
changing reg in insn 203
changing reg in insn 12
changing reg in insn 13
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 44
changing reg in insn 45
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 56
changing reg in insn 59
changing reg in insn 57
changing reg in insn 59
changing reg in insn 61
changing reg in insn 59
changing reg in insn 58
changing reg in insn 57
changing reg in insn 62
changing reg in insn 60
changing reg in insn 59
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 94
changing reg in insn 95
changing reg in insn 100
changing reg in insn 98
changing reg in insn 97
changing reg in insn 96
changing reg in insn 101
changing reg in insn 99
changing reg in insn 98
changing reg in insn 97
changing reg in insn 99
changing reg in insn 100
changing reg in insn 103
changing reg in insn 130
changing reg in insn 131
changing reg in insn 145
changing reg in insn 147
changing reg in insn 146
changing reg in insn 147
changing reg in insn 153
changing reg in insn 154
changing reg in insn 168
changing reg in insn 169
changing reg in insn 170
changing reg in insn 173
changing reg in insn 171
changing reg in insn 174
changing reg in insn 172
changing reg in insn 175
changing reg in insn 179
changing reg in insn 180
changing reg in insn 194
changing reg in insn 195
deleting insn with uid = 14.
deleting insn with uid = 210.
deleting insn with uid = 17.
deleting insn with uid = 31.
deleting insn with uid = 212.
deleting insn with uid = 34.
deleting insn with uid = 61.
deleting insn with uid = 66.
deleting insn with uid = 214.
deleting insn with uid = 69.
deleting insn with uid = 81.
deleting insn with uid = 216.
deleting insn with uid = 84.
deleting insn with uid = 100.
deleting insn with uid = 101.
deleting insn with uid = 106.
deleting insn with uid = 218.
deleting insn with uid = 109.
deleting insn with uid = 123.
deleting insn with uid = 132.
deleting insn with uid = 220.
deleting insn with uid = 135.
deleting insn with uid = 155.
deleting insn with uid = 222.
deleting insn with uid = 158.
deleting insn with uid = 173.
deleting insn with uid = 174.
deleting insn with uid = 175.
deleting insn with uid = 178.
deleting insn with uid = 181.
deleting insn with uid = 224.
deleting insn with uid = 184.
deleting insn with uid = 199.
deleting insn with uid = 203.
starting the processing of deferred insns
ending the processing of deferred insns


makeSenLRec

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={45d,43u} r1={43d,38u,4e} r2={22d,12u} r4={17d,7u} r5={21d,11u} r6={1d,52u} r7={1d,34u} r8={10d} r9={10d} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r17={54d,12u} r18={10d} r19={1d,1u,7e} r20={11d} r21={11d} r22={11d} r23={11d} r24={11d} r25={11d} r26={11d} r27={11d} r28={10d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={11d} r37={11d} r38={10d} r39={10d} r44={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} 
;;    total ref usage 1046{825d,210u,11e} in 135{125 regular + 10 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])
        (reg:DI 5 di [ l ])) "queryTAD.c":96:75 66 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])
        (reg:DI 4 si [ aux ])) "queryTAD.c":96:75 66 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [7 vecSen+0 S8 A64])
        (reg:DI 1 dx [ vecSen ])) "queryTAD.c":96:75 66 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S8 A64])
        (reg:DI 2 cx [ i ])) "queryTAD.c":96:75 66 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])
            (const_int 0 [0]))) "queryTAD.c":97:7 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 128)
            (pc))) "queryTAD.c":97:7 659 {*jcc}
     (nil)
 -> 128)
;;  succ:       16
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 98 106 107 108 109 110 147
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg/f:DI 0 ax [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":97:22 66 {*movdi_internal}
     (nil))
(insn 13 12 209 3 (parallel [
            (set (reg/f:DI 0 ax [orig:98 _28 ] [98])
                (plus:DI (reg/f:DI 0 ax [147])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":97:22 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 209 13 15 3 (set (reg:DI 1 dx [orig:107 _47 ] [107])
        (reg:DI 0 ax [orig:106 _46 ] [106])) "queryTAD.c":97:22 66 {*movdi_internal}
     (nil))
(insn 15 209 16 3 (parallel [
            (set (reg:DI 1 dx [orig:107 _47 ] [107])
                (lshiftrt:DI (reg:DI 1 dx [orig:107 _47 ] [107])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":97:22 566 {*lshrdi3_1}
     (nil))
(insn 16 15 18 3 (parallel [
            (set (reg:DI 1 dx [orig:108 _48 ] [108])
                (plus:DI (reg:DI 1 dx [orig:107 _47 ] [107])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":97:22 191 {*adddi_1}
     (nil))
(insn 18 16 19 3 (set (reg:QI 1 dx [orig:110 _50 ] [110])
        (mem:QI (reg/f:DI 1 dx [orig:109 _49 ] [109]) [10 *_49+0 S1 A8])) "queryTAD.c":97:22 69 {*movqi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:110 _50 ] [110])
            (const_int 0 [0]))) "queryTAD.c":97:22 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 20 19 21 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) "queryTAD.c":97:22 659 {*jcc}
     (nil)
 -> 25)
;;  succ:       5 [100.0% (guessed)] 
;;              4 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 106

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 [0.0% (guessed)]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 106
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 106
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:106 _46 ] [106])) "queryTAD.c":97:22 66 {*movdi_internal}
     (nil))
(call_insn 23 22 24 4 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":97:22 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 24 23 25)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3 [100.0% (guessed)] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 99 111 112 113 114 115 148 149
(code_label 25 24 26 5 64 (nil) [1 uses])
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg/f:DI 0 ax [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":97:22 66 {*movdi_internal}
     (nil))
(insn 28 27 29 5 (set (reg:DI 2 cx [orig:82 _1 ] [82])
        (mem:DI (plus:DI (reg/f:DI 0 ax [148])
                (const_int 8 [0x8])) [2 l_18(D)->pedestrians+0 S8 A64])) "queryTAD.c":97:22 66 {*movdi_internal}
     (nil))
(insn 29 28 30 5 (set (reg/f:DI 0 ax [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])) "queryTAD.c":97:41 66 {*movdi_internal}
     (nil))
(insn 30 29 211 5 (parallel [
            (set (reg/f:DI 0 ax [orig:99 _29 ] [99])
                (plus:DI (reg/f:DI 0 ax [149])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":97:41 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 211 30 32 5 (set (reg:DI 1 dx [orig:112 _52 ] [112])
        (reg:DI 0 ax [orig:111 _51 ] [111])) "queryTAD.c":97:41 66 {*movdi_internal}
     (nil))
(insn 32 211 33 5 (parallel [
            (set (reg:DI 1 dx [orig:112 _52 ] [112])
                (lshiftrt:DI (reg:DI 1 dx [orig:112 _52 ] [112])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":97:41 566 {*lshrdi3_1}
     (nil))
(insn 33 32 35 5 (parallel [
            (set (reg:DI 1 dx [orig:113 _53 ] [113])
                (plus:DI (reg:DI 1 dx [orig:112 _52 ] [112])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":97:41 191 {*adddi_1}
     (nil))
(insn 35 33 36 5 (set (reg:QI 1 dx [orig:115 _55 ] [115])
        (mem:QI (reg/f:DI 1 dx [orig:114 _54 ] [114]) [10 *_54+0 S1 A8])) "queryTAD.c":97:41 69 {*movqi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:115 _55 ] [115])
            (const_int 0 [0]))) "queryTAD.c":97:41 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 37 36 38 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) "queryTAD.c":97:41 659 {*jcc}
     (nil)
 -> 42)
;;  succ:       7 [100.0% (guessed)] 
;;              6 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 111

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 [0.0% (guessed)]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 111
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 111
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 38 37 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:111 _51 ] [111])) "queryTAD.c":97:41 66 {*movdi_internal}
     (nil))
(call_insn 40 39 41 6 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":97:41 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 41 40 42)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5 [100.0% (guessed)] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; lr  def 	 17 [flags] 83 150
(code_label 42 41 43 7 65 (nil) [1 uses])
(note 43 42 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 7 (set (reg/f:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])) "queryTAD.c":97:41 66 {*movdi_internal}
     (nil))
(insn 45 44 46 7 (set (reg:DI 0 ax [orig:83 _2 ] [83])
        (mem:DI (plus:DI (reg/f:DI 0 ax [150])
                (const_int 8 [0x8])) [2 aux_20(D)->pedestrians+0 S8 A64])) "queryTAD.c":97:41 66 {*movdi_internal}
     (nil))
(insn 46 45 47 7 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 2 cx [orig:82 _1 ] [82])
            (reg:DI 0 ax [orig:83 _2 ] [83]))) "queryTAD.c":97:18 12 {*cmpdi_1}
     (nil))
(jump_insn 47 46 48 7 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 128)
            (pc))) "queryTAD.c":97:18 659 {*jcc}
     (nil)
 -> 128)
;;  succ:       16
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 84 85 151 152
(note 48 47 49 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 8 (set (reg/f:DI 0 ax [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":98:14 66 {*movdi_internal}
     (nil))
(insn 50 49 51 8 (set (reg:DI 1 dx [orig:84 _3 ] [84])
        (mem:DI (plus:DI (reg/f:DI 0 ax [151])
                (const_int 8 [0x8])) [2 l_18(D)->pedestrians+0 S8 A64])) "queryTAD.c":98:14 66 {*movdi_internal}
     (nil))
(insn 51 50 52 8 (set (reg/f:DI 0 ax [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])) "queryTAD.c":98:34 66 {*movdi_internal}
     (nil))
(insn 52 51 53 8 (set (reg:DI 0 ax [orig:85 _4 ] [85])
        (mem:DI (plus:DI (reg/f:DI 0 ax [152])
                (const_int 8 [0x8])) [2 aux_20(D)->pedestrians+0 S8 A64])) "queryTAD.c":98:34 66 {*movdi_internal}
     (nil))
(insn 53 52 54 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 1 dx [orig:84 _3 ] [84])
            (reg:DI 0 ax [orig:85 _4 ] [85]))) "queryTAD.c":98:9 12 {*cmpdi_1}
     (nil))
(jump_insn 54 53 55 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 151)
            (pc))) "queryTAD.c":98:9 659 {*jcc}
     (nil)
 -> 151)
;;  succ:       9 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 86 87 100 116 117 118 119 120 153 154 155 156
(note 55 54 56 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 9 (set (reg:DI 1 dx [153])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S8 A64])) "queryTAD.c":98:90 66 {*movdi_internal}
     (nil))
(insn 57 56 58 9 (set (reg:DI 0 ax [154])
        (reg:DI 1 dx [153])) "queryTAD.c":98:90 66 {*movdi_internal}
     (nil))
(insn 58 57 59 9 (parallel [
            (set (reg:DI 0 ax [154])
                (ashift:DI (reg:DI 0 ax [154])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:90 520 {*ashldi3_1}
     (nil))
(insn 59 58 60 9 (parallel [
            (set (reg:DI 0 ax [154])
                (plus:DI (reg:DI 0 ax [154])
                    (reg:DI 1 dx [153])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:90 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [153])
            (const_int 5 [0x5]))
        (nil)))
(insn 60 59 62 9 (parallel [
            (set (reg:DI 0 ax [155])
                (ashift:DI (reg:DI 0 ax [154])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:90 520 {*ashldi3_1}
     (nil))
(insn 62 60 63 9 (set (reg:DI 1 dx [orig:86 _5 ] [86])
        (reg:DI 0 ax [154])) "queryTAD.c":98:90 66 {*movdi_internal}
     (nil))
(insn 63 62 64 9 (set (reg/f:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [7 vecSen+0 S8 A64])) "queryTAD.c":98:90 66 {*movdi_internal}
     (nil))
(insn 64 63 65 9 (parallel [
            (set (reg/f:DI 0 ax [orig:87 _6 ] [87])
                (plus:DI (reg/f:DI 0 ax [156])
                    (reg:DI 1 dx [orig:86 _5 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:90 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [7 vecSen+0 S8 A64])
            (reg:DI 1 dx [orig:86 _5 ] [86]))
        (nil)))
(insn 65 64 213 9 (parallel [
            (set (reg/f:DI 1 dx [orig:100 _30 ] [100])
                (plus:DI (reg/f:DI 0 ax [orig:87 _6 ] [87])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:93 191 {*adddi_1}
     (nil))
(insn 213 65 67 9 (set (reg:DI 2 cx [orig:117 _57 ] [117])
        (reg:DI 1 dx [orig:116 _56 ] [116])) "queryTAD.c":98:93 66 {*movdi_internal}
     (nil))
(insn 67 213 68 9 (parallel [
            (set (reg:DI 2 cx [orig:117 _57 ] [117])
                (lshiftrt:DI (reg:DI 2 cx [orig:117 _57 ] [117])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:93 566 {*lshrdi3_1}
     (nil))
(insn 68 67 70 9 (parallel [
            (set (reg:DI 2 cx [orig:118 _58 ] [118])
                (plus:DI (reg:DI 2 cx [orig:117 _57 ] [117])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:93 191 {*adddi_1}
     (nil))
(insn 70 68 71 9 (set (reg:QI 2 cx [orig:120 _60 ] [120])
        (mem:QI (reg/f:DI 2 cx [orig:119 _59 ] [119]) [10 *_59+0 S1 A8])) "queryTAD.c":98:93 69 {*movqi_internal}
     (nil))
(insn 71 70 72 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:120 _60 ] [120])
            (const_int 0 [0]))) "queryTAD.c":98:93 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 72 71 73 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) "queryTAD.c":98:93 659 {*jcc}
     (nil)
 -> 77)
;;  succ:       11 [100.0% (guessed)] 
;;              10 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 87 116

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 [0.0% (guessed)]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 116
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 116
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 73 72 74 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 10 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:116 _56 ] [116])) "queryTAD.c":98:93 66 {*movdi_internal}
     (nil))
(call_insn 75 74 76 10 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":98:93 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 76 75 77)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       9 [100.0% (guessed)] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 87
;; lr  def 	 17 [flags] 88 101 121 122 123 124 125
(code_label 77 76 78 11 67 (nil) [1 uses])
(note 78 77 79 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 11 (set (reg/f:DI 2 cx [orig:88 _7 ] [88])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:87 _6 ] [87])
                (const_int 8 [0x8])) [3 _6->name+0 S8 A64])) "queryTAD.c":98:93 66 {*movdi_internal}
     (nil))
(insn 80 79 215 11 (set (reg/f:DI 0 ax [orig:101 _31 ] [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":98:70 66 {*movdi_internal}
     (nil))
(insn 215 80 82 11 (set (reg:DI 1 dx [orig:122 _62 ] [122])
        (reg:DI 0 ax [orig:121 _61 ] [121])) "queryTAD.c":98:70 66 {*movdi_internal}
     (nil))
(insn 82 215 83 11 (parallel [
            (set (reg:DI 1 dx [orig:122 _62 ] [122])
                (lshiftrt:DI (reg:DI 1 dx [orig:122 _62 ] [122])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:70 566 {*lshrdi3_1}
     (nil))
(insn 83 82 85 11 (parallel [
            (set (reg:DI 1 dx [orig:123 _63 ] [123])
                (plus:DI (reg:DI 1 dx [orig:122 _62 ] [122])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:70 191 {*adddi_1}
     (nil))
(insn 85 83 86 11 (set (reg:QI 1 dx [orig:125 _65 ] [125])
        (mem:QI (reg/f:DI 1 dx [orig:124 _64 ] [124]) [10 *_64+0 S1 A8])) "queryTAD.c":98:70 69 {*movqi_internal}
     (nil))
(insn 86 85 87 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:125 _65 ] [125])
            (const_int 0 [0]))) "queryTAD.c":98:70 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 87 86 88 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) "queryTAD.c":98:70 659 {*jcc}
     (nil)
 -> 92)
;;  succ:       13 [100.0% (guessed)] 
;;              12 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 121

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 [0.0% (guessed)]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 121
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 121
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 88 87 89 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:121 _61 ] [121])) "queryTAD.c":98:70 66 {*movdi_internal}
     (nil))
(call_insn 90 89 91 12 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":98:70 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 91 90 92)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       11 [100.0% (guessed)] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 89 90 91 92 102 126 127 128 129 130 157 158 159 160
(code_label 92 91 93 13 68 (nil) [1 uses])
(note 93 92 94 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 95 13 (set (reg/f:DI 0 ax [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":98:70 66 {*movdi_internal}
     (nil))
(insn 95 94 96 13 (set (reg:DI 1 dx [orig:89 _8 ] [89])
        (mem:DI (reg/f:DI 0 ax [157]) [2 l_18(D)->ID+0 S8 A64])) "queryTAD.c":98:70 66 {*movdi_internal}
     (nil))
(insn 96 95 97 13 (set (reg:DI 0 ax [158])
        (reg:DI 1 dx [orig:89 _8 ] [89])) "queryTAD.c":98:68 66 {*movdi_internal}
     (nil))
(insn 97 96 98 13 (parallel [
            (set (reg:DI 0 ax [158])
                (ashift:DI (reg:DI 0 ax [158])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:68 520 {*ashldi3_1}
     (nil))
(insn 98 97 99 13 (parallel [
            (set (reg:DI 0 ax [158])
                (plus:DI (reg:DI 0 ax [158])
                    (reg:DI 1 dx [orig:89 _8 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:68 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:89 _8 ] [89])
            (const_int 5 [0x5]))
        (nil)))
(insn 99 98 102 13 (parallel [
            (set (reg:DI 0 ax [159])
                (ashift:DI (reg:DI 0 ax [158])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:68 520 {*ashldi3_1}
     (nil))
(insn 102 99 103 13 (parallel [
            (set (reg:DI 1 dx [orig:91 _10 ] [91])
                (plus:DI (reg:DI 0 ax [orig:90 _9 ] [90])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:68 191 {*adddi_1}
     (nil))
(insn 103 102 104 13 (set (reg/f:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [7 vecSen+0 S8 A64])) "queryTAD.c":98:68 66 {*movdi_internal}
     (nil))
(insn 104 103 105 13 (parallel [
            (set (reg/f:DI 0 ax [orig:92 _11 ] [92])
                (plus:DI (reg/f:DI 0 ax [160])
                    (reg:DI 1 dx [orig:91 _10 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:68 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [7 vecSen+0 S8 A64])
            (reg:DI 1 dx [orig:91 _10 ] [91]))
        (nil)))
(insn 105 104 217 13 (parallel [
            (set (reg/f:DI 1 dx [orig:102 _32 ] [102])
                (plus:DI (reg/f:DI 0 ax [orig:92 _11 ] [92])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:77 191 {*adddi_1}
     (nil))
(insn 217 105 107 13 (set (reg:DI 4 si [orig:127 _67 ] [127])
        (reg:DI 1 dx [orig:126 _66 ] [126])) "queryTAD.c":98:77 66 {*movdi_internal}
     (nil))
(insn 107 217 108 13 (parallel [
            (set (reg:DI 4 si [orig:127 _67 ] [127])
                (lshiftrt:DI (reg:DI 4 si [orig:127 _67 ] [127])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:77 566 {*lshrdi3_1}
     (nil))
(insn 108 107 110 13 (parallel [
            (set (reg:DI 4 si [orig:128 _68 ] [128])
                (plus:DI (reg:DI 4 si [orig:127 _67 ] [127])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":98:77 191 {*adddi_1}
     (nil))
(insn 110 108 111 13 (set (reg:QI 4 si [orig:130 _70 ] [130])
        (mem:QI (reg/f:DI 4 si [orig:129 _69 ] [129]) [10 *_69+0 S1 A8])) "queryTAD.c":98:77 69 {*movqi_internal}
     (nil))
(insn 111 110 112 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 4 si [orig:130 _70 ] [130])
            (const_int 0 [0]))) "queryTAD.c":98:77 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 112 111 113 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 117)
            (pc))) "queryTAD.c":98:77 659 {*jcc}
     (nil)
 -> 117)
;;  succ:       15 [100.0% (guessed)] 
;;              14 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 92 126

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 [0.0% (guessed)]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 126
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 113 112 114 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 14 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:126 _66 ] [126])) "queryTAD.c":98:77 66 {*movdi_internal}
     (nil))
(call_insn 115 114 116 14 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":98:77 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 116 115 117)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       13 [100.0% (guessed)] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 92
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 92
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 93 94
(code_label 117 116 118 15 69 (nil) [1 uses])
(note 118 117 119 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 120 15 (set (reg/f:DI 0 ax [orig:93 _12 ] [93])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:92 _11 ] [92])
                (const_int 8 [0x8])) [3 _11->name+0 S8 A64])) "queryTAD.c":98:77 66 {*movdi_internal}
     (nil))
(insn 120 119 121 15 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:88 _7 ] [88])) "queryTAD.c":98:51 66 {*movdi_internal}
     (nil))
(insn 121 120 122 15 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:93 _12 ] [93])) "queryTAD.c":98:51 66 {*movdi_internal}
     (nil))
(call_insn/i 122 121 126 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcasecmp") [flags 0x41]  <function_decl 0x7fc58ebf9400 strcasecmp>) [0 strcasecmp S1 A8])
            (const_int 0 [0]))) "queryTAD.c":98:51 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 126 122 127 15 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:94 _13 ] [94])
            (const_int 0 [0]))) "queryTAD.c":98:48 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 127 126 128 15 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 151)
            (pc))) "queryTAD.c":98:48 659 {*jcc}
     (nil)
 -> 151)
;;  succ:       16 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       2
;;              7
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 103 131 132 133 134 135 161
(code_label 128 127 129 16 63 (nil) [2 uses])
(note 129 128 130 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 131 16 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])) "queryTAD.c":99:19 66 {*movdi_internal}
     (nil))
(insn 131 130 219 16 (parallel [
            (set (reg/f:DI 0 ax [orig:103 _33 ] [103])
                (plus:DI (reg/f:DI 0 ax [161])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":99:19 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 219 131 133 16 (set (reg:DI 1 dx [orig:132 _72 ] [132])
        (reg:DI 0 ax [orig:131 _71 ] [131])) "queryTAD.c":99:19 66 {*movdi_internal}
     (nil))
(insn 133 219 134 16 (parallel [
            (set (reg:DI 1 dx [orig:132 _72 ] [132])
                (lshiftrt:DI (reg:DI 1 dx [orig:132 _72 ] [132])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":99:19 566 {*lshrdi3_1}
     (nil))
(insn 134 133 136 16 (parallel [
            (set (reg:DI 1 dx [orig:133 _73 ] [133])
                (plus:DI (reg:DI 1 dx [orig:132 _72 ] [132])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":99:19 191 {*adddi_1}
     (nil))
(insn 136 134 137 16 (set (reg:QI 1 dx [orig:135 _75 ] [135])
        (mem:QI (reg/f:DI 1 dx [orig:134 _74 ] [134]) [10 *_74+0 S1 A8])) "queryTAD.c":99:19 69 {*movqi_internal}
     (nil))
(insn 137 136 138 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:135 _75 ] [135])
            (const_int 0 [0]))) "queryTAD.c":99:19 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 138 137 139 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 143)
            (pc))) "queryTAD.c":99:19 659 {*jcc}
     (nil)
 -> 143)
;;  succ:       18 [100.0% (guessed)] 
;;              17 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 131

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 [0.0% (guessed)]  (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 131
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 139 138 140 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 141 17 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:131 _71 ] [131])) "queryTAD.c":99:19 66 {*movdi_internal}
     (nil))
(call_insn 141 140 142 17 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":99:19 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 142 141 143)
;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       16 [100.0% (guessed)] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 97 162 163
(code_label 143 142 144 18 70 (nil) [1 uses])
(note 144 143 145 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 145 144 146 18 (set (reg/f:DI 0 ax [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])) "queryTAD.c":99:19 66 {*movdi_internal}
     (nil))
(insn 146 145 147 18 (set (reg/f:DI 1 dx [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":99:19 66 {*movdi_internal}
     (nil))
(insn 147 146 148 18 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [162])
                (const_int 16 [0x10])) [8 aux_20(D)->tail+0 S8 A64])
        (reg/f:DI 1 dx [163])) "queryTAD.c":99:19 66 {*movdi_internal}
     (nil))
(insn 148 147 206 18 (set (reg/f:DI 0 ax [orig:97 _16 ] [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])) "queryTAD.c":100:16 66 {*movdi_internal}
     (nil))
(jump_insn 206 148 207 18 (set (pc)
        (label_ref 197)) "queryTAD.c":100:16 660 {jump}
     (nil)
 -> 197)
;;  succ:       24 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 97

(barrier 207 206 151)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       8
;;              15
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 104 136 137 138 139 140 164
(code_label 151 207 152 19 66 (nil) [2 uses])
(note 152 151 153 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 153 152 154 19 (set (reg/f:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":102:28 66 {*movdi_internal}
     (nil))
(insn 154 153 221 19 (parallel [
            (set (reg/f:DI 0 ax [orig:104 _34 ] [104])
                (plus:DI (reg/f:DI 0 ax [164])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":102:28 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 221 154 156 19 (set (reg:DI 1 dx [orig:137 _77 ] [137])
        (reg:DI 0 ax [orig:136 _76 ] [136])) "queryTAD.c":102:28 66 {*movdi_internal}
     (nil))
(insn 156 221 157 19 (parallel [
            (set (reg:DI 1 dx [orig:137 _77 ] [137])
                (lshiftrt:DI (reg:DI 1 dx [orig:137 _77 ] [137])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":102:28 566 {*lshrdi3_1}
     (nil))
(insn 157 156 159 19 (parallel [
            (set (reg:DI 1 dx [orig:138 _78 ] [138])
                (plus:DI (reg:DI 1 dx [orig:137 _77 ] [137])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":102:28 191 {*adddi_1}
     (nil))
(insn 159 157 160 19 (set (reg:QI 1 dx [orig:140 _80 ] [140])
        (mem:QI (reg/f:DI 1 dx [orig:139 _79 ] [139]) [10 *_79+0 S1 A8])) "queryTAD.c":102:28 69 {*movqi_internal}
     (nil))
(insn 160 159 161 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:140 _80 ] [140])
            (const_int 0 [0]))) "queryTAD.c":102:28 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 161 160 162 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 166)
            (pc))) "queryTAD.c":102:28 659 {*jcc}
     (nil)
 -> 166)
;;  succ:       21 [100.0% (guessed)] 
;;              20 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 136

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 [0.0% (guessed)]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 136
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 136
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 162 161 163 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 163 162 164 20 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:136 _76 ] [136])) "queryTAD.c":102:28 66 {*movdi_internal}
     (nil))
(call_insn 164 163 165 20 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":102:28 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 165 164 166)
;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       19 [100.0% (guessed)] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 95 96 105 141 142 143 144 145 165 166 167 168 169
(code_label 166 165 167 21 72 (nil) [1 uses])
(note 167 166 168 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 168 167 169 21 (set (reg/f:DI 0 ax [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":102:28 66 {*movdi_internal}
     (nil))
(insn 169 168 170 21 (set (reg/f:DI 0 ax [orig:95 _14 ] [95])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [165])
                (const_int 16 [0x10])) [8 l_18(D)->tail+0 S8 A64])) "queryTAD.c":102:28 66 {*movdi_internal}
     (nil))
(insn 170 169 171 21 (set (reg:DI 2 cx [166])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S8 A64])) "queryTAD.c":102:15 66 {*movdi_internal}
     (nil))
(insn 171 170 172 21 (set (reg:DI 1 dx [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [7 vecSen+0 S8 A64])) "queryTAD.c":102:15 66 {*movdi_internal}
     (nil))
(insn 172 171 176 21 (set (reg:DI 4 si [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])) "queryTAD.c":102:15 66 {*movdi_internal}
     (nil))
(insn 176 172 177 21 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:95 _14 ] [95])) "queryTAD.c":102:15 66 {*movdi_internal}
     (nil))
(call_insn 177 176 179 21 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("makeSenLRec") [flags 0x3]  <function_decl 0x7fc58ebf9e00 makeSenLRec>) [0 makeSenLRec S1 A8])
            (const_int 0 [0]))) "queryTAD.c":102:15 677 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 179 177 180 21 (set (reg/f:DI 1 dx [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":102:13 66 {*movdi_internal}
     (nil))
(insn 180 179 223 21 (parallel [
            (set (reg/f:DI 1 dx [orig:105 _35 ] [105])
                (plus:DI (reg/f:DI 1 dx [169])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":102:13 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 223 180 182 21 (set (reg:DI 2 cx [orig:142 _82 ] [142])
        (reg:DI 1 dx [orig:141 _81 ] [141])) "queryTAD.c":102:13 66 {*movdi_internal}
     (nil))
(insn 182 223 183 21 (parallel [
            (set (reg:DI 2 cx [orig:142 _82 ] [142])
                (lshiftrt:DI (reg:DI 2 cx [orig:142 _82 ] [142])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":102:13 566 {*lshrdi3_1}
     (nil))
(insn 183 182 185 21 (parallel [
            (set (reg:DI 2 cx [orig:143 _83 ] [143])
                (plus:DI (reg:DI 2 cx [orig:142 _82 ] [142])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":102:13 191 {*adddi_1}
     (nil))
(insn 185 183 186 21 (set (reg:QI 2 cx [orig:145 _85 ] [145])
        (mem:QI (reg/f:DI 2 cx [orig:144 _84 ] [144]) [10 *_84+0 S1 A8])) "queryTAD.c":102:13 69 {*movqi_internal}
     (nil))
(insn 186 185 187 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:145 _85 ] [145])
            (const_int 0 [0]))) "queryTAD.c":102:13 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 187 186 188 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 192)
            (pc))) "queryTAD.c":102:13 659 {*jcc}
     (nil)
 -> 192)
;;  succ:       23 [100.0% (guessed)] 
;;              22 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96 141

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 [0.0% (guessed)]  (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 141
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 141
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 188 187 189 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 189 188 190 22 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:141 _81 ] [141])) "queryTAD.c":102:13 66 {*movdi_internal}
     (nil))
(call_insn 190 189 191 22 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":102:13 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 191 190 192)
;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       21 [100.0% (guessed)] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96
;; lr  def 	 97 170
(code_label 192 191 193 23 73 (nil) [1 uses])
(note 193 192 194 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 194 193 195 23 (set (reg/f:DI 1 dx [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":102:13 66 {*movdi_internal}
     (nil))
(insn 195 194 196 23 (set (mem/f:DI (plus:DI (reg/f:DI 1 dx [170])
                (const_int 16 [0x10])) [8 l_18(D)->tail+0 S8 A64])
        (reg/f:DI 0 ax [orig:96 _15 ] [96])) "queryTAD.c":102:13 66 {*movdi_internal}
     (nil))
(insn 196 195 197 23 (set (reg/f:DI 0 ax [orig:97 _16 ] [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":103:12 66 {*movdi_internal}
     (nil))
;;  succ:       24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 97

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 1, flags: (RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;;              18 [always] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 97
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 97
;; lr  def 	 0 [ax] 146
(code_label 197 196 198 24 71 (nil) [1 uses])
(note 198 197 204 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 204 198 208 24 (use (reg/i:DI 0 ax)) "queryTAD.c":104:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 208 204 0 NOTE_INSN_DELETED)

;; Function makeSenL (makeSenL, funcdef_no=8, decl_uid=3391, cgraph_uid=9, symbol_order=8)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=48, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 10:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 30:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=196 from oldreg=110, assigning class GENERAL_REGS to r196
   30: {r196:DI=r196:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  284: r196:DI=r109:DI
    Inserting insn reload after:
  285: r110:DI=r196:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 31:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 33:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 43:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 47:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=197 from oldreg=115, assigning class GENERAL_REGS to r197
   47: {r197:DI=r197:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  286: r197:DI=r114:DI
    Inserting insn reload after:
  287: r115:DI=r197:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 50:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 69
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 72:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=198 from oldreg=120, assigning class GENERAL_REGS to r198
   72: {r198:DI=r198:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  288: r198:DI=r119:DI
    Inserting insn reload after:
  289: r120:DI=r198:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 75:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 86:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 88:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=199 from oldreg=125, assigning class GENERAL_REGS to r199
   88: {r199:DI=r199:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  290: r199:DI=r124:DI
    Inserting insn reload after:
  291: r125:DI=r199:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 89:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 91:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 101:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 103:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 109:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=200 from oldreg=130, assigning class GENERAL_REGS to r200
  109: {r200:DI=r200:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  292: r200:DI=r129:DI
    Inserting insn reload after:
  293: r130:DI=r200:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 110:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=16,losers=2,rld_nregs=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 112:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 131:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 133:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=201 from oldreg=135, assigning class GENERAL_REGS to r201
  133: {r201:DI=r201:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  294: r201:DI=r134:DI
    Inserting insn reload after:
  295: r135:DI=r201:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 134:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 136:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 146:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 147:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 157:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 159:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=202 from oldreg=140, assigning class GENERAL_REGS to r202
  159: {r202:DI=r202:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  296: r202:DI=r139:DI
    Inserting insn reload after:
  297: r140:DI=r202:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 160:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 162:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 171:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 172:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 173:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 178:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 180:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=203 from oldreg=145, assigning class GENERAL_REGS to r203
  180: {r203:DI=r203:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  298: r203:DI=r144:DI
    Inserting insn reload after:
  299: r145:DI=r203:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 181:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 183:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 192:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 193:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 196:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=204 from oldreg=150, assigning class GENERAL_REGS to r204
  196: {r204:DI=r204:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  300: r204:DI=r149:DI
    Inserting insn reload after:
  301: r150:DI=r204:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 197:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 199:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 208:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 210:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 211:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 213:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 214:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 216:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=205 from oldreg=155, assigning class GENERAL_REGS to r205
  216: {r205:DI=r205:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  302: r205:DI=r154:DI
    Inserting insn reload after:
  303: r155:DI=r205:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 217:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 219:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 228:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 229:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 230:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 232:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=206 from oldreg=160, assigning class GENERAL_REGS to r206
  232: {r206:DI=r206:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  304: r206:DI=r159:DI
    Inserting insn reload after:
  305: r160:DI=r206:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 233:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 235:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 244:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 246:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 247:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 249:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 250:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 252:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=207 from oldreg=165, assigning class GENERAL_REGS to r207
  252: {r207:DI=r207:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  306: r207:DI=r164:DI
    Inserting insn reload after:
  307: r165:DI=r207:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 253:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 255:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 264:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 265:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 266:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 270:  (0) ?mr {*cmpdi_ccno_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33 35 34 36

********** Pseudo live ranges #1: **********

  BB 4
   Insn 21: point = 0, n_alt = 0
   Insn 20: point = 0, n_alt = 0
   Insn 19: point = 0, n_alt = 0
   Insn 18: point = 0, n_alt = 0
   Insn 17: point = 0, n_alt = 4
  BB 6
   Insn 38: point = 0, n_alt = 0
   Insn 37: point = 0, n_alt = -2
  BB 8
   Insn 55: point = 2, n_alt = 0
   Insn 54: point = 2, n_alt = -2
  BB 10
   Insn 80: point = 4, n_alt = 0
   Insn 79: point = 4, n_alt = -2
  BB 12
   Insn 96: point = 6, n_alt = 0
   Insn 95: point = 6, n_alt = -2
  BB 14
   Insn 117: point = 8, n_alt = 0
   Insn 116: point = 8, n_alt = -2
  BB 16
   Insn 141: point = 10, n_alt = 0
   Insn 140: point = 10, n_alt = -2
  BB 20
   Insn 167: point = 12, n_alt = 0
   Insn 166: point = 12, n_alt = -2
  BB 23
   Insn 188: point = 14, n_alt = 0
   Insn 187: point = 14, n_alt = -2
  BB 25
   Insn 204: point = 16, n_alt = 0
   Insn 203: point = 16, n_alt = -2
  BB 27
   Insn 224: point = 18, n_alt = 0
   Insn 223: point = 18, n_alt = -2
  BB 29
   Insn 240: point = 20, n_alt = 0
   Insn 239: point = 20, n_alt = -2
  BB 31
   Insn 260: point = 22, n_alt = 0
   Insn 259: point = 22, n_alt = -2
  BB 36
   Insn 282: point = 24, n_alt = -1
  BB 34
  BB 35
   Insn 280: point = 24, n_alt = -1
  BB 33
   Insn 271: point = 24, n_alt = -1
   Insn 270: point = 24, n_alt = 1
  BB 21
   Insn 277: point = 24, n_alt = -1
   Insn 173: point = 24, n_alt = 5
   Insn 172: point = 25, n_alt = 3
   Insn 171: point = 27, n_alt = 3
  BB 19
   Insn 164: point = 28, n_alt = -1
   Insn 163: point = 28, n_alt = 0
   Insn 162: point = 29, n_alt = 4
   Insn 161: point = 31, n_alt = -2
   Insn 160: point = 33, n_alt = 0
   Insn 297: point = 35, n_alt = -2
	Hard reg 1 is preferable by r202 with profit 1000
   Insn 159: point = 37, n_alt = 0
   Insn 296: point = 38, n_alt = -2
	Hard reg 1 is preferable by r202 with profit 1000
	Hard reg 0 is preferable by r202 with profit 1000
   Insn 158: point = 39, n_alt = -2
   Insn 157: point = 41, n_alt = 0
   Insn 156: point = 43, n_alt = 3
  BB 18
   Insn 154: point = 44, n_alt = -1
   Insn 153: point = 44, n_alt = 0
  BB 2
   Insn 275: point = 44, n_alt = -1
   Insn 6: point = 44, n_alt = 1
   Insn 2: point = 44, n_alt = 5
  BB 17
   Insn 147: point = 44, n_alt = 1
   Insn 146: point = 44, n_alt = 5
   Insn 145: point = 45, n_alt = 3
  BB 15
   Insn 138: point = 47, n_alt = -1
   Insn 137: point = 47, n_alt = 0
   Insn 136: point = 48, n_alt = 4
   Insn 135: point = 50, n_alt = -2
   Insn 134: point = 52, n_alt = 0
   Insn 295: point = 54, n_alt = -2
	Hard reg 2 is preferable by r201 with profit 1000
   Insn 133: point = 56, n_alt = 0
   Insn 294: point = 57, n_alt = -2
	Hard reg 2 is preferable by r201 with profit 1000
	Hard reg 1 is preferable by r201 with profit 1000
   Insn 132: point = 58, n_alt = -2
   Insn 131: point = 60, n_alt = 0
   Insn 130: point = 62, n_alt = 3
   Insn 129: point = 63, n_alt = -2
   Insn 128: point = 64, n_alt = 0
   Insn 127: point = 64, n_alt = -2
   Insn 126: point = 65, n_alt = -2
   Insn 125: point = 66, n_alt = -2
   Insn 124: point = 67, n_alt = -2
   Insn 123: point = 68, n_alt = 3
   Insn 122: point = 69, n_alt = 3
   Insn 121: point = 71, n_alt = 3
  BB 13
   Insn 114: point = 73, n_alt = -1
   Insn 113: point = 73, n_alt = 0
   Insn 112: point = 74, n_alt = 4
   Insn 111: point = 76, n_alt = -2
   Insn 110: point = 78, n_alt = 0
   Insn 293: point = 80, n_alt = -2
	Hard reg 4 is preferable by r200 with profit 1000
   Insn 109: point = 82, n_alt = 0
   Insn 292: point = 83, n_alt = -2
	Hard reg 4 is preferable by r200 with profit 1000
	Hard reg 0 is preferable by r200 with profit 1000
   Insn 108: point = 84, n_alt = -2
   Insn 107: point = 86, n_alt = 0
   Insn 106: point = 88, n_alt = 3
   Insn 105: point = 89, n_alt = 3
   Insn 104: point = 91, n_alt = 3
   Insn 103: point = 92, n_alt = 1
   Insn 102: point = 94, n_alt = 0
   Insn 101: point = 95, n_alt = 5
   Insn 100: point = 96, n_alt = 3
  BB 11
   Insn 93: point = 98, n_alt = -1
   Insn 92: point = 98, n_alt = 0
   Insn 91: point = 99, n_alt = 4
   Insn 90: point = 101, n_alt = -2
   Insn 89: point = 103, n_alt = 0
   Insn 291: point = 105, n_alt = -2
	Hard reg 2 is preferable by r199 with profit 1000
   Insn 88: point = 107, n_alt = 0
   Insn 290: point = 108, n_alt = -2
	Hard reg 2 is preferable by r199 with profit 1000
	Hard reg 0 is preferable by r199 with profit 1000
   Insn 87: point = 109, n_alt = -2
   Insn 86: point = 111, n_alt = 0
   Insn 85: point = 113, n_alt = 3
   Insn 84: point = 114, n_alt = 3
  BB 9
   Insn 77: point = 117, n_alt = -1
   Insn 76: point = 117, n_alt = 0
   Insn 75: point = 118, n_alt = 4
   Insn 74: point = 120, n_alt = -2
   Insn 73: point = 122, n_alt = 0
   Insn 289: point = 124, n_alt = -2
	Hard reg 2 is preferable by r198 with profit 1000
   Insn 72: point = 126, n_alt = 0
   Insn 288: point = 127, n_alt = -2
	Hard reg 2 is preferable by r198 with profit 1000
	Hard reg 1 is preferable by r198 with profit 1000
   Insn 71: point = 128, n_alt = -2
   Insn 70: point = 130, n_alt = -2
   Insn 69: point = 131, n_alt = 0
   Insn 68: point = 133, n_alt = -2
   Insn 67: point = 135, n_alt = -2
   Insn 66: point = 137, n_alt = 0
   Insn 65: point = 139, n_alt = 0
   Insn 64: point = 141, n_alt = 0
   Insn 63: point = 142, n_alt = -2
   Insn 62: point = 143, n_alt = 1
   Insn 61: point = 145, n_alt = 0
   Insn 60: point = 146, n_alt = 3
   Insn 59: point = 148, n_alt = 3
  BB 7
   Insn 52: point = 149, n_alt = -1
   Insn 51: point = 149, n_alt = 0
   Insn 50: point = 150, n_alt = 4
   Insn 49: point = 152, n_alt = -2
   Insn 48: point = 154, n_alt = 0
   Insn 287: point = 156, n_alt = -2
	Hard reg 1 is preferable by r197 with profit 1000
   Insn 47: point = 158, n_alt = 0
   Insn 286: point = 159, n_alt = -2
	Hard reg 1 is preferable by r197 with profit 1000
	Hard reg 0 is preferable by r197 with profit 1000
   Insn 46: point = 160, n_alt = -2
   Insn 45: point = 162, n_alt = 0
   Insn 44: point = 164, n_alt = 3
   Insn 43: point = 165, n_alt = 5
   Insn 42: point = 166, n_alt = 3
  BB 5
   Insn 35: point = 168, n_alt = -1
   Insn 34: point = 168, n_alt = 0
   Insn 33: point = 169, n_alt = 4
   Insn 32: point = 171, n_alt = -2
   Insn 31: point = 173, n_alt = 0
   Insn 285: point = 175, n_alt = -2
	Hard reg 2 is preferable by r196 with profit 1000
   Insn 30: point = 177, n_alt = 0
   Insn 284: point = 178, n_alt = -2
	Hard reg 2 is preferable by r196 with profit 1000
	Hard reg 0 is preferable by r196 with profit 1000
   Insn 29: point = 179, n_alt = -2
   Insn 28: point = 181, n_alt = 3
   Insn 27: point = 182, n_alt = 1
   Insn 26: point = 184, n_alt = 0
   Insn 25: point = 186, n_alt = 0
  BB 3
   Insn 15: point = 187, n_alt = -1
   Insn 14: point = 187, n_alt = 1
   Insn 13: point = 187, n_alt = 5
   Insn 12: point = 188, n_alt = -2
   Insn 11: point = 189, n_alt = 0
   Insn 10: point = 189, n_alt = 2
  BB 32
   Insn 266: point = 189, n_alt = 5
   Insn 265: point = 190, n_alt = 3
   Insn 264: point = 192, n_alt = 3
  BB 30
   Insn 257: point = 193, n_alt = -1
   Insn 256: point = 193, n_alt = 0
   Insn 255: point = 194, n_alt = 4
   Insn 254: point = 196, n_alt = -2
   Insn 253: point = 198, n_alt = 0
   Insn 307: point = 200, n_alt = -2
	Hard reg 1 is preferable by r207 with profit 1000
   Insn 252: point = 202, n_alt = 0
   Insn 306: point = 203, n_alt = -2
	Hard reg 1 is preferable by r207 with profit 1000
	Hard reg 0 is preferable by r207 with profit 1000
   Insn 251: point = 204, n_alt = -2
   Insn 250: point = 206, n_alt = 0
   Insn 249: point = 208, n_alt = 3
   Insn 248: point = 209, n_alt = 0
   Insn 247: point = 209, n_alt = 3
   Insn 246: point = 209, n_alt = 4
   Insn 245: point = 209, n_alt = -2
   Insn 244: point = 210, n_alt = 3
  BB 28
   Insn 237: point = 213, n_alt = -1
   Insn 236: point = 213, n_alt = 0
   Insn 235: point = 214, n_alt = 4
   Insn 234: point = 216, n_alt = -2
   Insn 233: point = 218, n_alt = 0
   Insn 305: point = 220, n_alt = -2
	Hard reg 2 is preferable by r206 with profit 1000
   Insn 232: point = 222, n_alt = 0
   Insn 304: point = 223, n_alt = -2
	Hard reg 2 is preferable by r206 with profit 1000
	Hard reg 1 is preferable by r206 with profit 1000
   Insn 231: point = 224, n_alt = -2
   Insn 230: point = 226, n_alt = 3
   Insn 229: point = 227, n_alt = 3
   Insn 228: point = 229, n_alt = 3
  BB 26
   Insn 221: point = 230, n_alt = -1
   Insn 220: point = 230, n_alt = 0
   Insn 219: point = 231, n_alt = 4
   Insn 218: point = 233, n_alt = -2
   Insn 217: point = 235, n_alt = 0
   Insn 303: point = 237, n_alt = -2
	Hard reg 1 is preferable by r205 with profit 1000
   Insn 216: point = 239, n_alt = 0
   Insn 302: point = 240, n_alt = -2
	Hard reg 1 is preferable by r205 with profit 1000
	Hard reg 0 is preferable by r205 with profit 1000
   Insn 215: point = 241, n_alt = -2
   Insn 214: point = 243, n_alt = 0
   Insn 213: point = 245, n_alt = 3
   Insn 212: point = 246, n_alt = 0
   Insn 211: point = 246, n_alt = 3
   Insn 210: point = 246, n_alt = 4
   Insn 209: point = 246, n_alt = -2
   Insn 208: point = 247, n_alt = 3
  BB 24
   Insn 201: point = 250, n_alt = -1
   Insn 200: point = 250, n_alt = 0
   Insn 199: point = 251, n_alt = 4
   Insn 198: point = 253, n_alt = -2
   Insn 197: point = 255, n_alt = 0
   Insn 301: point = 257, n_alt = -2
	Hard reg 2 is preferable by r204 with profit 1000
   Insn 196: point = 259, n_alt = 0
   Insn 300: point = 260, n_alt = -2
	Hard reg 2 is preferable by r204 with profit 1000
	Hard reg 1 is preferable by r204 with profit 1000
   Insn 195: point = 261, n_alt = -2
   Insn 194: point = 263, n_alt = -2
   Insn 193: point = 264, n_alt = 3
   Insn 192: point = 266, n_alt = 3
  BB 22
   Insn 185: point = 267, n_alt = -1
   Insn 184: point = 267, n_alt = 0
   Insn 183: point = 268, n_alt = 4
   Insn 182: point = 270, n_alt = -2
   Insn 181: point = 272, n_alt = 0
   Insn 299: point = 274, n_alt = -2
	Hard reg 1 is preferable by r203 with profit 1000
   Insn 180: point = 276, n_alt = 0
   Insn 298: point = 277, n_alt = -2
	Hard reg 1 is preferable by r203 with profit 1000
	Hard reg 0 is preferable by r203 with profit 1000
   Insn 179: point = 278, n_alt = -2
   Insn 178: point = 280, n_alt = 0
   Insn 177: point = 282, n_alt = 3
 r82: [183..184]
 r83: [165..182]
 r84: [132..146]
 r85: [140..143]
 r86: [132..133]
 r87: [115..131]
 r88: [95..114]
 r89: [67..92]
 r90: [66..89]
 r91: [64..69]
 r92: [44..63]
 r93: [248..264]
 r94: [246..247]
 r95: [211..227]
 r96: [209..210]
 r97: [180..181]
 r98: [161..162]
 r99: [129..130]
 r100: [110..111]
 r101: [85..86]
 r102: [59..60]
 r103: [40..41]
 r104: [279..280]
 r105: [262..263]
 r106: [242..243]
 r107: [225..226]
 r108: [205..206]
 r109: [168..179] [0..1]
 r110: [174..175]
 r111: [172..173]
 r112: [170..171]
 r113: [168..169]
 r114: [149..160] [2..3]
 r115: [155..156]
 r116: [153..154]
 r117: [151..152]
 r118: [149..150]
 r119: [117..128] [4..5]
 r120: [123..124]
 r121: [121..122]
 r122: [119..120]
 r123: [117..118]
 r124: [98..109] [6..7]
 r125: [104..105]
 r126: [102..103]
 r127: [100..101]
 r128: [98..99]
 r129: [73..84] [8..9]
 r130: [79..80]
 r131: [77..78]
 r132: [75..76]
 r133: [73..74]
 r134: [47..58] [10..11]
 r135: [53..54]
 r136: [51..52]
 r137: [49..50]
 r138: [47..48]
 r139: [28..39] [12..13]
 r140: [34..35]
 r141: [32..33]
 r142: [30..31]
 r143: [28..29]
 r144: [267..278] [14..15]
 r145: [273..274]
 r146: [271..272]
 r147: [269..270]
 r148: [267..268]
 r149: [250..261] [16..17]
 r150: [256..257]
 r151: [254..255]
 r152: [252..253]
 r153: [250..251]
 r154: [230..241] [18..19]
 r155: [236..237]
 r156: [234..235]
 r157: [232..233]
 r158: [230..231]
 r159: [213..224] [20..21]
 r160: [219..220]
 r161: [217..218]
 r162: [215..216]
 r163: [213..214]
 r164: [193..204] [22..23]
 r165: [199..200]
 r166: [197..198]
 r167: [195..196]
 r168: [193..194]
 r169: [187..188]
 r170: [185..186]
 r171: [165..166]
 r172: [163..164]
 r173: [147..148]
 r174: [144..145]
 r175: [138..142] [134..135]
 r176: [136..137]
 r177: [112..113]
 r178: [95..96]
 r179: [93..94]
 r180: [90..91]
 r181: [87..88]
 r182: [70..71]
 r183: [65..68]
 r184: [61..62]
 r185: [44..45]
 r186: [42..43]
 r187: [26..27]
 r188: [24..25]
 r189: [281..282]
 r190: [265..266]
 r191: [244..245]
 r192: [228..229]
 r193: [207..208]
 r194: [191..192]
 r195: [189..190]
 r196: [176..178]
 r197: [157..159]
 r198: [125..127]
 r199: [106..108]
 r200: [81..83]
 r201: [55..57]
 r202: [36..38]
 r203: [275..277]
 r204: [258..260]
 r205: [238..240]
 r206: [221..223]
 r207: [201..203]
Compressing live ranges: from 283 to 232 - 81%
Ranges after the compression:
 r82: [148..149]
 r83: [134..147]
 r84: [108..117]
 r85: [114..115]
 r86: [108..109]
 r87: [96..107]
 r88: [80..95]
 r89: [58..77]
 r90: [58..75]
 r91: [58..59]
 r92: [42..57]
 r93: [204..215]
 r94: [202..203]
 r95: [174..185]
 r96: [172..173]
 r97: [146..147]
 r98: [130..131]
 r99: [106..107]
 r100: [92..93]
 r101: [72..73]
 r102: [54..55]
 r103: [38..39]
 r104: [228..229]
 r105: [214..215]
 r106: [198..199]
 r107: [184..185]
 r108: [168..169]
 r109: [136..145] [0..1]
 r110: [142..143]
 r111: [140..141]
 r112: [138..139]
 r113: [136..137]
 r114: [120..129] [2..3]
 r115: [126..127]
 r116: [124..125]
 r117: [122..123]
 r118: [120..121]
 r119: [96..105] [4..5]
 r120: [102..103]
 r121: [100..101]
 r122: [98..99]
 r123: [96..97]
 r124: [82..91] [6..7]
 r125: [88..89]
 r126: [86..87]
 r127: [84..85]
 r128: [82..83]
 r129: [62..71] [8..9]
 r130: [68..69]
 r131: [66..67]
 r132: [64..65]
 r133: [62..63]
 r134: [44..53] [10..11]
 r135: [50..51]
 r136: [48..49]
 r137: [46..47]
 r138: [44..45]
 r139: [28..37] [12..13]
 r140: [34..35]
 r141: [32..33]
 r142: [30..31]
 r143: [28..29]
 r144: [218..227] [14..15]
 r145: [224..225]
 r146: [222..223]
 r147: [220..221]
 r148: [218..219]
 r149: [204..213] [16..17]
 r150: [210..211]
 r151: [208..209]
 r152: [206..207]
 r153: [204..205]
 r154: [188..197] [18..19]
 r155: [194..195]
 r156: [192..193]
 r157: [190..191]
 r158: [188..189]
 r159: [174..183] [20..21]
 r160: [180..181]
 r161: [178..179]
 r162: [176..177]
 r163: [174..175]
 r164: [158..167] [22..23]
 r165: [164..165]
 r166: [162..163]
 r167: [160..161]
 r168: [158..159]
 r169: [152..153]
 r170: [150..151]
 r171: [134..135]
 r172: [132..133]
 r173: [118..119]
 r174: [116..117]
 r175: [114..115] [110..111]
 r176: [112..113]
 r177: [94..95]
 r178: [80..81]
 r179: [78..79]
 r180: [76..77]
 r181: [74..75]
 r182: [60..61]
 r183: [58..59]
 r184: [56..57]
 r185: [42..43]
 r186: [40..41]
 r187: [26..27]
 r188: [24..25]
 r189: [230..231]
 r190: [216..217]
 r191: [200..201]
 r192: [186..187]
 r193: [170..171]
 r194: [156..157]
 r195: [154..155]
 r196: [144..145]
 r197: [128..129]
 r198: [104..105]
 r199: [90..91]
 r200: [70..71]
 r201: [52..53]
 r202: [36..37]
 r203: [226..227]
 r204: [212..213]
 r205: [196..197]
 r206: [182..183]
 r207: [166..167]

********** Assignment #1: **********

	 Assigning to 196 (cl=GENERAL_REGS, orig=110, freq=3000, tfirst=196, tfreq=3000)...
	   Assign 2 to reload r196 (freq=3000)
	 Assigning to 197 (cl=GENERAL_REGS, orig=115, freq=3000, tfirst=197, tfreq=3000)...
	   Assign 1 to reload r197 (freq=3000)
	 Assigning to 198 (cl=GENERAL_REGS, orig=120, freq=3000, tfirst=198, tfreq=3000)...
	   Assign 2 to reload r198 (freq=3000)
	 Assigning to 199 (cl=GENERAL_REGS, orig=125, freq=3000, tfirst=199, tfreq=3000)...
	   Assign 2 to reload r199 (freq=3000)
	 Assigning to 200 (cl=GENERAL_REGS, orig=130, freq=3000, tfirst=200, tfreq=3000)...
	   Assign 4 to reload r200 (freq=3000)
	 Assigning to 201 (cl=GENERAL_REGS, orig=135, freq=3000, tfirst=201, tfreq=3000)...
	   Assign 2 to reload r201 (freq=3000)
	 Assigning to 202 (cl=GENERAL_REGS, orig=140, freq=3000, tfirst=202, tfreq=3000)...
	   Assign 1 to reload r202 (freq=3000)
	 Assigning to 203 (cl=GENERAL_REGS, orig=145, freq=3000, tfirst=203, tfreq=3000)...
	   Assign 1 to reload r203 (freq=3000)
	 Assigning to 204 (cl=GENERAL_REGS, orig=150, freq=3000, tfirst=204, tfreq=3000)...
	   Assign 2 to reload r204 (freq=3000)
	 Assigning to 205 (cl=GENERAL_REGS, orig=155, freq=3000, tfirst=205, tfreq=3000)...
	   Assign 1 to reload r205 (freq=3000)
	 Assigning to 206 (cl=GENERAL_REGS, orig=160, freq=3000, tfirst=206, tfreq=3000)...
	   Assign 2 to reload r206 (freq=3000)
	 Assigning to 207 (cl=GENERAL_REGS, orig=165, freq=3000, tfirst=207, tfreq=3000)...
	   Assign 1 to reload r207 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=48, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 43
changing reg in insn 60
changing reg in insn 62
changing reg in insn 65
changing reg in insn 63
changing reg in insn 65
changing reg in insn 68
changing reg in insn 69
changing reg in insn 84
changing reg in insn 70
changing reg in insn 84
changing reg in insn 101
changing reg in insn 103
changing reg in insn 124
changing reg in insn 105
changing reg in insn 125
changing reg in insn 122
changing reg in insn 127
changing reg in insn 129
changing reg in insn 146
changing reg in insn 193
changing reg in insn 208
changing reg in insn 194
changing reg in insn 208
changing reg in insn 209
changing reg in insn 229
changing reg in insn 244
changing reg in insn 230
changing reg in insn 244
changing reg in insn 245
changing reg in insn 28
changing reg in insn 29
changing reg in insn 45
changing reg in insn 46
changing reg in insn 70
changing reg in insn 71
changing reg in insn 86
changing reg in insn 87
changing reg in insn 107
changing reg in insn 108
changing reg in insn 131
changing reg in insn 132
changing reg in insn 157
changing reg in insn 158
changing reg in insn 178
changing reg in insn 179
changing reg in insn 194
changing reg in insn 195
changing reg in insn 214
changing reg in insn 215
changing reg in insn 230
changing reg in insn 231
changing reg in insn 250
changing reg in insn 251
changing reg in insn 29
changing reg in insn 37
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 46
changing reg in insn 54
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 71
changing reg in insn 79
changing reg in insn 73
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 87
changing reg in insn 95
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 108
changing reg in insn 116
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 132
changing reg in insn 140
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 158
changing reg in insn 166
changing reg in insn 160
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 179
changing reg in insn 187
changing reg in insn 181
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 184
changing reg in insn 195
changing reg in insn 203
changing reg in insn 197
changing reg in insn 197
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 200
changing reg in insn 215
changing reg in insn 223
changing reg in insn 217
changing reg in insn 217
changing reg in insn 218
changing reg in insn 218
changing reg in insn 219
changing reg in insn 219
changing reg in insn 220
changing reg in insn 231
changing reg in insn 239
changing reg in insn 233
changing reg in insn 233
changing reg in insn 234
changing reg in insn 234
changing reg in insn 235
changing reg in insn 235
changing reg in insn 236
changing reg in insn 251
changing reg in insn 259
changing reg in insn 253
changing reg in insn 253
changing reg in insn 254
changing reg in insn 254
changing reg in insn 255
changing reg in insn 255
changing reg in insn 256
changing reg in insn 12
changing reg in insn 13
changing reg in insn 25
changing reg in insn 26
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 67
changing reg in insn 65
changing reg in insn 64
changing reg in insn 63
changing reg in insn 68
changing reg in insn 66
changing reg in insn 65
changing reg in insn 64
changing reg in insn 66
changing reg in insn 67
changing reg in insn 85
changing reg in insn 86
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 121
changing reg in insn 122
changing reg in insn 123
changing reg in insn 126
changing reg in insn 130
changing reg in insn 131
changing reg in insn 145
changing reg in insn 146
changing reg in insn 156
changing reg in insn 157
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 173
changing reg in insn 177
changing reg in insn 178
changing reg in insn 192
changing reg in insn 193
changing reg in insn 213
changing reg in insn 214
changing reg in insn 228
changing reg in insn 229
changing reg in insn 249
changing reg in insn 250
changing reg in insn 264
changing reg in insn 265
changing reg in insn 265
changing reg in insn 266
deleting insn with uid = 12.
deleting insn with uid = 29.
deleting insn with uid = 285.
deleting insn with uid = 32.
deleting insn with uid = 46.
deleting insn with uid = 287.
deleting insn with uid = 49.
deleting insn with uid = 67.
deleting insn with uid = 68.
deleting insn with uid = 71.
deleting insn with uid = 289.
deleting insn with uid = 74.
deleting insn with uid = 87.
deleting insn with uid = 291.
deleting insn with uid = 90.
deleting insn with uid = 108.
deleting insn with uid = 293.
deleting insn with uid = 111.
deleting insn with uid = 124.
deleting insn with uid = 125.
deleting insn with uid = 126.
deleting insn with uid = 129.
deleting insn with uid = 132.
deleting insn with uid = 295.
deleting insn with uid = 135.
deleting insn with uid = 158.
deleting insn with uid = 297.
deleting insn with uid = 161.
deleting insn with uid = 179.
deleting insn with uid = 299.
deleting insn with uid = 182.
deleting insn with uid = 195.
deleting insn with uid = 301.
deleting insn with uid = 198.
deleting insn with uid = 215.
deleting insn with uid = 303.
deleting insn with uid = 218.
deleting insn with uid = 231.
deleting insn with uid = 305.
deleting insn with uid = 234.
deleting insn with uid = 251.
deleting insn with uid = 307.
deleting insn with uid = 254.
starting the processing of deferred insns
ending the processing of deferred insns


makeSenL

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={62d,55u} r1={50d,35u,1e} r2={46d,26u} r4={27d,7u} r5={38d,19u} r6={1d,69u} r7={1d,55u} r8={19d} r9={19d} r10={19d} r11={19d} r12={19d} r13={19d} r14={19d} r15={19d} r17={73d,15u} r18={19d} r19={1d,1u,9e} r20={20d} r21={20d} r22={20d} r23={20d} r24={20d} r25={20d} r26={20d} r27={20d} r28={19d} r29={19d} r30={19d} r31={19d} r32={19d} r33={19d} r34={19d} r35={19d} r36={20d} r37={20d} r38={19d} r39={19d} r44={19d} r45={19d} r46={19d} r47={19d} r48={19d} r49={19d} r50={19d} r51={19d} r52={19d} r53={19d} r54={19d} r55={19d} r56={19d} r57={19d} r58={19d} r59={19d} r60={19d} r61={19d} r62={19d} r63={19d} r64={19d} r65={19d} r66={19d} r67={19d} r68={19d} r69={19d} r70={19d} r71={19d} r72={19d} r73={19d} r74={19d} r75={19d} 
;;    total ref usage 1760{1468d,282u,10e} in 185{166 regular + 19 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])
        (reg:DI 5 di [ q ])) "queryTAD.c":107:26 66 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 275 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [13 i+0 S4 A32])
        (const_int 0 [0])) "queryTAD.c":108:13 67 {*movsi_internal}
     (nil))
(jump_insn 275 6 276 2 (set (pc)
        (label_ref 148)) "queryTAD.c":108:5 660 {jump}
     (nil)
 -> 148)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 276 275 150)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       18
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 169
(code_label 150 276 9 3 83 (nil) [1 uses])
(note 9 150 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "queryTAD.c":109:23 66 {*movdi_internal}
     (nil))
(call_insn 11 10 13 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fc58ee82000 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "queryTAD.c":109:23 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 11 14 3 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 aux+0 S8 A64])
        (reg/f:DI 0 ax [169])) "queryTAD.c":109:23 66 {*movdi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [8 aux+0 S8 A64])
            (const_int 0 [0]))) "queryTAD.c":110:12 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "queryTAD.c":110:12 659 {*jcc}
     (nil)
 -> 23)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fc58ec2dcf0 *.LC0>)) "queryTAD.c":111:13 66 {*movdi_internal}
     (nil))
(call_insn 18 17 19 4 (call (mem:QI (symbol_ref:DI ("perror") [flags 0x41]  <function_decl 0x7fc58ef5f500 perror>) [0 perror S1 A8])
        (const_int 0 [0])) "queryTAD.c":111:13 666 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 19 18 20 4 (call (mem:QI (symbol_ref:DI ("__asan_handle_no_return") [flags 0x41]  <function_decl 0x7fc58eead800 __builtin___asan_handle_no_return>) [0 __builtin___asan_handle_no_return S1 A8])
        (const_int 0 [0])) "queryTAD.c":112:13 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 20 19 21 4 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "queryTAD.c":112:13 67 {*movsi_internal}
     (nil))
(call_insn 21 20 22 4 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fc58ee7c900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) "queryTAD.c":112:13 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 22 21 23)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 83 97 109 110 111 112 113 170
(code_label 23 22 24 5 76 (nil) [1 uses])
(note 24 23 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 5 (set (reg:SI 0 ax [170])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [13 i+0 S4 A32])) "queryTAD.c":114:20 67 {*movsi_internal}
     (nil))
(insn 26 25 27 5 (parallel [
            (set (reg:SI 0 ax [orig:82 _1 ] [82])
                (plus:SI (reg:SI 0 ax [170])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":114:20 190 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -20 [0xffffffffffffffec])) [13 i+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 27 26 28 5 (set (reg:DI 1 dx [orig:83 _2 ] [83])
        (sign_extend:DI (reg:SI 0 ax [orig:82 _1 ] [82]))) "queryTAD.c":114:20 128 {*extendsidi2_rex64}
     (nil))
(insn 28 27 284 5 (set (reg/f:DI 0 ax [orig:97 _36 ] [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 aux+0 S8 A64])) "queryTAD.c":114:17 66 {*movdi_internal}
     (nil))
(insn 284 28 30 5 (set (reg:DI 2 cx [orig:110 _62 ] [110])
        (reg:DI 0 ax [orig:109 _61 ] [109])) "queryTAD.c":114:17 66 {*movdi_internal}
     (nil))
(insn 30 284 31 5 (parallel [
            (set (reg:DI 2 cx [orig:110 _62 ] [110])
                (lshiftrt:DI (reg:DI 2 cx [orig:110 _62 ] [110])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":114:17 566 {*lshrdi3_1}
     (nil))
(insn 31 30 33 5 (parallel [
            (set (reg:DI 2 cx [orig:111 _63 ] [111])
                (plus:DI (reg:DI 2 cx [orig:110 _62 ] [110])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":114:17 191 {*adddi_1}
     (nil))
(insn 33 31 34 5 (set (reg:QI 2 cx [orig:113 _65 ] [113])
        (mem:QI (reg/f:DI 2 cx [orig:112 _64 ] [112]) [10 *_64+0 S1 A8])) "queryTAD.c":114:17 69 {*movqi_internal}
     (nil))
(insn 34 33 35 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:113 _65 ] [113])
            (const_int 0 [0]))) "queryTAD.c":114:17 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 35 34 36 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) "queryTAD.c":114:17 659 {*jcc}
     (nil)
 -> 40)
;;  succ:       7 [100.0% (guessed)] 
;;              6 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83 109

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 [0.0% (guessed)]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 109
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 109
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 36 35 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:109 _61 ] [109])) "queryTAD.c":114:17 66 {*movdi_internal}
     (nil))
(call_insn 38 37 39 6 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":114:17 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 39 38 40)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5 [100.0% (guessed)] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  def 	 17 [flags] 98 114 115 116 117 118 171 172
(code_label 40 39 41 7 77 (nil) [1 uses])
(note 41 40 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 7 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 aux+0 S8 A64])) "queryTAD.c":114:17 66 {*movdi_internal}
     (nil))
(insn 43 42 44 7 (set (mem:DI (reg/f:DI 0 ax [171]) [2 aux_28->ID+0 S8 A64])
        (reg:DI 1 dx [orig:83 _2 ] [83])) "queryTAD.c":114:17 66 {*movdi_internal}
     (nil))
(insn 44 43 45 7 (set (reg/f:DI 0 ax [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":115:29 66 {*movdi_internal}
     (nil))
(insn 45 44 286 7 (parallel [
            (set (reg/f:DI 0 ax [orig:98 _37 ] [98])
                (plus:DI (reg/f:DI 0 ax [172])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:29 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 286 45 47 7 (set (reg:DI 1 dx [orig:115 _67 ] [115])
        (reg:DI 0 ax [orig:114 _66 ] [114])) "queryTAD.c":115:29 66 {*movdi_internal}
     (nil))
(insn 47 286 48 7 (parallel [
            (set (reg:DI 1 dx [orig:115 _67 ] [115])
                (lshiftrt:DI (reg:DI 1 dx [orig:115 _67 ] [115])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:29 566 {*lshrdi3_1}
     (nil))
(insn 48 47 50 7 (parallel [
            (set (reg:DI 1 dx [orig:116 _68 ] [116])
                (plus:DI (reg:DI 1 dx [orig:115 _67 ] [115])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:29 191 {*adddi_1}
     (nil))
(insn 50 48 51 7 (set (reg:QI 1 dx [orig:118 _70 ] [118])
        (mem:QI (reg/f:DI 1 dx [orig:117 _69 ] [117]) [10 *_69+0 S1 A8])) "queryTAD.c":115:29 69 {*movqi_internal}
     (nil))
(insn 51 50 52 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:118 _70 ] [118])
            (const_int 0 [0]))) "queryTAD.c":115:29 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 52 51 53 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) "queryTAD.c":115:29 659 {*jcc}
     (nil)
 -> 57)
;;  succ:       9 [100.0% (guessed)] 
;;              8 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 114

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 [0.0% (guessed)]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 114
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 114
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 53 52 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:114 _66 ] [114])) "queryTAD.c":115:29 66 {*movdi_internal}
     (nil))
(call_insn 55 54 56 8 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":115:29 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 56 55 57)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       7 [100.0% (guessed)] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 84 85 86 87 99 119 120 121 122 123 173 174 175 176
(code_label 57 56 58 9 78 (nil) [1 uses])
(note 58 57 59 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 9 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":115:29 66 {*movdi_internal}
     (nil))
(insn 60 59 61 9 (set (reg/f:DI 2 cx [orig:84 _3 ] [84])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [173])
                (const_int 24 [0x18])) [7 q_22(D)->sensorsID+0 S8 A64])) "queryTAD.c":115:29 66 {*movdi_internal}
     (nil))
(insn 61 60 62 9 (set (reg:SI 0 ax [174])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [13 i+0 S4 A32])) "queryTAD.c":115:40 67 {*movsi_internal}
     (nil))
(insn 62 61 63 9 (set (reg:DI 1 dx [orig:85 _4 ] [85])
        (sign_extend:DI (reg:SI 0 ax [174]))) "queryTAD.c":115:40 128 {*extendsidi2_rex64}
     (nil))
(insn 63 62 64 9 (set (reg:DI 0 ax [175])
        (reg:DI 1 dx [orig:85 _4 ] [85])) "queryTAD.c":115:40 66 {*movdi_internal}
     (nil))
(insn 64 63 65 9 (parallel [
            (set (reg:DI 0 ax [175])
                (ashift:DI (reg:DI 0 ax [175])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:40 520 {*ashldi3_1}
     (nil))
(insn 65 64 66 9 (parallel [
            (set (reg:DI 0 ax [175])
                (plus:DI (reg:DI 0 ax [175])
                    (reg:DI 1 dx [orig:85 _4 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:40 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:85 _4 ] [85])
            (const_int 5 [0x5]))
        (nil)))
(insn 66 65 69 9 (parallel [
            (set (reg:DI 0 ax [176])
                (ashift:DI (reg:DI 0 ax [175])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:40 520 {*ashldi3_1}
     (nil))
(insn 69 66 70 9 (parallel [
            (set (reg/f:DI 0 ax [orig:87 _6 ] [87])
                (plus:DI (reg:DI 0 ax [orig:86 _5 ] [86])
                    (reg/f:DI 2 cx [orig:84 _3 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:40 191 {*adddi_1}
     (nil))
(insn 70 69 288 9 (set (reg/f:DI 1 dx [orig:99 _38 ] [99])
        (reg/f:DI 0 ax [orig:87 _6 ] [87])) "queryTAD.c":115:43 66 {*movdi_internal}
     (nil))
(insn 288 70 72 9 (set (reg:DI 2 cx [orig:120 _72 ] [120])
        (reg:DI 1 dx [orig:119 _71 ] [119])) "queryTAD.c":115:43 66 {*movdi_internal}
     (nil))
(insn 72 288 73 9 (parallel [
            (set (reg:DI 2 cx [orig:120 _72 ] [120])
                (lshiftrt:DI (reg:DI 2 cx [orig:120 _72 ] [120])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:43 566 {*lshrdi3_1}
     (nil))
(insn 73 72 75 9 (parallel [
            (set (reg:DI 2 cx [orig:121 _73 ] [121])
                (plus:DI (reg:DI 2 cx [orig:120 _72 ] [120])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:43 191 {*adddi_1}
     (nil))
(insn 75 73 76 9 (set (reg:QI 2 cx [orig:123 _75 ] [123])
        (mem:QI (reg/f:DI 2 cx [orig:122 _74 ] [122]) [10 *_74+0 S1 A8])) "queryTAD.c":115:43 69 {*movqi_internal}
     (nil))
(insn 76 75 77 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:123 _75 ] [123])
            (const_int 0 [0]))) "queryTAD.c":115:43 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 77 76 78 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) "queryTAD.c":115:43 659 {*jcc}
     (nil)
 -> 82)
;;  succ:       11 [100.0% (guessed)] 
;;              10 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 87 119

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 [0.0% (guessed)]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 78 77 79 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 10 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:119 _71 ] [119])) "queryTAD.c":115:43 66 {*movdi_internal}
     (nil))
(call_insn 80 79 81 10 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":115:43 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 81 80 82)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       9 [100.0% (guessed)] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 87
;; lr  def 	 17 [flags] 88 100 124 125 126 127 128 177
(code_label 82 81 83 11 79 (nil) [1 uses])
(note 83 82 84 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 11 (set (reg:DI 1 dx [orig:88 _7 ] [88])
        (mem:DI (reg/f:DI 0 ax [orig:87 _6 ] [87]) [2 _6->total+0 S8 A64])) "queryTAD.c":115:43 66 {*movdi_internal}
     (nil))
(insn 85 84 86 11 (set (reg/f:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 aux+0 S8 A64])) "queryTAD.c":115:26 66 {*movdi_internal}
     (nil))
(insn 86 85 290 11 (parallel [
            (set (reg/f:DI 0 ax [orig:100 _39 ] [100])
                (plus:DI (reg/f:DI 0 ax [177])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:26 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [8 aux+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 290 86 88 11 (set (reg:DI 2 cx [orig:125 _77 ] [125])
        (reg:DI 0 ax [orig:124 _76 ] [124])) "queryTAD.c":115:26 66 {*movdi_internal}
     (nil))
(insn 88 290 89 11 (parallel [
            (set (reg:DI 2 cx [orig:125 _77 ] [125])
                (lshiftrt:DI (reg:DI 2 cx [orig:125 _77 ] [125])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:26 566 {*lshrdi3_1}
     (nil))
(insn 89 88 91 11 (parallel [
            (set (reg:DI 2 cx [orig:126 _78 ] [126])
                (plus:DI (reg:DI 2 cx [orig:125 _77 ] [125])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":115:26 191 {*adddi_1}
     (nil))
(insn 91 89 92 11 (set (reg:QI 2 cx [orig:128 _80 ] [128])
        (mem:QI (reg/f:DI 2 cx [orig:127 _79 ] [127]) [10 *_79+0 S1 A8])) "queryTAD.c":115:26 69 {*movqi_internal}
     (nil))
(insn 92 91 93 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:128 _80 ] [128])
            (const_int 0 [0]))) "queryTAD.c":115:26 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 93 92 94 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 98)
            (pc))) "queryTAD.c":115:26 659 {*jcc}
     (nil)
 -> 98)
;;  succ:       13 [100.0% (guessed)] 
;;              12 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88 124

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 [0.0% (guessed)]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 124
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 124
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 94 93 95 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:124 _76 ] [124])) "queryTAD.c":115:26 66 {*movdi_internal}
     (nil))
(call_insn 96 95 97 12 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":115:26 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 97 96 98)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       11 [100.0% (guessed)] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88
;; lr  def 	 17 [flags] 89 90 101 129 130 131 132 133 178 179 180 181
(code_label 98 97 99 13 80 (nil) [1 uses])
(note 99 98 100 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 13 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 aux+0 S8 A64])) "queryTAD.c":115:26 66 {*movdi_internal}
     (nil))
(insn 101 100 102 13 (set (mem:DI (plus:DI (reg/f:DI 0 ax [178])
                (const_int 8 [0x8])) [2 aux_28->pedestrians+0 S8 A64])
        (reg:DI 1 dx [orig:88 _7 ] [88])) "queryTAD.c":115:26 66 {*movdi_internal}
     (nil))
(insn 102 101 103 13 (set (reg:SI 0 ax [179])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [13 i+0 S4 A32])) "queryTAD.c":116:23 67 {*movsi_internal}
     (nil))
(insn 103 102 104 13 (set (reg:DI 2 cx [orig:89 _8 ] [89])
        (sign_extend:DI (reg:SI 0 ax [179]))) "queryTAD.c":116:23 128 {*extendsidi2_rex64}
     (nil))
(insn 104 103 105 13 (set (reg/f:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":116:23 66 {*movdi_internal}
     (nil))
(insn 105 104 106 13 (set (reg/f:DI 1 dx [orig:90 _9 ] [90])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [180])
                (const_int 24 [0x18])) [7 q_22(D)->sensorsID+0 S8 A64])) "queryTAD.c":116:23 66 {*movdi_internal}
     (nil))
(insn 106 105 107 13 (set (reg/f:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":116:23 66 {*movdi_internal}
     (nil))
(insn 107 106 292 13 (parallel [
            (set (reg/f:DI 0 ax [orig:101 _40 ] [101])
                (plus:DI (reg/f:DI 0 ax [181])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":116:23 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 292 107 109 13 (set (reg:DI 4 si [orig:130 _82 ] [130])
        (reg:DI 0 ax [orig:129 _81 ] [129])) "queryTAD.c":116:23 66 {*movdi_internal}
     (nil))
(insn 109 292 110 13 (parallel [
            (set (reg:DI 4 si [orig:130 _82 ] [130])
                (lshiftrt:DI (reg:DI 4 si [orig:130 _82 ] [130])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":116:23 566 {*lshrdi3_1}
     (nil))
(insn 110 109 112 13 (parallel [
            (set (reg:DI 4 si [orig:131 _83 ] [131])
                (plus:DI (reg:DI 4 si [orig:130 _82 ] [130])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":116:23 191 {*adddi_1}
     (nil))
(insn 112 110 113 13 (set (reg:QI 4 si [orig:133 _85 ] [133])
        (mem:QI (reg/f:DI 4 si [orig:132 _84 ] [132]) [10 *_84+0 S1 A8])) "queryTAD.c":116:23 69 {*movqi_internal}
     (nil))
(insn 113 112 114 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 4 si [orig:133 _85 ] [133])
            (const_int 0 [0]))) "queryTAD.c":116:23 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 114 113 115 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 119)
            (pc))) "queryTAD.c":116:23 659 {*jcc}
     (nil)
 -> 119)
;;  succ:       15 [100.0% (guessed)] 
;;              14 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89 90 129

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 [0.0% (guessed)]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 129
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 115 114 116 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:129 _81 ] [129])) "queryTAD.c":116:23 66 {*movdi_internal}
     (nil))
(call_insn 117 116 118 14 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":116:23 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 118 117 119)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       13 [100.0% (guessed)] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89 90
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89 90
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 91 92 102 134 135 136 137 138 182 183 184
(code_label 119 118 120 15 81 (nil) [1 uses])
(note 120 119 121 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 15 (set (reg/f:DI 0 ax [182])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":116:23 66 {*movdi_internal}
     (nil))
(insn 122 121 123 15 (set (reg/f:DI 0 ax [orig:91 _10 ] [91])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [182])
                (const_int 32 [0x20])) [8 q_22(D)->sensorsP+0 S8 A64])) "queryTAD.c":116:23 66 {*movdi_internal}
     (nil))
(insn 123 122 127 15 (set (reg:DI 4 si [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 aux+0 S8 A64])) "queryTAD.c":116:23 66 {*movdi_internal}
     (nil))
(insn 127 123 128 15 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:91 _10 ] [91])) "queryTAD.c":116:23 66 {*movdi_internal}
     (nil))
(call_insn 128 127 130 15 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("makeSenLRec") [flags 0x3]  <function_decl 0x7fc58ebf9e00 makeSenLRec>) [0 makeSenLRec S1 A8])
            (const_int 0 [0]))) "queryTAD.c":116:23 677 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 130 128 131 15 (set (reg/f:DI 1 dx [184])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":116:21 66 {*movdi_internal}
     (nil))
(insn 131 130 294 15 (parallel [
            (set (reg/f:DI 1 dx [orig:102 _41 ] [102])
                (plus:DI (reg/f:DI 1 dx [184])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":116:21 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 294 131 133 15 (set (reg:DI 2 cx [orig:135 _87 ] [135])
        (reg:DI 1 dx [orig:134 _86 ] [134])) "queryTAD.c":116:21 66 {*movdi_internal}
     (nil))
(insn 133 294 134 15 (parallel [
            (set (reg:DI 2 cx [orig:135 _87 ] [135])
                (lshiftrt:DI (reg:DI 2 cx [orig:135 _87 ] [135])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":116:21 566 {*lshrdi3_1}
     (nil))
(insn 134 133 136 15 (parallel [
            (set (reg:DI 2 cx [orig:136 _88 ] [136])
                (plus:DI (reg:DI 2 cx [orig:135 _87 ] [135])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":116:21 191 {*adddi_1}
     (nil))
(insn 136 134 137 15 (set (reg:QI 2 cx [orig:138 _90 ] [138])
        (mem:QI (reg/f:DI 2 cx [orig:137 _89 ] [137]) [10 *_89+0 S1 A8])) "queryTAD.c":116:21 69 {*movqi_internal}
     (nil))
(insn 137 136 138 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:138 _90 ] [138])
            (const_int 0 [0]))) "queryTAD.c":116:21 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 138 137 139 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 143)
            (pc))) "queryTAD.c":116:21 659 {*jcc}
     (nil)
 -> 143)
;;  succ:       17 [100.0% (guessed)] 
;;              16 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 92 134

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 [0.0% (guessed)]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 134
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 134
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 139 138 140 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 141 16 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:134 _86 ] [134])) "queryTAD.c":116:21 66 {*movdi_internal}
     (nil))
(call_insn 141 140 142 16 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7fc58eea5f00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":116:21 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 142 141 143)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       15 [100.0% (guessed)] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 92
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 92
;; lr  def 	 17 [flags] 185
(code_label 143 142 144 17 82 (nil) [1 uses])
(note 144 143 145 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 145 144 146 17 (set (reg/f:DI 1 dx [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":116:21 66 {*movdi_internal}
     (nil))
(insn 146 145 147 17 (set (mem/f:DI (plus:DI (reg/f:DI 1 dx [185])
                (const_int 32 [0x20])) [8 q_22(D)->sensorsP+0 S8 A64])
        (reg/f:DI 0 ax [orig:92 _11 ] [92])) "queryTAD.c":116:21 66 {*movdi_internal}
     (nil))
(insn 147 146 148 17 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [13 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [13 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":108:30 190 {*addsi_1}
     (nil))
;;  succ:       18 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 148 147 149 18 75 (nil) [1 uses])
(note 149 148 153 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 153 149 154 18 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [13 i+0 S4 A32])
            (const_int 85 [0x55]))) "queryTAD.c":108:5 11 {*cmpsi_1}
     (nil))
(jump_insn 154 153 155 18 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 150)
            (pc))) "queryTAD.c":108:5 659 {*jcc}
     (nil)
 -> 150)
;;  succ:       3
;;              19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 103 139 140 141 142 143 186
(note 155 154 156 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 156 155 157 19 (set (reg/f:DI 0 ax [186])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":118:14 66 {*movdi_internal}
     (nil))
(insn 157 156 296 19 (parallel [
            (set (reg/f:DI 0 ax [orig:103 _42 ] [103])
                (plus:DI (reg/f:DI 0 ax [186])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":118:14 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 296 157 159 19 (set (reg:DI 1 dx [orig:140 _92 ] [140])
        (reg:DI 0 ax [orig:139 _91 ] [139])) "queryTAD.c":118:14 66 {*movdi_internal}
     (nil))
(insn 159 296 160 19 (parallel [
            (set (reg:DI 1 dx [orig:140 _92 ] [140])
                (lshiftrt:DI (reg:DI 1 dx [orig:140 _92 ] [140])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":118:14 566 {*lshrdi3_1}
     (nil))
(insn 160 159 162 19 (parallel [
            (set (reg:DI 1 dx [orig:141 _93 ] [141])
                (plus:DI (reg:DI 1 dx [orig:140 _92 ] [140])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":118:14 191 {*adddi_1}
     (nil))
(insn 162 160 163 19 (set (reg:QI 1 dx [orig:143 _95 ] [143])
        (mem:QI (reg/f:DI 1 dx [orig:142 _94 ] [142]) [10 *_94+0 S1 A8])) "queryTAD.c":118:14 69 {*movqi_internal}
     (nil))
(insn 163 162 164 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:143 _95 ] [143])
            (const_int 0 [0]))) "queryTAD.c":118:14 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 164 163 165 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 169)
            (pc))) "queryTAD.c":118:14 659 {*jcc}
     (nil)
 -> 169)
;;  succ:       21 [100.0% (guessed)] 
;;              20 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 [0.0% (guessed)]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 139
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 165 164 166 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 166 165 167 20 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:139 _91 ] [139])) "queryTAD.c":118:14 66 {*movdi_internal}
     (nil))
(call_insn 167 166 168 20 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":118:14 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 168 167 169)
;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       19 [100.0% (guessed)] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 187 188
(code_label 169 168 170 21 84 (nil) [1 uses])
(note 170 169 171 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 171 170 172 21 (set (reg/f:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":118:14 66 {*movdi_internal}
     (nil))
(insn 172 171 173 21 (set (reg/f:DI 0 ax [188])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [187])
                (const_int 32 [0x20])) [8 q_22(D)->sensorsP+0 S8 A64])) "queryTAD.c":118:14 66 {*movdi_internal}
     (nil))
(insn 173 172 277 21 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])
        (reg/f:DI 0 ax [188])) "queryTAD.c":118:14 66 {*movdi_internal}
     (nil))
(jump_insn 277 173 278 21 (set (pc)
        (label_ref 267)) "queryTAD.c":119:10 660 {jump}
     (nil)
 -> 267)
;;  succ:       33 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 278 277 269)
;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       33
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 104 144 145 146 147 148 189
(code_label 269 278 176 22 91 (nil) [1 uses])
(note 176 269 177 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 177 176 178 22 (set (reg/f:DI 0 ax [189])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":120:29 66 {*movdi_internal}
     (nil))
(insn 178 177 298 22 (parallel [
            (set (reg/f:DI 0 ax [orig:104 _43 ] [104])
                (plus:DI (reg/f:DI 0 ax [189])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":120:29 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 298 178 180 22 (set (reg:DI 1 dx [orig:145 _97 ] [145])
        (reg:DI 0 ax [orig:144 _96 ] [144])) "queryTAD.c":120:29 66 {*movdi_internal}
     (nil))
(insn 180 298 181 22 (parallel [
            (set (reg:DI 1 dx [orig:145 _97 ] [145])
                (lshiftrt:DI (reg:DI 1 dx [orig:145 _97 ] [145])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":120:29 566 {*lshrdi3_1}
     (nil))
(insn 181 180 183 22 (parallel [
            (set (reg:DI 1 dx [orig:146 _98 ] [146])
                (plus:DI (reg:DI 1 dx [orig:145 _97 ] [145])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":120:29 191 {*adddi_1}
     (nil))
(insn 183 181 184 22 (set (reg:QI 1 dx [orig:148 _100 ] [148])
        (mem:QI (reg/f:DI 1 dx [orig:147 _99 ] [147]) [10 *_99+0 S1 A8])) "queryTAD.c":120:29 69 {*movqi_internal}
     (nil))
(insn 184 183 185 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:148 _100 ] [148])
            (const_int 0 [0]))) "queryTAD.c":120:29 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 185 184 186 22 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 190)
            (pc))) "queryTAD.c":120:29 659 {*jcc}
     (nil)
 -> 190)
;;  succ:       24 [100.0% (guessed)] 
;;              23 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 144

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 [0.0% (guessed)]  (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 144
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 144
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 186 185 187 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 187 186 188 23 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:144 _96 ] [144])) "queryTAD.c":120:29 66 {*movdi_internal}
     (nil))
(call_insn 188 187 189 23 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":120:29 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 189 188 190)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       22 [100.0% (guessed)] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 93 105 149 150 151 152 153 190
(code_label 190 189 191 24 86 (nil) [1 uses])
(note 191 190 192 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 24 (set (reg/f:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":120:29 66 {*movdi_internal}
     (nil))
(insn 193 192 194 24 (set (reg/f:DI 0 ax [orig:93 _12 ] [93])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [190])
                (const_int 32 [0x20])) [8 q_22(D)->sensorsP+0 S8 A64])) "queryTAD.c":120:29 66 {*movdi_internal}
     (nil))
(insn 194 193 300 24 (set (reg/f:DI 1 dx [orig:105 _44 ] [105])
        (reg/f:DI 0 ax [orig:93 _12 ] [93])) "queryTAD.c":120:9 66 {*movdi_internal}
     (nil))
(insn 300 194 196 24 (set (reg:DI 2 cx [orig:150 _102 ] [150])
        (reg:DI 1 dx [orig:149 _101 ] [149])) "queryTAD.c":120:9 66 {*movdi_internal}
     (nil))
(insn 196 300 197 24 (parallel [
            (set (reg:DI 2 cx [orig:150 _102 ] [150])
                (lshiftrt:DI (reg:DI 2 cx [orig:150 _102 ] [150])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":120:9 566 {*lshrdi3_1}
     (nil))
(insn 197 196 199 24 (parallel [
            (set (reg:DI 2 cx [orig:151 _103 ] [151])
                (plus:DI (reg:DI 2 cx [orig:150 _102 ] [150])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":120:9 191 {*adddi_1}
     (nil))
(insn 199 197 200 24 (set (reg:QI 2 cx [orig:153 _105 ] [153])
        (mem:QI (reg/f:DI 2 cx [orig:152 _104 ] [152]) [10 *_104+0 S1 A8])) "queryTAD.c":120:9 69 {*movqi_internal}
     (nil))
(insn 200 199 201 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:153 _105 ] [153])
            (const_int 0 [0]))) "queryTAD.c":120:9 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 201 200 202 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) "queryTAD.c":120:9 659 {*jcc}
     (nil)
 -> 206)
;;  succ:       26 [100.0% (guessed)] 
;;              25 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 93 149

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 [0.0% (guessed)]  (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 149
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 149
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 202 201 203 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 203 202 204 25 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:149 _101 ] [149])) "queryTAD.c":120:9 66 {*movdi_internal}
     (nil))
(call_insn 204 203 205 25 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":120:9 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 205 204 206)
;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       24 [100.0% (guessed)] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 93
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 94 106 154 155 156 157 158 191
(code_label 206 205 207 26 87 (nil) [1 uses])
(note 207 206 208 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 208 207 209 26 (set (reg:DI 0 ax [orig:94 _13 ] [94])
        (mem:DI (reg/f:DI 0 ax [orig:93 _12 ] [93]) [2 _12->ID+0 S8 A64])) "queryTAD.c":120:9 66 {*movdi_internal}
     (nil))
(insn 209 208 210 26 (set (reg:DI 4 si)
        (reg:DI 0 ax [orig:94 _13 ] [94])) "queryTAD.c":120:9 66 {*movdi_internal}
     (nil))
(insn 210 209 211 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7fc58ecb7f30 *.LC14>)) "queryTAD.c":120:9 66 {*movdi_internal}
     (nil))
(insn 211 210 212 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "queryTAD.c":120:9 69 {*movqi_internal}
     (nil))
(call_insn 212 211 213 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fc58ee67000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "queryTAD.c":120:9 677 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 213 212 214 26 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":121:31 66 {*movdi_internal}
     (nil))
(insn 214 213 302 26 (parallel [
            (set (reg/f:DI 0 ax [orig:106 _45 ] [106])
                (plus:DI (reg/f:DI 0 ax [191])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":121:31 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 302 214 216 26 (set (reg:DI 1 dx [orig:155 _107 ] [155])
        (reg:DI 0 ax [orig:154 _106 ] [154])) "queryTAD.c":121:31 66 {*movdi_internal}
     (nil))
(insn 216 302 217 26 (parallel [
            (set (reg:DI 1 dx [orig:155 _107 ] [155])
                (lshiftrt:DI (reg:DI 1 dx [orig:155 _107 ] [155])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":121:31 566 {*lshrdi3_1}
     (nil))
(insn 217 216 219 26 (parallel [
            (set (reg:DI 1 dx [orig:156 _108 ] [156])
                (plus:DI (reg:DI 1 dx [orig:155 _107 ] [155])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":121:31 191 {*adddi_1}
     (nil))
(insn 219 217 220 26 (set (reg:QI 1 dx [orig:158 _110 ] [158])
        (mem:QI (reg/f:DI 1 dx [orig:157 _109 ] [157]) [10 *_109+0 S1 A8])) "queryTAD.c":121:31 69 {*movqi_internal}
     (nil))
(insn 220 219 221 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:158 _110 ] [158])
            (const_int 0 [0]))) "queryTAD.c":121:31 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 221 220 222 26 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 226)
            (pc))) "queryTAD.c":121:31 659 {*jcc}
     (nil)
 -> 226)
;;  succ:       28 [100.0% (guessed)] 
;;              27 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 154

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       26 [0.0% (guessed)]  (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 154
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 154
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 222 221 223 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 223 222 224 27 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:154 _106 ] [154])) "queryTAD.c":121:31 66 {*movdi_internal}
     (nil))
(call_insn 224 223 225 27 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":121:31 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 225 224 226)
;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       26 [100.0% (guessed)] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 95 107 159 160 161 162 163 192
(code_label 226 225 227 28 88 (nil) [1 uses])
(note 227 226 228 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 228 227 229 28 (set (reg/f:DI 0 ax [192])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [11 q+0 S8 A64])) "queryTAD.c":121:31 66 {*movdi_internal}
     (nil))
(insn 229 228 230 28 (set (reg/f:DI 0 ax [orig:95 _14 ] [95])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [192])
                (const_int 32 [0x20])) [8 q_22(D)->sensorsP+0 S8 A64])) "queryTAD.c":121:31 66 {*movdi_internal}
     (nil))
(insn 230 229 304 28 (parallel [
            (set (reg/f:DI 1 dx [orig:107 _46 ] [107])
                (plus:DI (reg/f:DI 0 ax [orig:95 _14 ] [95])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":121:9 191 {*adddi_1}
     (nil))
(insn 304 230 232 28 (set (reg:DI 2 cx [orig:160 _112 ] [160])
        (reg:DI 1 dx [orig:159 _111 ] [159])) "queryTAD.c":121:9 66 {*movdi_internal}
     (nil))
(insn 232 304 233 28 (parallel [
            (set (reg:DI 2 cx [orig:160 _112 ] [160])
                (lshiftrt:DI (reg:DI 2 cx [orig:160 _112 ] [160])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":121:9 566 {*lshrdi3_1}
     (nil))
(insn 233 232 235 28 (parallel [
            (set (reg:DI 2 cx [orig:161 _113 ] [161])
                (plus:DI (reg:DI 2 cx [orig:160 _112 ] [160])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":121:9 191 {*adddi_1}
     (nil))
(insn 235 233 236 28 (set (reg:QI 2 cx [orig:163 _115 ] [163])
        (mem:QI (reg/f:DI 2 cx [orig:162 _114 ] [162]) [10 *_114+0 S1 A8])) "queryTAD.c":121:9 69 {*movqi_internal}
     (nil))
(insn 236 235 237 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:163 _115 ] [163])
            (const_int 0 [0]))) "queryTAD.c":121:9 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 237 236 238 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 242)
            (pc))) "queryTAD.c":121:9 659 {*jcc}
     (nil)
 -> 242)
;;  succ:       30 [100.0% (guessed)] 
;;              29 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 95 159

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       28 [0.0% (guessed)]  (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 159
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 159
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 238 237 239 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 239 238 240 29 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:159 _111 ] [159])) "queryTAD.c":121:9 66 {*movdi_internal}
     (nil))
(call_insn 240 239 241 29 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":121:9 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 241 240 242)
;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       28 [100.0% (guessed)] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 95
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 95
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 96 108 164 165 166 167 168 193
(code_label 242 241 243 30 89 (nil) [1 uses])
(note 243 242 244 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 244 243 245 30 (set (reg:DI 0 ax [orig:96 _15 ] [96])
        (mem:DI (plus:DI (reg/f:DI 0 ax [orig:95 _14 ] [95])
                (const_int 8 [0x8])) [2 _14->pedestrians+0 S8 A64])) "queryTAD.c":121:9 66 {*movdi_internal}
     (nil))
(insn 245 244 246 30 (set (reg:DI 4 si)
        (reg:DI 0 ax [orig:96 _15 ] [96])) "queryTAD.c":121:9 66 {*movdi_internal}
     (nil))
(insn 246 245 247 30 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7fc58ecc7000 *.LC15>)) "queryTAD.c":121:9 66 {*movdi_internal}
     (nil))
(insn 247 246 248 30 (set (reg:QI 0 ax)
        (const_int 0 [0])) "queryTAD.c":121:9 69 {*movqi_internal}
     (nil))
(call_insn 248 247 249 30 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fc58ee67000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "queryTAD.c":121:9 677 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 249 248 250 30 (set (reg/f:DI 0 ax [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])) "queryTAD.c":122:13 66 {*movdi_internal}
     (nil))
(insn 250 249 306 30 (parallel [
            (set (reg/f:DI 0 ax [orig:108 _47 ] [108])
                (plus:DI (reg/f:DI 0 ax [193])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":122:13 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 306 250 252 30 (set (reg:DI 1 dx [orig:165 _117 ] [165])
        (reg:DI 0 ax [orig:164 _116 ] [164])) "queryTAD.c":122:13 66 {*movdi_internal}
     (nil))
(insn 252 306 253 30 (parallel [
            (set (reg:DI 1 dx [orig:165 _117 ] [165])
                (lshiftrt:DI (reg:DI 1 dx [orig:165 _117 ] [165])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":122:13 566 {*lshrdi3_1}
     (nil))
(insn 253 252 255 30 (parallel [
            (set (reg:DI 1 dx [orig:166 _118 ] [166])
                (plus:DI (reg:DI 1 dx [orig:165 _117 ] [165])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":122:13 191 {*adddi_1}
     (nil))
(insn 255 253 256 30 (set (reg:QI 1 dx [orig:168 _120 ] [168])
        (mem:QI (reg/f:DI 1 dx [orig:167 _119 ] [167]) [10 *_119+0 S1 A8])) "queryTAD.c":122:13 69 {*movqi_internal}
     (nil))
(insn 256 255 257 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:168 _120 ] [168])
            (const_int 0 [0]))) "queryTAD.c":122:13 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 257 256 258 30 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 262)
            (pc))) "queryTAD.c":122:13 659 {*jcc}
     (nil)
 -> 262)
;;  succ:       32 [100.0% (guessed)] 
;;              31 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       30 [0.0% (guessed)]  (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 258 257 259 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 259 258 260 31 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:164 _116 ] [164])) "queryTAD.c":122:13 66 {*movdi_internal}
     (nil))
(call_insn 260 259 261 31 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":122:13 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 261 260 262)
;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       30 [100.0% (guessed)] 
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 194 195
(code_label 262 261 263 32 90 (nil) [1 uses])
(note 263 262 264 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 264 263 265 32 (set (reg/f:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])) "queryTAD.c":122:13 66 {*movdi_internal}
     (nil))
(insn 265 264 266 32 (set (reg/f:DI 0 ax [195])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [194])
                (const_int 16 [0x10])) [8 aux_17->tail+0 S8 A64])) "queryTAD.c":122:13 66 {*movdi_internal}
     (nil))
(insn 266 265 267 32 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])
        (reg/f:DI 0 ax [195])) "queryTAD.c":122:13 66 {*movdi_internal}
     (nil))
;;  succ:       33 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 35, flags: (RTL, MODIFIED)
;;  pred:       32 (FALLTHRU,DFS_BACK)
;;              21 [always] 
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 267 266 268 33 85 (nil) [1 uses])
(note 268 267 270 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 270 268 271 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [8 aux+0 S8 A64])
            (const_int 0 [0]))) "queryTAD.c":119:10 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 271 270 279 33 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 269)
            (pc))) "queryTAD.c":119:10 659 {*jcc}
     (nil)
 -> 269)
;;  succ:       22
;;              35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 35, loop depth 0, maybe hot
;;  prev block 33, next block 34, flags: (RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 279 271 280 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 280 279 272 35 (const_int 0 [0]) "queryTAD.c":124:1 696 {nop}
     (nil))
;;  succ:       34 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 34, loop depth 0, maybe hot
;;  prev block 35, next block 36, flags: (RTL, MODIFIED)
;;  pred:       35 [always]  (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 272 280 281 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
;;  succ:       36 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 36, loop depth 0, maybe hot
;;  prev block 34, next block 1, flags: (RTL, MODIFIED)
;;  pred:       34 [always]  (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 281 272 282 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 282 281 283 36 (const_int 0 [0]) "queryTAD.c":124:1 696 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 283 282 0 NOTE_INSN_DELETED)

;; Function freeRecYears (freeRecYears, funcdef_no=9, decl_uid=3462, cgraph_uid=10, symbol_order=9)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 16:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=92 from oldreg=85, assigning class GENERAL_REGS to r92
   16: {r92:DI=r92:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
   45: r92:DI=r84:DI
    Inserting insn reload after:
   46: r85:DI=r92:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 19:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
EBB 7
EBB 6

********** Pseudo live ranges #1: **********

  BB 4
   Insn 24: point = 0, n_alt = 0
   Insn 23: point = 0, n_alt = -2
  BB 6
  BB 5
   Insn 39: point = 2, n_alt = -1
   Insn 34: point = 2, n_alt = 0
   Insn 33: point = 2, n_alt = -2
   Insn 32: point = 3, n_alt = 3
   Insn 31: point = 4, n_alt = 0
   Insn 30: point = 4, n_alt = -2
   Insn 29: point = 5, n_alt = 3
   Insn 28: point = 7, n_alt = 3
  BB 3
   Insn 21: point = 8, n_alt = -1
   Insn 20: point = 8, n_alt = 0
   Insn 19: point = 9, n_alt = 4
   Insn 18: point = 11, n_alt = -2
   Insn 17: point = 13, n_alt = 0
   Insn 46: point = 15, n_alt = -2
	Hard reg 1 is preferable by r92 with profit 1000
   Insn 16: point = 17, n_alt = 0
   Insn 45: point = 18, n_alt = -2
	Hard reg 1 is preferable by r92 with profit 1000
	Hard reg 0 is preferable by r92 with profit 1000
   Insn 15: point = 19, n_alt = -2
   Insn 14: point = 21, n_alt = 0
   Insn 13: point = 23, n_alt = 3
  BB 7
   Insn 43: point = 24, n_alt = -1
  BB 2
   Insn 7: point = 24, n_alt = -1
   Insn 6: point = 24, n_alt = 1
   Insn 2: point = 24, n_alt = 5
 r82: [4..5]
 r83: [20..21]
 r84: [8..19] [0..1]
 r85: [14..15]
 r86: [12..13]
 r87: [10..11]
 r88: [8..9]
 r89: [22..23]
 r90: [6..7]
 r91: [2..3]
 r92: [16..18]
Compressing live ranges: from 24 to 22 - 91%
Ranges after the compression:
 r82: [4..5]
 r83: [18..19]
 r84: [8..17] [0..1]
 r85: [14..15]
 r86: [12..13]
 r87: [10..11]
 r88: [8..9]
 r89: [20..21]
 r90: [6..7]
 r91: [2..3]
 r92: [16..17]

********** Assignment #1: **********

	 Assigning to 92 (cl=GENERAL_REGS, orig=85, freq=3000, tfirst=92, tfreq=3000)...
	   Assign 1 to reload r92 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 29
changing reg in insn 30
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 23
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 13
changing reg in insn 14
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
deleting insn with uid = 15.
deleting insn with uid = 46.
deleting insn with uid = 18.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 34.


freeRecYears

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={9d,6u} r1={8d,4u} r2={4d} r4={4d} r5={7d,4u} r6={1d,12u} r7={1d,10u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={8d,2u} r18={3d} r19={1d,1u,1e} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={4d} r37={4d} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} 
;;    total ref usage 276{236d,39u,1e} in 22{19 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])
        (reg:DI 5 di [ years ])) "queryTAD.c":126:40 66 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])
            (const_int 0 [0]))) "queryTAD.c":127:7 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 42)
            (pc))) "queryTAD.c":127:7 659 {*jcc}
     (nil)
 -> 42)
;;  succ:       7
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 83 84 85 86 87 88 89
(note 12 7 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "queryTAD.c":130:23 66 {*movdi_internal}
     (nil))
(insn 14 13 45 3 (parallel [
            (set (reg/f:DI 0 ax [orig:83 _7 ] [83])
                (plus:DI (reg/f:DI 0 ax [89])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":130:23 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 45 14 16 3 (set (reg:DI 1 dx [orig:85 _10 ] [85])
        (reg:DI 0 ax [orig:84 _9 ] [84])) "queryTAD.c":130:23 66 {*movdi_internal}
     (nil))
(insn 16 45 17 3 (parallel [
            (set (reg:DI 1 dx [orig:85 _10 ] [85])
                (lshiftrt:DI (reg:DI 1 dx [orig:85 _10 ] [85])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":130:23 566 {*lshrdi3_1}
     (nil))
(insn 17 16 19 3 (parallel [
            (set (reg:DI 1 dx [orig:86 _11 ] [86])
                (plus:DI (reg:DI 1 dx [orig:85 _10 ] [85])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":130:23 191 {*adddi_1}
     (nil))
(insn 19 17 20 3 (set (reg:QI 1 dx [orig:88 _13 ] [88])
        (mem:QI (reg/f:DI 1 dx [orig:87 _12 ] [87]) [10 *_12+0 S1 A8])) "queryTAD.c":130:23 69 {*movqi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:88 _13 ] [88])
            (const_int 0 [0]))) "queryTAD.c":130:23 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 21 20 22 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) "queryTAD.c":130:23 659 {*jcc}
     (nil)
 -> 26)
;;  succ:       5 [100.0% (guessed)] 
;;              4 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 [0.0% (guessed)]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:84 _9 ] [84])) "queryTAD.c":130:23 66 {*movdi_internal}
     (nil))
(call_insn 24 23 25 4 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":130:23 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 25 24 26)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 7, flags: (RTL, MODIFIED)
;;  pred:       3 [100.0% (guessed)] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 82 90 91
(code_label 26 25 27 5 95 (nil) [1 uses])
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "queryTAD.c":130:23 66 {*movdi_internal}
     (nil))
(insn 29 28 30 5 (set (reg/f:DI 0 ax [orig:82 _1 ] [82])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [90])
                (const_int 32 [0x20])) [6 years_3(D)->tail+0 S8 A64])) "queryTAD.c":130:23 66 {*movdi_internal}
     (nil))
(insn 30 29 31 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:82 _1 ] [82])) "queryTAD.c":130:5 66 {*movdi_internal}
     (nil))
(call_insn 31 30 32 5 (call (mem:QI (symbol_ref:DI ("freeRecYears") [flags 0x3]  <function_decl 0x7fc58ec06200 freeRecYears>) [0 freeRecYears S1 A8])
        (const_int 0 [0])) "queryTAD.c":130:5 666 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 32 31 33 5 (set (reg:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "queryTAD.c":131:5 66 {*movdi_internal}
     (nil))
(insn 33 32 34 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) "queryTAD.c":131:5 66 {*movdi_internal}
     (nil))
(call_insn 34 33 39 5 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fc58ee7d600 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "queryTAD.c":131:5 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 39 34 40 5 (set (pc)
        (label_ref 37)) 660 {jump}
     (nil)
 -> 37)
;;  succ:       6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 40 39 42)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 5, next block 6, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 42 40 41 7 96 (nil) [1 uses])
(note 41 42 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 43 41 37 7 (const_int 0 [0]) "queryTAD.c":128:9 696 {nop}
     (nil))
;;  succ:       6 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 [always]  (FALLTHRU)
;;              5
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 37 43 38 6 92 (nil) [1 uses])
(note 38 37 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 44 38 0 NOTE_INSN_DELETED)

;; Function freeRecSen (freeRecSen, funcdef_no=10, decl_uid=3465, cgraph_uid=11, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 16:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=92 from oldreg=85, assigning class GENERAL_REGS to r92
   16: {r92:DI=r92:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
   45: r92:DI=r84:DI
    Inserting insn reload after:
   46: r85:DI=r92:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 19:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
EBB 7
EBB 6

********** Pseudo live ranges #1: **********

  BB 4
   Insn 24: point = 0, n_alt = 0
   Insn 23: point = 0, n_alt = -2
  BB 6
  BB 5
   Insn 39: point = 2, n_alt = -1
   Insn 34: point = 2, n_alt = 0
   Insn 33: point = 2, n_alt = -2
   Insn 32: point = 3, n_alt = 3
   Insn 31: point = 4, n_alt = 0
   Insn 30: point = 4, n_alt = -2
   Insn 29: point = 5, n_alt = 3
   Insn 28: point = 7, n_alt = 3
  BB 3
   Insn 21: point = 8, n_alt = -1
   Insn 20: point = 8, n_alt = 0
   Insn 19: point = 9, n_alt = 4
   Insn 18: point = 11, n_alt = -2
   Insn 17: point = 13, n_alt = 0
   Insn 46: point = 15, n_alt = -2
	Hard reg 1 is preferable by r92 with profit 1000
   Insn 16: point = 17, n_alt = 0
   Insn 45: point = 18, n_alt = -2
	Hard reg 1 is preferable by r92 with profit 1000
	Hard reg 0 is preferable by r92 with profit 1000
   Insn 15: point = 19, n_alt = -2
   Insn 14: point = 21, n_alt = 0
   Insn 13: point = 23, n_alt = 3
  BB 7
   Insn 43: point = 24, n_alt = -1
  BB 2
   Insn 7: point = 24, n_alt = -1
   Insn 6: point = 24, n_alt = 1
   Insn 2: point = 24, n_alt = 5
 r82: [4..5]
 r83: [20..21]
 r84: [8..19] [0..1]
 r85: [14..15]
 r86: [12..13]
 r87: [10..11]
 r88: [8..9]
 r89: [22..23]
 r90: [6..7]
 r91: [2..3]
 r92: [16..18]
Compressing live ranges: from 24 to 22 - 91%
Ranges after the compression:
 r82: [4..5]
 r83: [18..19]
 r84: [8..17] [0..1]
 r85: [14..15]
 r86: [12..13]
 r87: [10..11]
 r88: [8..9]
 r89: [20..21]
 r90: [6..7]
 r91: [2..3]
 r92: [16..17]

********** Assignment #1: **********

	 Assigning to 92 (cl=GENERAL_REGS, orig=85, freq=3000, tfirst=92, tfreq=3000)...
	   Assign 1 to reload r92 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 29
changing reg in insn 30
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 23
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 13
changing reg in insn 14
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
deleting insn with uid = 15.
deleting insn with uid = 46.
deleting insn with uid = 18.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 34.


freeRecSen

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={9d,6u} r1={8d,4u} r2={4d} r4={4d} r5={7d,4u} r6={1d,12u} r7={1d,10u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={8d,2u} r18={3d} r19={1d,1u,1e} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={4d} r37={4d} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} 
;;    total ref usage 276{236d,39u,1e} in 22{19 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])
        (reg:DI 5 di [ l ])) "queryTAD.c":133:35 66 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])
            (const_int 0 [0]))) "queryTAD.c":134:7 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 42)
            (pc))) "queryTAD.c":134:7 659 {*jcc}
     (nil)
 -> 42)
;;  succ:       7
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 83 84 85 86 87 88 89
(note 12 7 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":137:17 66 {*movdi_internal}
     (nil))
(insn 14 13 45 3 (parallel [
            (set (reg/f:DI 0 ax [orig:83 _7 ] [83])
                (plus:DI (reg/f:DI 0 ax [89])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":137:17 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 45 14 16 3 (set (reg:DI 1 dx [orig:85 _10 ] [85])
        (reg:DI 0 ax [orig:84 _9 ] [84])) "queryTAD.c":137:17 66 {*movdi_internal}
     (nil))
(insn 16 45 17 3 (parallel [
            (set (reg:DI 1 dx [orig:85 _10 ] [85])
                (lshiftrt:DI (reg:DI 1 dx [orig:85 _10 ] [85])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":137:17 566 {*lshrdi3_1}
     (nil))
(insn 17 16 19 3 (parallel [
            (set (reg:DI 1 dx [orig:86 _11 ] [86])
                (plus:DI (reg:DI 1 dx [orig:85 _10 ] [85])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":137:17 191 {*adddi_1}
     (nil))
(insn 19 17 20 3 (set (reg:QI 1 dx [orig:88 _13 ] [88])
        (mem:QI (reg/f:DI 1 dx [orig:87 _12 ] [87]) [10 *_12+0 S1 A8])) "queryTAD.c":137:17 69 {*movqi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:88 _13 ] [88])
            (const_int 0 [0]))) "queryTAD.c":137:17 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 21 20 22 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) "queryTAD.c":137:17 659 {*jcc}
     (nil)
 -> 26)
;;  succ:       5 [100.0% (guessed)] 
;;              4 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 [0.0% (guessed)]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:84 _9 ] [84])) "queryTAD.c":137:17 66 {*movdi_internal}
     (nil))
(call_insn 24 23 25 4 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":137:17 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 25 24 26)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 7, flags: (RTL, MODIFIED)
;;  pred:       3 [100.0% (guessed)] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 82 90 91
(code_label 26 25 27 5 100 (nil) [1 uses])
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":137:17 66 {*movdi_internal}
     (nil))
(insn 29 28 30 5 (set (reg/f:DI 0 ax [orig:82 _1 ] [82])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [90])
                (const_int 16 [0x10])) [8 l_3(D)->tail+0 S8 A64])) "queryTAD.c":137:17 66 {*movdi_internal}
     (nil))
(insn 30 29 31 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:82 _1 ] [82])) "queryTAD.c":137:5 66 {*movdi_internal}
     (nil))
(call_insn 31 30 32 5 (call (mem:QI (symbol_ref:DI ("freeRecSen") [flags 0x3]  <function_decl 0x7fc58ec06600 freeRecSen>) [0 freeRecSen S1 A8])
        (const_int 0 [0])) "queryTAD.c":137:5 666 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 32 31 33 5 (set (reg:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 l+0 S8 A64])) "queryTAD.c":138:5 66 {*movdi_internal}
     (nil))
(insn 33 32 34 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) "queryTAD.c":138:5 66 {*movdi_internal}
     (nil))
(call_insn 34 33 39 5 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fc58ee7d600 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "queryTAD.c":138:5 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 39 34 40 5 (set (pc)
        (label_ref 37)) 660 {jump}
     (nil)
 -> 37)
;;  succ:       6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 40 39 42)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 5, next block 6, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 42 40 41 7 101 (nil) [1 uses])
(note 41 42 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 43 41 37 7 (const_int 0 [0]) "queryTAD.c":135:9 696 {nop}
     (nil))
;;  succ:       6 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 [always]  (FALLTHRU)
;;              5
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 37 43 38 6 97 (nil) [1 uses])
(note 38 37 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 44 38 0 NOTE_INSN_DELETED)

;; Function freeQuery (freeQuery, funcdef_no=11, decl_uid=3384, cgraph_uid=12, symbol_order=11)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=132 from oldreg=96, assigning class GENERAL_REGS to r132
   13: {r132:DI=r132:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  129: r132:DI=r95:DI
    Inserting insn reload after:
  130: r96:DI=r132:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 35
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 36:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 38:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=133 from oldreg=101, assigning class GENERAL_REGS to r133
   38: {r133:DI=r133:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  131: r133:DI=r100:DI
    Inserting insn reload after:
  132: r101:DI=r133:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 41:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 53:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 65:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=134 from oldreg=106, assigning class GENERAL_REGS to r134
   65: {r134:DI=r134:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  133: r134:DI=r105:DI
    Inserting insn reload after:
  134: r106:DI=r134:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 66:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 68:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 82:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 84:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=135 from oldreg=111, assigning class GENERAL_REGS to r135
   84: {r135:DI=r135:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  135: r135:DI=r110:DI
    Inserting insn reload after:
  136: r111:DI=r135:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 87:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 103:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=136 from oldreg=116, assigning class GENERAL_REGS to r136
  103: {r136:DI=r136:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  137: r136:DI=r115:DI
    Inserting insn reload after:
  138: r116:DI=r136:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 104:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 106:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15 16

********** Pseudo live ranges #1: **********

  BB 4
   Insn 21: point = 0, n_alt = 0
   Insn 20: point = 0, n_alt = -2
  BB 6
   Insn 46: point = 2, n_alt = 0
   Insn 45: point = 2, n_alt = -2
  BB 10
   Insn 73: point = 4, n_alt = 0
   Insn 72: point = 4, n_alt = -2
  BB 12
   Insn 92: point = 6, n_alt = 0
   Insn 91: point = 6, n_alt = -2
  BB 14
   Insn 111: point = 8, n_alt = 0
   Insn 110: point = 8, n_alt = -2
  BB 16
   Insn 127: point = 10, n_alt = -1
  BB 15
   Insn 121: point = 10, n_alt = 0
   Insn 120: point = 10, n_alt = -2
   Insn 119: point = 11, n_alt = 3
   Insn 118: point = 12, n_alt = 0
   Insn 117: point = 12, n_alt = -2
   Insn 116: point = 13, n_alt = 3
   Insn 115: point = 15, n_alt = 3
  BB 13
   Insn 108: point = 16, n_alt = -1
   Insn 107: point = 16, n_alt = 0
   Insn 106: point = 17, n_alt = 4
   Insn 105: point = 19, n_alt = -2
   Insn 104: point = 21, n_alt = 0
   Insn 138: point = 23, n_alt = -2
	Hard reg 1 is preferable by r136 with profit 1000
   Insn 103: point = 25, n_alt = 0
   Insn 137: point = 26, n_alt = -2
	Hard reg 1 is preferable by r136 with profit 1000
	Hard reg 0 is preferable by r136 with profit 1000
   Insn 102: point = 27, n_alt = -2
   Insn 101: point = 29, n_alt = 0
   Insn 100: point = 31, n_alt = 3
   Insn 99: point = 32, n_alt = 0
   Insn 98: point = 32, n_alt = -2
   Insn 97: point = 33, n_alt = 3
   Insn 96: point = 35, n_alt = 3
  BB 11
   Insn 89: point = 36, n_alt = -1
   Insn 88: point = 36, n_alt = 0
   Insn 87: point = 37, n_alt = 4
   Insn 86: point = 39, n_alt = -2
   Insn 85: point = 41, n_alt = 0
   Insn 136: point = 43, n_alt = -2
	Hard reg 1 is preferable by r135 with profit 1000
   Insn 84: point = 45, n_alt = 0
   Insn 135: point = 46, n_alt = -2
	Hard reg 1 is preferable by r135 with profit 1000
	Hard reg 0 is preferable by r135 with profit 1000
   Insn 83: point = 47, n_alt = -2
   Insn 82: point = 49, n_alt = 0
   Insn 81: point = 51, n_alt = 3
   Insn 80: point = 52, n_alt = 0
   Insn 79: point = 52, n_alt = -2
   Insn 78: point = 53, n_alt = 3
   Insn 77: point = 55, n_alt = 3
  BB 9
   Insn 70: point = 56, n_alt = -1
   Insn 69: point = 56, n_alt = 0
   Insn 68: point = 57, n_alt = 4
   Insn 67: point = 59, n_alt = -2
   Insn 66: point = 61, n_alt = 0
   Insn 134: point = 63, n_alt = -2
	Hard reg 1 is preferable by r134 with profit 1000
   Insn 65: point = 65, n_alt = 0
   Insn 133: point = 66, n_alt = -2
	Hard reg 1 is preferable by r134 with profit 1000
	Hard reg 0 is preferable by r134 with profit 1000
   Insn 64: point = 67, n_alt = -2
   Insn 63: point = 69, n_alt = 0
   Insn 62: point = 71, n_alt = 3
  BB 8
   Insn 60: point = 72, n_alt = -1
   Insn 59: point = 72, n_alt = 0
  BB 2
   Insn 124: point = 72, n_alt = -1
   Insn 6: point = 72, n_alt = 1
   Insn 2: point = 72, n_alt = 5
  BB 7
   Insn 53: point = 72, n_alt = 1
   Insn 52: point = 72, n_alt = 0
   Insn 51: point = 72, n_alt = -2
   Insn 50: point = 73, n_alt = 3
  BB 5
   Insn 43: point = 76, n_alt = -1
   Insn 42: point = 76, n_alt = 0
   Insn 41: point = 77, n_alt = 4
   Insn 40: point = 79, n_alt = -2
   Insn 39: point = 81, n_alt = 0
   Insn 132: point = 83, n_alt = -2
	Hard reg 2 is preferable by r133 with profit 1000
   Insn 38: point = 85, n_alt = 0
   Insn 131: point = 86, n_alt = -2
	Hard reg 2 is preferable by r133 with profit 1000
	Hard reg 1 is preferable by r133 with profit 1000
   Insn 37: point = 87, n_alt = -2
   Insn 36: point = 89, n_alt = 3
   Insn 35: point = 90, n_alt = 0
   Insn 34: point = 92, n_alt = -2
   Insn 33: point = 94, n_alt = -2
   Insn 32: point = 96, n_alt = 0
   Insn 31: point = 98, n_alt = 0
   Insn 30: point = 100, n_alt = 0
   Insn 29: point = 101, n_alt = -2
   Insn 28: point = 102, n_alt = 1
   Insn 27: point = 104, n_alt = 0
   Insn 26: point = 105, n_alt = 3
   Insn 25: point = 107, n_alt = 3
  BB 3
   Insn 18: point = 108, n_alt = -1
   Insn 17: point = 108, n_alt = 0
   Insn 16: point = 109, n_alt = 4
   Insn 15: point = 111, n_alt = -2
   Insn 14: point = 113, n_alt = 0
   Insn 130: point = 115, n_alt = -2
	Hard reg 1 is preferable by r132 with profit 1000
   Insn 13: point = 117, n_alt = 0
   Insn 129: point = 118, n_alt = -2
	Hard reg 1 is preferable by r132 with profit 1000
	Hard reg 0 is preferable by r132 with profit 1000
   Insn 12: point = 119, n_alt = -2
   Insn 11: point = 121, n_alt = 0
   Insn 10: point = 123, n_alt = 3
 r82: [91..105]
 r83: [99..102]
 r84: [91..92]
 r85: [74..90]
 r86: [72..73]
 r87: [52..53]
 r88: [32..33]
 r89: [12..13]
 r90: [120..121]
 r91: [88..89]
 r92: [68..69]
 r93: [48..49]
 r94: [28..29]
 r95: [108..119] [0..1]
 r96: [114..115]
 r97: [112..113]
 r98: [110..111]
 r99: [108..109]
 r100: [76..87] [2..3]
 r101: [82..83]
 r102: [80..81]
 r103: [78..79]
 r104: [76..77]
 r105: [56..67] [4..5]
 r106: [62..63]
 r107: [60..61]
 r108: [58..59]
 r109: [56..57]
 r110: [36..47] [6..7]
 r111: [42..43]
 r112: [40..41]
 r113: [38..39]
 r114: [36..37]
 r115: [16..27] [8..9]
 r116: [22..23]
 r117: [20..21]
 r118: [18..19]
 r119: [16..17]
 r120: [122..123]
 r121: [106..107]
 r122: [103..104]
 r123: [97..101] [93..94]
 r124: [95..96]
 r125: [70..71]
 r126: [54..55]
 r127: [50..51]
 r128: [34..35]
 r129: [30..31]
 r130: [14..15]
 r131: [10..11]
 r132: [116..118]
 r133: [84..86]
 r134: [64..66]
 r135: [44..46]
 r136: [24..26]
Compressing live ranges: from 124 to 106 - 85%
Ranges after the compression:
 r82: [80..89]
 r83: [86..87]
 r84: [80..81]
 r85: [68..79]
 r86: [66..67]
 r87: [48..49]
 r88: [30..31]
 r89: [12..13]
 r90: [102..103]
 r91: [78..79]
 r92: [62..63]
 r93: [44..45]
 r94: [26..27]
 r95: [92..101] [0..1]
 r96: [98..99]
 r97: [96..97]
 r98: [94..95]
 r99: [92..93]
 r100: [68..77] [2..3]
 r101: [74..75]
 r102: [72..73]
 r103: [70..71]
 r104: [68..69]
 r105: [52..61] [4..5]
 r106: [58..59]
 r107: [56..57]
 r108: [54..55]
 r109: [52..53]
 r110: [34..43] [6..7]
 r111: [40..41]
 r112: [38..39]
 r113: [36..37]
 r114: [34..35]
 r115: [16..25] [8..9]
 r116: [22..23]
 r117: [20..21]
 r118: [18..19]
 r119: [16..17]
 r120: [104..105]
 r121: [90..91]
 r122: [88..89]
 r123: [86..87] [82..83]
 r124: [84..85]
 r125: [64..65]
 r126: [50..51]
 r127: [46..47]
 r128: [32..33]
 r129: [28..29]
 r130: [14..15]
 r131: [10..11]
 r132: [100..101]
 r133: [76..77]
 r134: [60..61]
 r135: [42..43]
 r136: [24..25]

********** Assignment #1: **********

	 Assigning to 132 (cl=GENERAL_REGS, orig=96, freq=3000, tfirst=132, tfreq=3000)...
	   Assign 1 to reload r132 (freq=3000)
	 Assigning to 133 (cl=GENERAL_REGS, orig=101, freq=3000, tfirst=133, tfreq=3000)...
	   Assign 2 to reload r133 (freq=3000)
	 Assigning to 134 (cl=GENERAL_REGS, orig=106, freq=3000, tfirst=134, tfreq=3000)...
	   Assign 1 to reload r134 (freq=3000)
	 Assigning to 135 (cl=GENERAL_REGS, orig=111, freq=3000, tfirst=135, tfreq=3000)...
	   Assign 1 to reload r135 (freq=3000)
	 Assigning to 136 (cl=GENERAL_REGS, orig=116, freq=3000, tfirst=136, tfreq=3000)...
	   Assign 1 to reload r136 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 26
changing reg in insn 28
changing reg in insn 31
changing reg in insn 29
changing reg in insn 31
changing reg in insn 34
changing reg in insn 35
changing reg in insn 50
changing reg in insn 36
changing reg in insn 50
changing reg in insn 51
changing reg in insn 78
changing reg in insn 79
changing reg in insn 97
changing reg in insn 98
changing reg in insn 116
changing reg in insn 117
changing reg in insn 11
changing reg in insn 12
changing reg in insn 36
changing reg in insn 37
changing reg in insn 63
changing reg in insn 64
changing reg in insn 82
changing reg in insn 83
changing reg in insn 101
changing reg in insn 102
changing reg in insn 12
changing reg in insn 20
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 37
changing reg in insn 45
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 64
changing reg in insn 72
changing reg in insn 66
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 83
changing reg in insn 91
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 102
changing reg in insn 110
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 107
changing reg in insn 10
changing reg in insn 11
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 33
changing reg in insn 31
changing reg in insn 30
changing reg in insn 29
changing reg in insn 34
changing reg in insn 32
changing reg in insn 31
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 62
changing reg in insn 63
changing reg in insn 77
changing reg in insn 78
changing reg in insn 81
changing reg in insn 82
changing reg in insn 96
changing reg in insn 97
changing reg in insn 100
changing reg in insn 101
changing reg in insn 115
changing reg in insn 116
changing reg in insn 119
changing reg in insn 120
deleting insn with uid = 12.
deleting insn with uid = 130.
deleting insn with uid = 15.
deleting insn with uid = 33.
deleting insn with uid = 34.
deleting insn with uid = 37.
deleting insn with uid = 132.
deleting insn with uid = 40.
deleting insn with uid = 64.
deleting insn with uid = 134.
deleting insn with uid = 67.
deleting insn with uid = 83.
deleting insn with uid = 136.
deleting insn with uid = 86.
deleting insn with uid = 102.
deleting insn with uid = 138.
deleting insn with uid = 105.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 92.
verify found no changes in insn with uid = 99.
verify found no changes in insn with uid = 111.
verify found no changes in insn with uid = 118.
verify found no changes in insn with uid = 121.


freeQuery

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={34d,28u} r1={29d,20u,1e} r2={16d,5u} r4={11d} r5={21d,11u} r6={1d,31u} r7={1d,26u} r8={10d} r9={10d} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r17={36d,6u} r18={10d} r19={1d,1u,4e} r20={11d} r21={11d} r22={11d} r23={11d} r24={11d} r25={11d} r26={11d} r27={11d} r28={10d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={11d} r37={11d} r38={10d} r39={10d} r44={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} 
;;    total ref usage 903{770d,128u,5e} in 83{73 regular + 10 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])
        (reg:DI 5 di [ q ])) "queryTAD.c":141:28 66 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 124 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [13 j+0 S4 A32])
        (const_int 0 [0])) "queryTAD.c":142:14 67 {*movsi_internal}
     (nil))
(jump_insn 124 6 125 2 (set (pc)
        (label_ref 54)) "queryTAD.c":142:5 660 {jump}
     (nil)
 -> 54)
;;  succ:       8 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 125 124 56)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 90 95 96 97 98 99 120
(code_label 56 125 9 3 106 (nil) [1 uses])
(note 9 56 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:DI 0 ax [120])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":143:15 66 {*movdi_internal}
     (nil))
(insn 11 10 129 3 (parallel [
            (set (reg/f:DI 0 ax [orig:90 _20 ] [90])
                (plus:DI (reg/f:DI 0 ax [120])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":143:15 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 129 11 13 3 (set (reg:DI 1 dx [orig:96 _31 ] [96])
        (reg:DI 0 ax [orig:95 _30 ] [95])) "queryTAD.c":143:15 66 {*movdi_internal}
     (nil))
(insn 13 129 14 3 (parallel [
            (set (reg:DI 1 dx [orig:96 _31 ] [96])
                (lshiftrt:DI (reg:DI 1 dx [orig:96 _31 ] [96])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":143:15 566 {*lshrdi3_1}
     (nil))
(insn 14 13 16 3 (parallel [
            (set (reg:DI 1 dx [orig:97 _32 ] [97])
                (plus:DI (reg:DI 1 dx [orig:96 _31 ] [96])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":143:15 191 {*adddi_1}
     (nil))
(insn 16 14 17 3 (set (reg:QI 1 dx [orig:99 _34 ] [99])
        (mem:QI (reg/f:DI 1 dx [orig:98 _33 ] [98]) [10 *_33+0 S1 A8])) "queryTAD.c":143:15 69 {*movqi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:99 _34 ] [99])
            (const_int 0 [0]))) "queryTAD.c":143:15 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 18 17 19 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "queryTAD.c":143:15 659 {*jcc}
     (nil)
 -> 23)
;;  succ:       5 [100.0% (guessed)] 
;;              4 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 95

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 [0.0% (guessed)]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 95
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 95
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:95 _30 ] [95])) "queryTAD.c":143:15 66 {*movdi_internal}
     (nil))
(call_insn 21 20 22 4 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":143:15 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 22 21 23)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3 [100.0% (guessed)] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 83 84 85 91 100 101 102 103 104 121 122 123 124
(code_label 23 22 24 5 104 (nil) [1 uses])
(note 24 23 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 5 (set (reg/f:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":143:15 66 {*movdi_internal}
     (nil))
(insn 26 25 27 5 (set (reg/f:DI 2 cx [orig:82 _1 ] [82])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [121])
                (const_int 24 [0x18])) [7 q_13(D)->sensorsID+0 S8 A64])) "queryTAD.c":143:15 66 {*movdi_internal}
     (nil))
(insn 27 26 28 5 (set (reg:SI 0 ax [122])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [13 j+0 S4 A32])) "queryTAD.c":143:26 67 {*movsi_internal}
     (nil))
(insn 28 27 29 5 (set (reg:DI 1 dx [orig:83 _2 ] [83])
        (sign_extend:DI (reg:SI 0 ax [122]))) "queryTAD.c":143:26 128 {*extendsidi2_rex64}
     (nil))
(insn 29 28 30 5 (set (reg:DI 0 ax [123])
        (reg:DI 1 dx [orig:83 _2 ] [83])) "queryTAD.c":143:26 66 {*movdi_internal}
     (nil))
(insn 30 29 31 5 (parallel [
            (set (reg:DI 0 ax [123])
                (ashift:DI (reg:DI 0 ax [123])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":143:26 520 {*ashldi3_1}
     (nil))
(insn 31 30 32 5 (parallel [
            (set (reg:DI 0 ax [123])
                (plus:DI (reg:DI 0 ax [123])
                    (reg:DI 1 dx [orig:83 _2 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":143:26 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:83 _2 ] [83])
            (const_int 5 [0x5]))
        (nil)))
(insn 32 31 35 5 (parallel [
            (set (reg:DI 0 ax [124])
                (ashift:DI (reg:DI 0 ax [123])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":143:26 520 {*ashldi3_1}
     (nil))
(insn 35 32 36 5 (parallel [
            (set (reg/f:DI 0 ax [orig:85 _4 ] [85])
                (plus:DI (reg:DI 0 ax [orig:84 _3 ] [84])
                    (reg/f:DI 2 cx [orig:82 _1 ] [82])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":143:26 191 {*adddi_1}
     (nil))
(insn 36 35 131 5 (parallel [
            (set (reg/f:DI 1 dx [orig:91 _21 ] [91])
                (plus:DI (reg/f:DI 0 ax [orig:85 _4 ] [85])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":143:29 191 {*adddi_1}
     (nil))
(insn 131 36 38 5 (set (reg:DI 2 cx [orig:101 _36 ] [101])
        (reg:DI 1 dx [orig:100 _35 ] [100])) "queryTAD.c":143:29 66 {*movdi_internal}
     (nil))
(insn 38 131 39 5 (parallel [
            (set (reg:DI 2 cx [orig:101 _36 ] [101])
                (lshiftrt:DI (reg:DI 2 cx [orig:101 _36 ] [101])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":143:29 566 {*lshrdi3_1}
     (nil))
(insn 39 38 41 5 (parallel [
            (set (reg:DI 2 cx [orig:102 _37 ] [102])
                (plus:DI (reg:DI 2 cx [orig:101 _36 ] [101])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":143:29 191 {*adddi_1}
     (nil))
(insn 41 39 42 5 (set (reg:QI 2 cx [orig:104 _39 ] [104])
        (mem:QI (reg/f:DI 2 cx [orig:103 _38 ] [103]) [10 *_38+0 S1 A8])) "queryTAD.c":143:29 69 {*movqi_internal}
     (nil))
(insn 42 41 43 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:104 _39 ] [104])
            (const_int 0 [0]))) "queryTAD.c":143:29 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 43 42 44 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) "queryTAD.c":143:29 659 {*jcc}
     (nil)
 -> 48)
;;  succ:       7 [100.0% (guessed)] 
;;              6 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 100

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 [0.0% (guessed)]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 100
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 100
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 44 43 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 6 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:100 _35 ] [100])) "queryTAD.c":143:29 66 {*movdi_internal}
     (nil))
(call_insn 46 45 47 6 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":143:29 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 47 46 48)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5 [100.0% (guessed)] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 86
(code_label 48 47 49 7 105 (nil) [1 uses])
(note 49 48 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 7 (set (reg/f:DI 0 ax [orig:86 _5 ] [86])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:85 _4 ] [85])
                (const_int 8 [0x8])) [3 _4->name+0 S8 A64])) "queryTAD.c":143:29 66 {*movdi_internal}
     (nil))
(insn 51 50 52 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:86 _5 ] [86])) "queryTAD.c":143:9 66 {*movdi_internal}
     (nil))
(call_insn 52 51 53 7 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fc58ee7d600 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "queryTAD.c":143:9 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 53 52 54 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [13 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [13 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":142:26 190 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 54 53 55 8 103 (nil) [1 uses])
(note 55 54 59 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 59 55 60 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [13 j+0 S4 A32])
            (const_int 85 [0x55]))) "queryTAD.c":142:5 11 {*cmpsi_1}
     (nil))
(jump_insn 60 59 61 8 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) "queryTAD.c":142:5 659 {*jcc}
     (nil)
 -> 56)
;;  succ:       3
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 92 105 106 107 108 109 125
(note 61 60 62 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 9 (set (reg/f:DI 0 ax [125])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":145:5 66 {*movdi_internal}
     (nil))
(insn 63 62 133 9 (parallel [
            (set (reg/f:DI 0 ax [orig:92 _22 ] [92])
                (plus:DI (reg/f:DI 0 ax [125])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":145:5 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 133 63 65 9 (set (reg:DI 1 dx [orig:106 _41 ] [106])
        (reg:DI 0 ax [orig:105 _40 ] [105])) "queryTAD.c":145:5 66 {*movdi_internal}
     (nil))
(insn 65 133 66 9 (parallel [
            (set (reg:DI 1 dx [orig:106 _41 ] [106])
                (lshiftrt:DI (reg:DI 1 dx [orig:106 _41 ] [106])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":145:5 566 {*lshrdi3_1}
     (nil))
(insn 66 65 68 9 (parallel [
            (set (reg:DI 1 dx [orig:107 _42 ] [107])
                (plus:DI (reg:DI 1 dx [orig:106 _41 ] [106])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":145:5 191 {*adddi_1}
     (nil))
(insn 68 66 69 9 (set (reg:QI 1 dx [orig:109 _44 ] [109])
        (mem:QI (reg/f:DI 1 dx [orig:108 _43 ] [108]) [10 *_43+0 S1 A8])) "queryTAD.c":145:5 69 {*movqi_internal}
     (nil))
(insn 69 68 70 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:109 _44 ] [109])
            (const_int 0 [0]))) "queryTAD.c":145:5 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 70 69 71 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) "queryTAD.c":145:5 659 {*jcc}
     (nil)
 -> 75)
;;  succ:       11 [100.0% (guessed)] 
;;              10 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 105

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 [0.0% (guessed)]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 105
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 105
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 71 70 72 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:105 _40 ] [105])) "queryTAD.c":145:5 66 {*movdi_internal}
     (nil))
(call_insn 73 72 74 10 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":145:5 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 74 73 75)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       9 [100.0% (guessed)] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 87 93 110 111 112 113 114 126 127
(code_label 75 74 76 11 107 (nil) [1 uses])
(note 76 75 77 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 11 (set (reg/f:DI 0 ax [126])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":145:5 66 {*movdi_internal}
     (nil))
(insn 78 77 79 11 (set (reg/f:DI 0 ax [orig:87 _6 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [126])
                (const_int 16 [0x10])) [6 q_13(D)->years+0 S8 A64])) "queryTAD.c":145:5 66 {*movdi_internal}
     (nil))
(insn 79 78 80 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _6 ] [87])) "queryTAD.c":145:5 66 {*movdi_internal}
     (nil))
(call_insn 80 79 81 11 (call (mem:QI (symbol_ref:DI ("freeRecYears") [flags 0x3]  <function_decl 0x7fc58ec06200 freeRecYears>) [0 freeRecYears S1 A8])
        (const_int 0 [0])) "queryTAD.c":145:5 666 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 81 80 82 11 (set (reg/f:DI 0 ax [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":146:5 66 {*movdi_internal}
     (nil))
(insn 82 81 135 11 (parallel [
            (set (reg/f:DI 0 ax [orig:93 _23 ] [93])
                (plus:DI (reg/f:DI 0 ax [127])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":146:5 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 135 82 84 11 (set (reg:DI 1 dx [orig:111 _46 ] [111])
        (reg:DI 0 ax [orig:110 _45 ] [110])) "queryTAD.c":146:5 66 {*movdi_internal}
     (nil))
(insn 84 135 85 11 (parallel [
            (set (reg:DI 1 dx [orig:111 _46 ] [111])
                (lshiftrt:DI (reg:DI 1 dx [orig:111 _46 ] [111])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":146:5 566 {*lshrdi3_1}
     (nil))
(insn 85 84 87 11 (parallel [
            (set (reg:DI 1 dx [orig:112 _47 ] [112])
                (plus:DI (reg:DI 1 dx [orig:111 _46 ] [111])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":146:5 191 {*adddi_1}
     (nil))
(insn 87 85 88 11 (set (reg:QI 1 dx [orig:114 _49 ] [114])
        (mem:QI (reg/f:DI 1 dx [orig:113 _48 ] [113]) [10 *_48+0 S1 A8])) "queryTAD.c":146:5 69 {*movqi_internal}
     (nil))
(insn 88 87 89 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:114 _49 ] [114])
            (const_int 0 [0]))) "queryTAD.c":146:5 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 89 88 90 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 94)
            (pc))) "queryTAD.c":146:5 659 {*jcc}
     (nil)
 -> 94)
;;  succ:       13 [100.0% (guessed)] 
;;              12 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 110

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 [0.0% (guessed)]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 110
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 110
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 90 89 91 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:110 _45 ] [110])) "queryTAD.c":146:5 66 {*movdi_internal}
     (nil))
(call_insn 92 91 93 12 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":146:5 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 93 92 94)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       11 [100.0% (guessed)] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 88 94 115 116 117 118 119 128 129
(code_label 94 93 95 13 108 (nil) [1 uses])
(note 95 94 96 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 13 (set (reg/f:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":146:5 66 {*movdi_internal}
     (nil))
(insn 97 96 98 13 (set (reg/f:DI 0 ax [orig:88 _7 ] [88])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [128])
                (const_int 32 [0x20])) [8 q_13(D)->sensorsP+0 S8 A64])) "queryTAD.c":146:5 66 {*movdi_internal}
     (nil))
(insn 98 97 99 13 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _7 ] [88])) "queryTAD.c":146:5 66 {*movdi_internal}
     (nil))
(call_insn 99 98 100 13 (call (mem:QI (symbol_ref:DI ("freeRecSen") [flags 0x3]  <function_decl 0x7fc58ec06600 freeRecSen>) [0 freeRecSen S1 A8])
        (const_int 0 [0])) "queryTAD.c":146:5 666 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 100 99 101 13 (set (reg/f:DI 0 ax [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":147:11 66 {*movdi_internal}
     (nil))
(insn 101 100 137 13 (parallel [
            (set (reg/f:DI 0 ax [orig:94 _24 ] [94])
                (plus:DI (reg/f:DI 0 ax [129])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":147:11 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 137 101 103 13 (set (reg:DI 1 dx [orig:116 _51 ] [116])
        (reg:DI 0 ax [orig:115 _50 ] [115])) "queryTAD.c":147:11 66 {*movdi_internal}
     (nil))
(insn 103 137 104 13 (parallel [
            (set (reg:DI 1 dx [orig:116 _51 ] [116])
                (lshiftrt:DI (reg:DI 1 dx [orig:116 _51 ] [116])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":147:11 566 {*lshrdi3_1}
     (nil))
(insn 104 103 106 13 (parallel [
            (set (reg:DI 1 dx [orig:117 _52 ] [117])
                (plus:DI (reg:DI 1 dx [orig:116 _51 ] [116])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "queryTAD.c":147:11 191 {*adddi_1}
     (nil))
(insn 106 104 107 13 (set (reg:QI 1 dx [orig:119 _54 ] [119])
        (mem:QI (reg/f:DI 1 dx [orig:118 _53 ] [118]) [10 *_53+0 S1 A8])) "queryTAD.c":147:11 69 {*movqi_internal}
     (nil))
(insn 107 106 108 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:119 _54 ] [119])
            (const_int 0 [0]))) "queryTAD.c":147:11 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 108 107 109 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 113)
            (pc))) "queryTAD.c":147:11 659 {*jcc}
     (nil)
 -> 113)
;;  succ:       15 [100.0% (guessed)] 
;;              14 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 115

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 [0.0% (guessed)]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 115
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 109 108 110 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 111 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:115 _50 ] [115])) "queryTAD.c":147:11 66 {*movdi_internal}
     (nil))
(call_insn 111 110 112 14 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7fc58eea5900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":147:11 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 112 111 113)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       13 [100.0% (guessed)] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 89 130 131
(code_label 113 112 114 15 109 (nil) [1 uses])
(note 114 113 115 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 115 114 116 15 (set (reg/f:DI 0 ax [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":147:11 66 {*movdi_internal}
     (nil))
(insn 116 115 117 15 (set (reg/f:DI 0 ax [orig:89 _8 ] [89])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [130])
                (const_int 24 [0x18])) [7 q_13(D)->sensorsID+0 S8 A64])) "queryTAD.c":147:11 66 {*movdi_internal}
     (nil))
(insn 117 116 118 15 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:89 _8 ] [89])) "queryTAD.c":147:5 66 {*movdi_internal}
     (nil))
(call_insn 118 117 119 15 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fc58ee7d600 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "queryTAD.c":147:5 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 119 118 120 15 (set (reg:DI 0 ax [131])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 q+0 S8 A64])) "queryTAD.c":148:5 66 {*movdi_internal}
     (nil))
(insn 120 119 121 15 (set (reg:DI 5 di)
        (reg:DI 0 ax [131])) "queryTAD.c":148:5 66 {*movdi_internal}
     (nil))
(call_insn 121 120 126 15 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fc58ee7d600 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "queryTAD.c":148:5 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       16 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 1, flags: (RTL, MODIFIED)
;;  pred:       15 [always]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 126 121 127 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 128 16 (const_int 0 [0]) "queryTAD.c":149:1 696 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 128 127 0 NOTE_INSN_DELETED)

;; Function _sub_D_00099_0 (_sub_D_00099_0, funcdef_no=12, decl_uid=3589, cgraph_uid=20, symbol_order=35)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********


********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


_sub_D_00099_0

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={3d,1u} r5={3d,1u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d,1u} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 95{87d,8u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 4 si)
        (const_int 15 [0xf])) "queryTAD.c":149:1 66 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:DI 5 di)
        (symbol_ref:DI ("*.LASAN0") [flags 0x2]  <var_decl 0x7fc58ece2360 *.LASAN0>)) "queryTAD.c":149:1 66 {*movdi_internal}
     (nil))
(call_insn 7 6 10 2 (call (mem:QI (symbol_ref:DI ("__asan_unregister_globals") [flags 0x41]  <function_decl 0x7fc58eead700 __builtin___asan_unregister_globals>) [0 __builtin___asan_unregister_globals S1 A8])
        (const_int 0 [0])) "queryTAD.c":149:1 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 10 7 0 NOTE_INSN_DELETED)

;; Function _sub_I_00099_1 (_sub_I_00099_1, funcdef_no=13, decl_uid=3592, cgraph_uid=23, symbol_order=38)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) rBwBz {*call}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 7:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********


********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


_sub_I_00099_1

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={4d} r1={4d} r2={4d} r4={5d,1u} r5={5d,1u} r6={1d,2u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={3d} r18={3d} r19={1d,1u} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={4d} r37={4d} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} 
;;    total ref usage 231{221d,10u,0e} in 5{2 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 5 2 6 2 (call (mem:QI (symbol_ref:DI ("__asan_init") [flags 0x41]  <function_decl 0x7fc58eea5400 __builtin___asan_init>) [0 __builtin___asan_init S1 A8])
        (const_int 0 [0])) "queryTAD.c":149:1 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(call_insn 6 5 7 2 (call (mem:QI (symbol_ref:DI ("__asan_version_mismatch_check_v8") [flags 0x41]  <function_decl 0x7fc58eea5500 __builtin___asan_version_mismatch_check_v8>) [0 __builtin___asan_version_mismatch_check_v8 S1 A8])
        (const_int 0 [0])) "queryTAD.c":149:1 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 7 6 8 2 (set (reg:DI 4 si)
        (const_int 15 [0xf])) "queryTAD.c":149:1 66 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (symbol_ref:DI ("*.LASAN0") [flags 0x2]  <var_decl 0x7fc58ece2360 *.LASAN0>)) "queryTAD.c":149:1 66 {*movdi_internal}
     (nil))
(call_insn 9 8 12 2 (call (mem:QI (symbol_ref:DI ("__asan_register_globals") [flags 0x41]  <function_decl 0x7fc58eead600 __builtin___asan_register_globals>) [0 __builtin___asan_register_globals S1 A8])
        (const_int 0 [0])) "queryTAD.c":149:1 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 12 9 0 NOTE_INSN_DELETED)
