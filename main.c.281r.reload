
;; Function main (main, funcdef_no=0, decl_uid=3402, cgraph_uid=1, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=80, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 8:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 10:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=139 from oldreg=94, assigning class GENERAL_REGS to r139
   10: {r139:DI=r139:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  158: r139:DI=r93:DI
    Inserting insn reload after:
  159: r94:DI=r139:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 27:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 31:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=140 from oldreg=99, assigning class GENERAL_REGS to r140
   31: {r140:DI=r140:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  160: r140:DI=r98:DI
    Inserting insn reload after:
  161: r99:DI=r140:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 32:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 34:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 44:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 48:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) ?mr {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 56:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 65:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 67:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=141 from oldreg=104, assigning class GENERAL_REGS to r141
   67: {r141:DI=r141:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  162: r141:DI=r103:DI
    Inserting insn reload after:
  163: r104:DI=r141:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 70:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 84:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 86:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 88:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=142 from oldreg=109, assigning class GENERAL_REGS to r142
   88: {r142:DI=r142:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  164: r142:DI=r108:DI
    Inserting insn reload after:
  165: r109:DI=r142:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 89:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 91:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 105:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 112:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 117:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 129:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 131:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 138:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 141:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 144:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13

********** Pseudo live ranges #1: **********

  BB 3
   Insn 18: point = 0, n_alt = 0
   Insn 17: point = 0, n_alt = -2
  BB 5
   Insn 39: point = 2, n_alt = 0
   Insn 38: point = 2, n_alt = -2
  BB 8
   Insn 60: point = 4, n_alt = 0
   Insn 59: point = 4, n_alt = 0
   Insn 58: point = 4, n_alt = 0
   Insn 57: point = 4, n_alt = 0
   Insn 56: point = 4, n_alt = 4
  BB 10
   Insn 75: point = 4, n_alt = 0
   Insn 74: point = 4, n_alt = -2
  BB 12
   Insn 96: point = 6, n_alt = 0
   Insn 95: point = 6, n_alt = -2
  BB 13
   Insn 155: point = 8, n_alt = -1
   Insn 154: point = 8, n_alt = -2
   Insn 150: point = 9, n_alt = -2
   Insn 147: point = 11, n_alt = 0
   Insn 146: point = 12, n_alt = 0
   Insn 145: point = 12, n_alt = -2
   Insn 144: point = 13, n_alt = 3
   Insn 143: point = 14, n_alt = 0
   Insn 142: point = 14, n_alt = -2
   Insn 141: point = 15, n_alt = 3
   Insn 140: point = 16, n_alt = 0
   Insn 139: point = 16, n_alt = -2
   Insn 138: point = 17, n_alt = 3
   Insn 137: point = 18, n_alt = 0
   Insn 136: point = 18, n_alt = -2
   Insn 135: point = 19, n_alt = 3
   Insn 134: point = 20, n_alt = 0
   Insn 133: point = 20, n_alt = -2
   Insn 132: point = 21, n_alt = -2
   Insn 131: point = 22, n_alt = 3
   Insn 130: point = 23, n_alt = 3
   Insn 129: point = 24, n_alt = 5
   Insn 128: point = 25, n_alt = -2
   Insn 127: point = 26, n_alt = 0
   Insn 126: point = 26, n_alt = -2
   Insn 125: point = 27, n_alt = -2
   Insn 124: point = 28, n_alt = 3
   Insn 123: point = 29, n_alt = 3
   Insn 122: point = 30, n_alt = 0
   Insn 121: point = 30, n_alt = -2
   Insn 120: point = 31, n_alt = -2
   Insn 119: point = 32, n_alt = 3
   Insn 118: point = 33, n_alt = 3
   Insn 117: point = 34, n_alt = 5
   Insn 116: point = 35, n_alt = -2
   Insn 115: point = 36, n_alt = 0
   Insn 114: point = 36, n_alt = -2
   Insn 113: point = 37, n_alt = 3
   Insn 112: point = 38, n_alt = 5
   Insn 111: point = 39, n_alt = -2
   Insn 110: point = 40, n_alt = 0
   Insn 109: point = 40, n_alt = -2
   Insn 108: point = 41, n_alt = -2
   Insn 107: point = 42, n_alt = 3
   Insn 106: point = 43, n_alt = 3
   Insn 105: point = 44, n_alt = 5
   Insn 104: point = 45, n_alt = 0
   Insn 103: point = 47, n_alt = -2
   Insn 102: point = 48, n_alt = 0
   Insn 101: point = 48, n_alt = -2
   Insn 100: point = 49, n_alt = 3
  BB 11
   Insn 93: point = 52, n_alt = -1
   Insn 92: point = 52, n_alt = 0
   Insn 91: point = 53, n_alt = 4
   Insn 90: point = 55, n_alt = -2
   Insn 89: point = 57, n_alt = 0
   Insn 165: point = 59, n_alt = -2
	Hard reg 2 is preferable by r142 with profit 1000
   Insn 88: point = 61, n_alt = 0
   Insn 164: point = 62, n_alt = -2
	Hard reg 2 is preferable by r142 with profit 1000
	Hard reg 1 is preferable by r142 with profit 1000
   Insn 87: point = 63, n_alt = -2
   Insn 86: point = 64, n_alt = 0
   Insn 85: point = 66, n_alt = 3
   Insn 84: point = 67, n_alt = 5
   Insn 83: point = 68, n_alt = 0
   Insn 82: point = 70, n_alt = -2
   Insn 81: point = 71, n_alt = 0
   Insn 80: point = 71, n_alt = -2
   Insn 79: point = 72, n_alt = 3
  BB 9
   Insn 72: point = 75, n_alt = -1
   Insn 71: point = 75, n_alt = 0
   Insn 70: point = 76, n_alt = 4
   Insn 69: point = 78, n_alt = -2
   Insn 68: point = 80, n_alt = 0
   Insn 163: point = 82, n_alt = -2
	Hard reg 2 is preferable by r141 with profit 1000
   Insn 67: point = 84, n_alt = 0
   Insn 162: point = 85, n_alt = -2
	Hard reg 2 is preferable by r141 with profit 1000
	Hard reg 1 is preferable by r141 with profit 1000
   Insn 66: point = 86, n_alt = -2
   Insn 65: point = 87, n_alt = 0
   Insn 64: point = 89, n_alt = 3
  BB 7
   Insn 53: point = 90, n_alt = -1
   Insn 52: point = 90, n_alt = 1
  BB 6
   Insn 50: point = 90, n_alt = -1
   Insn 49: point = 90, n_alt = 1
   Insn 48: point = 90, n_alt = 5
   Insn 47: point = 91, n_alt = -2
   Insn 46: point = 92, n_alt = 0
   Insn 45: point = 92, n_alt = -2
   Insn 44: point = 93, n_alt = 4
   Insn 43: point = 93, n_alt = 3
  BB 4
   Insn 36: point = 96, n_alt = -1
   Insn 35: point = 96, n_alt = 0
   Insn 34: point = 97, n_alt = 4
   Insn 33: point = 99, n_alt = -2
   Insn 32: point = 101, n_alt = 0
   Insn 161: point = 103, n_alt = -2
	Hard reg 2 is preferable by r140 with profit 1000
   Insn 31: point = 105, n_alt = 0
   Insn 160: point = 106, n_alt = -2
	Hard reg 2 is preferable by r140 with profit 1000
	Hard reg 1 is preferable by r140 with profit 1000
   Insn 30: point = 107, n_alt = -2
   Insn 29: point = 108, n_alt = 0
   Insn 28: point = 110, n_alt = 3
   Insn 27: point = 111, n_alt = 5
   Insn 26: point = 112, n_alt = -2
   Insn 25: point = 113, n_alt = 0
   Insn 24: point = 113, n_alt = -2
   Insn 23: point = 114, n_alt = 4
   Insn 22: point = 114, n_alt = 3
  BB 2
   Insn 15: point = 117, n_alt = -1
   Insn 14: point = 117, n_alt = 0
   Insn 13: point = 118, n_alt = 4
   Insn 12: point = 120, n_alt = -2
   Insn 11: point = 122, n_alt = 0
   Insn 159: point = 124, n_alt = -2
	Hard reg 2 is preferable by r139 with profit 1000
   Insn 10: point = 126, n_alt = 0
   Insn 158: point = 127, n_alt = -2
	Hard reg 2 is preferable by r139 with profit 1000
	Hard reg 1 is preferable by r139 with profit 1000
   Insn 9: point = 128, n_alt = -2
   Insn 8: point = 129, n_alt = 0
   Insn 7: point = 131, n_alt = 3
   Insn 3: point = 132, n_alt = 5
   Insn 2: point = 132, n_alt = 1
 r82: [115..129]
 r83: [113..114]
 r84: [94..108]
 r85: [92..93]
 r86: [73..87]
 r87: [71..72]
 r88: [69..70]
 r89: [50..64]
 r90: [48..49]
 r91: [46..47]
 r92: [10..11]
 r93: [117..128] [0..1]
 r94: [123..124]
 r95: [121..122]
 r96: [119..120]
 r97: [117..118]
 r98: [96..107] [2..3]
 r99: [102..103]
 r100: [100..101]
 r101: [98..99]
 r102: [96..97]
 r103: [75..86] [4..5]
 r104: [81..82]
 r105: [79..80]
 r106: [77..78]
 r107: [75..76]
 r108: [52..63] [6..7]
 r109: [58..59]
 r110: [56..57]
 r111: [54..55]
 r112: [52..53]
 r113: [8..9]
 r114: [130..131]
 r115: [111..112]
 r116: [109..110]
 r117: [90..91]
 r118: [88..89]
 r119: [67..68]
 r120: [65..66]
 r121: [44..45]
 r122: [41..43]
 r123: [40..42]
 r124: [38..39]
 r125: [36..37]
 r126: [34..35]
 r127: [31..33]
 r128: [30..32]
 r129: [27..29]
 r130: [26..28]
 r131: [24..25]
 r132: [21..23]
 r133: [20..22]
 r134: [18..19]
 r135: [16..17]
 r136: [14..15]
 r137: [12..13]
 r139: [125..127]
 r140: [104..106]
 r141: [83..85]
 r142: [60..62]
Compressing live ranges: from 132 to 104 - 78%
Ranges after the compression:
 r82: [92..101]
 r83: [90..91]
 r84: [76..85]
 r85: [74..75]
 r86: [60..69]
 r87: [58..59]
 r88: [56..57]
 r89: [42..51]
 r90: [40..41]
 r91: [38..39]
 r92: [10..11]
 r93: [92..101] [0..1]
 r94: [98..99]
 r95: [96..97]
 r96: [94..95]
 r97: [92..93]
 r98: [76..85] [2..3]
 r99: [82..83]
 r100: [80..81]
 r101: [78..79]
 r102: [76..77]
 r103: [60..69] [4..5]
 r104: [66..67]
 r105: [64..65]
 r106: [62..63]
 r107: [60..61]
 r108: [42..51] [6..7]
 r109: [48..49]
 r110: [46..47]
 r111: [44..45]
 r112: [42..43]
 r113: [8..9]
 r114: [102..103]
 r115: [88..89]
 r116: [86..87]
 r117: [72..73]
 r118: [70..71]
 r119: [54..55]
 r120: [52..53]
 r121: [36..37]
 r122: [34..35]
 r123: [34..35]
 r124: [32..33]
 r125: [30..31]
 r126: [28..29]
 r127: [26..27]
 r128: [26..27]
 r129: [24..25]
 r130: [24..25]
 r131: [22..23]
 r132: [20..21]
 r133: [20..21]
 r134: [18..19]
 r135: [16..17]
 r136: [14..15]
 r137: [12..13]
 r139: [100..101]
 r140: [84..85]
 r141: [68..69]
 r142: [50..51]

********** Assignment #1: **********

	 Assigning to 139 (cl=GENERAL_REGS, orig=94, freq=3000, tfirst=139, tfreq=3000)...
	   Assign 2 to reload r139 (freq=3000)
	 Assigning to 140 (cl=GENERAL_REGS, orig=99, freq=3000, tfirst=140, tfreq=3000)...
	   Assign 2 to reload r140 (freq=3000)
	 Assigning to 141 (cl=GENERAL_REGS, orig=104, freq=3000, tfirst=141, tfreq=3000)...
	   Assign 2 to reload r141 (freq=3000)
	 Assigning to 142 (cl=GENERAL_REGS, orig=109, freq=3000, tfirst=142, tfreq=3000)...
	   Assign 2 to reload r142 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=80, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 22
changing reg in insn 9
changing reg in insn 22
changing reg in insn 24
changing reg in insn 29
changing reg in insn 43
changing reg in insn 30
changing reg in insn 43
changing reg in insn 45
changing reg in insn 65
changing reg in insn 79
changing reg in insn 66
changing reg in insn 79
changing reg in insn 80
changing reg in insn 82
changing reg in insn 83
changing reg in insn 86
changing reg in insn 100
changing reg in insn 87
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 147
changing reg in insn 150
changing reg in insn 9
changing reg in insn 17
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 30
changing reg in insn 38
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 66
changing reg in insn 74
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 87
changing reg in insn 95
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 150
changing reg in insn 154
changing reg in insn 7
changing reg in insn 8
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 47
changing reg in insn 48
changing reg in insn 64
changing reg in insn 65
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 108
changing reg in insn 107
changing reg in insn 109
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 120
changing reg in insn 119
changing reg in insn 121
changing reg in insn 123
changing reg in insn 125
changing reg in insn 124
changing reg in insn 126
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 132
changing reg in insn 131
changing reg in insn 133
changing reg in insn 135
changing reg in insn 136
changing reg in insn 138
changing reg in insn 139
changing reg in insn 141
changing reg in insn 142
changing reg in insn 144
changing reg in insn 145
deleting insn with uid = 159.
deleting insn with uid = 12.
deleting insn with uid = 26.
deleting insn with uid = 161.
deleting insn with uid = 33.
deleting insn with uid = 47.
deleting insn with uid = 163.
deleting insn with uid = 69.
deleting insn with uid = 82.
deleting insn with uid = 165.
deleting insn with uid = 90.
deleting insn with uid = 103.
deleting insn with uid = 111.
deleting insn with uid = 116.
deleting insn with uid = 128.
deleting insn with uid = 150.
deleting insn with uid = 154.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 60.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 81.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 102.
verify found no changes in insn with uid = 110.
verify found no changes in insn with uid = 115.
verify found no changes in insn with uid = 122.
verify found no changes in insn with uid = 127.
verify found no changes in insn with uid = 134.
verify found no changes in insn with uid = 137.
verify found no changes in insn with uid = 140.
verify found no changes in insn with uid = 143.
verify found no changes in insn with uid = 146.


main

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={45d,36u} r1={29d,12u} r2={37d,16u} r4={27d,7u} r5={40d,20u} r6={1d,41u} r7={1d,33u} r8={20d} r9={20d} r10={20d} r11={20d} r12={20d} r13={20d} r14={20d} r15={20d} r17={38d,6u} r18={20d} r19={1d,1u,4e} r20={21d} r21={21d} r22={21d} r23={21d} r24={21d} r25={21d} r26={21d} r27={21d} r28={20d} r29={20d} r30={20d} r31={20d} r32={20d} r33={20d} r34={20d} r35={20d} r36={21d} r37={21d} r38={20d} r39={20d} r44={20d} r45={20d} r46={20d} r47={20d} r48={20d} r49={20d} r50={20d} r51={20d} r52={20d} r53={20d} r54={20d} r55={20d} r56={20d} r57={20d} r58={20d} r59={20d} r60={20d} r61={20d} r62={20d} r63={20d} r64={20d} r65={20d} r66={20d} r67={20d} r68={20d} r69={20d} r70={20d} r71={20d} r72={20d} r73={20d} r74={20d} r75={20d} 
;;    total ref usage 1625{1449d,172u,4e} in 115{95 regular + 20 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 93 94 95 96 97 114
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [11 argc+0 S4 A32])
        (reg:SI 5 di [ argc ])) "main.c":11:33 67 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [12 argv+0 S8 A64])
        (reg:DI 4 si [ argv ])) "main.c":11:33 66 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [12 argv+0 S8 A64])) "main.c":12:32 66 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg/f:DI 0 ax [orig:82 _1 ] [82])
                (plus:DI (reg/f:DI 0 ax [114])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":12:32 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -80 [0xffffffffffffffb0])) [12 argv+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 9 8 158 2 (set (reg:DI 1 dx [orig:93 _39 ] [93])
        (reg/f:DI 0 ax [orig:82 _1 ] [82])) "main.c":12:22 66 {*movdi_internal}
     (nil))
(insn 158 9 10 2 (set (reg:DI 2 cx [orig:94 _40 ] [94])
        (reg:DI 1 dx [orig:93 _39 ] [93])) "main.c":12:22 66 {*movdi_internal}
     (nil))
(insn 10 158 11 2 (parallel [
            (set (reg:DI 2 cx [orig:94 _40 ] [94])
                (lshiftrt:DI (reg:DI 2 cx [orig:94 _40 ] [94])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":12:22 566 {*lshrdi3_1}
     (nil))
(insn 11 10 13 2 (parallel [
            (set (reg:DI 2 cx [orig:95 _41 ] [95])
                (plus:DI (reg:DI 2 cx [orig:94 _40 ] [94])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":12:22 191 {*adddi_1}
     (nil))
(insn 13 11 14 2 (set (reg:QI 2 cx [orig:97 _43 ] [97])
        (mem:QI (reg/f:DI 2 cx [orig:96 _42 ] [96]) [7 *_42+0 S1 A8])) "main.c":12:22 69 {*movqi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:97 _43 ] [97])
            (const_int 0 [0]))) "main.c":12:22 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "main.c":12:22 659 {*jcc}
     (nil)
 -> 20)
;;  succ:       4 [100.0% (guessed)] 
;;              3 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 93

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 [0.0% (guessed)]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 93
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:93 _39 ] [93])) "main.c":12:22 66 {*movdi_internal}
     (nil))
(call_insn 18 17 19 3 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":12:22 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 19 18 20)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2 [100.0% (guessed)] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 83 84 98 99 100 101 102 115 116
(code_label 20 19 21 4 2 (nil) [1 uses])
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg/f:DI 0 ax [orig:83 _2 ] [83])
        (mem/f:DI (reg/f:DI 0 ax [orig:82 _1 ] [82]) [3 *_1+0 S8 A64])) "main.c":12:22 66 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7ffa22b3a360 *.LC0>)) "main.c":12:22 66 {*movdi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:83 _2 ] [83])) "main.c":12:22 66 {*movdi_internal}
     (nil))
(call_insn 25 24 27 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7ffa22e2be00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) "main.c":12:22 677 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 27 25 28 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [10 fSensor+0 S8 A64])
        (reg:DI 0 ax [115])) "main.c":12:22 66 {*movdi_internal}
     (nil))
(insn 28 27 29 4 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [12 argv+0 S8 A64])) "main.c":13:34 66 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (parallel [
            (set (reg/f:DI 0 ax [orig:84 _3 ] [84])
                (plus:DI (reg/f:DI 0 ax [116])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":13:34 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -80 [0xffffffffffffffb0])) [12 argv+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 30 29 160 4 (set (reg:DI 1 dx [orig:98 _44 ] [98])
        (reg/f:DI 0 ax [orig:84 _3 ] [84])) "main.c":13:24 66 {*movdi_internal}
     (nil))
(insn 160 30 31 4 (set (reg:DI 2 cx [orig:99 _45 ] [99])
        (reg:DI 1 dx [orig:98 _44 ] [98])) "main.c":13:24 66 {*movdi_internal}
     (nil))
(insn 31 160 32 4 (parallel [
            (set (reg:DI 2 cx [orig:99 _45 ] [99])
                (lshiftrt:DI (reg:DI 2 cx [orig:99 _45 ] [99])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":13:24 566 {*lshrdi3_1}
     (nil))
(insn 32 31 34 4 (parallel [
            (set (reg:DI 2 cx [orig:100 _46 ] [100])
                (plus:DI (reg:DI 2 cx [orig:99 _45 ] [99])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":13:24 191 {*adddi_1}
     (nil))
(insn 34 32 35 4 (set (reg:QI 2 cx [orig:102 _48 ] [102])
        (mem:QI (reg/f:DI 2 cx [orig:101 _47 ] [101]) [7 *_47+0 S1 A8])) "main.c":13:24 69 {*movqi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:102 _48 ] [102])
            (const_int 0 [0]))) "main.c":13:24 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 36 35 37 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 41)
            (pc))) "main.c":13:24 659 {*jcc}
     (nil)
 -> 41)
;;  succ:       6 [100.0% (guessed)] 
;;              5 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84 98

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 [0.0% (guessed)]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 98
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 98
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 37 36 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 5 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:98 _44 ] [98])) "main.c":13:24 66 {*movdi_internal}
     (nil))
(call_insn 39 38 40 5 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":13:24 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 40 39 41)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4 [100.0% (guessed)] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 85 117
(code_label 41 40 42 6 3 (nil) [1 uses])
(note 42 41 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 6 (set (reg/f:DI 0 ax [orig:85 _4 ] [85])
        (mem/f:DI (reg/f:DI 0 ax [orig:84 _3 ] [84]) [3 *_3+0 S8 A64])) "main.c":13:24 66 {*movdi_internal}
     (nil))
(insn 44 43 45 6 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7ffa22b3a360 *.LC0>)) "main.c":13:24 66 {*movdi_internal}
     (nil))
(insn 45 44 46 6 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:85 _4 ] [85])) "main.c":13:24 66 {*movdi_internal}
     (nil))
(call_insn 46 45 48 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7ffa22e2be00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) "main.c":13:24 677 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 48 46 49 6 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [10 fReadings+0 S8 A64])
        (reg:DI 0 ax [117])) "main.c":13:24 66 {*movdi_internal}
     (nil))
(insn 49 48 50 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [10 fSensor+0 S8 A64])
            (const_int 0 [0]))) "main.c":14:8 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 50 49 51 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 54)
            (pc))) "main.c":14:8 659 {*jcc}
     (nil)
 -> 54)
;;  succ:       8
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 51 50 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [10 fReadings+0 S8 A64])
            (const_int 0 [0]))) "main.c":14:25 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 53 52 54 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) "main.c":14:25 659 {*jcc}
     (nil)
 -> 62)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(code_label 54 53 55 8 4 (nil) [1 uses])
(note 55 54 56 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 8 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7ffa22b3a3f0 *.LC1>)) "main.c":15:9 66 {*movdi_internal}
     (nil))
(call_insn 57 56 58 8 (call (mem:QI (symbol_ref:DI ("perror") [flags 0x41]  <function_decl 0x7ffa22e64500 perror>) [0 perror S1 A8])
        (const_int 0 [0])) "main.c":15:9 666 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 58 57 59 8 (call (mem:QI (symbol_ref:DI ("__asan_handle_no_return") [flags 0x41]  <function_decl 0x7ffa22db2800 __builtin___asan_handle_no_return>) [0 __builtin___asan_handle_no_return S1 A8])
        (const_int 0 [0])) "main.c":16:9 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 59 58 60 8 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "main.c":16:9 67 {*movsi_internal}
     (nil))
(call_insn 60 59 61 8 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7ffa22d81900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) "main.c":16:9 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 61 60 62)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 86 103 104 105 106 107 118
(code_label 62 61 63 9 5 (nil) [1 uses])
(note 63 62 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 9 (set (reg/f:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [12 argv+0 S8 A64])) "main.c":18:32 66 {*movdi_internal}
     (nil))
(insn 65 64 66 9 (parallel [
            (set (reg/f:DI 0 ax [orig:86 _5 ] [86])
                (plus:DI (reg/f:DI 0 ax [118])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":18:32 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -80 [0xffffffffffffffb0])) [12 argv+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 66 65 162 9 (set (reg:DI 1 dx [orig:103 _49 ] [103])
        (reg/f:DI 0 ax [orig:86 _5 ] [86])) "main.c":18:23 66 {*movdi_internal}
     (nil))
(insn 162 66 67 9 (set (reg:DI 2 cx [orig:104 _50 ] [104])
        (reg:DI 1 dx [orig:103 _49 ] [103])) "main.c":18:23 66 {*movdi_internal}
     (nil))
(insn 67 162 68 9 (parallel [
            (set (reg:DI 2 cx [orig:104 _50 ] [104])
                (lshiftrt:DI (reg:DI 2 cx [orig:104 _50 ] [104])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":18:23 566 {*lshrdi3_1}
     (nil))
(insn 68 67 70 9 (parallel [
            (set (reg:DI 2 cx [orig:105 _51 ] [105])
                (plus:DI (reg:DI 2 cx [orig:104 _50 ] [104])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":18:23 191 {*adddi_1}
     (nil))
(insn 70 68 71 9 (set (reg:QI 2 cx [orig:107 _53 ] [107])
        (mem:QI (reg/f:DI 2 cx [orig:106 _52 ] [106]) [7 *_52+0 S1 A8])) "main.c":18:23 69 {*movqi_internal}
     (nil))
(insn 71 70 72 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:107 _53 ] [107])
            (const_int 0 [0]))) "main.c":18:23 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 72 71 73 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) "main.c":18:23 659 {*jcc}
     (nil)
 -> 77)
;;  succ:       11 [100.0% (guessed)] 
;;              10 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 103

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 [0.0% (guessed)]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 103
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 103
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 73 72 74 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 10 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:103 _49 ] [103])) "main.c":18:23 66 {*movdi_internal}
     (nil))
(call_insn 75 74 76 10 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":18:23 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 76 75 77)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       9 [100.0% (guessed)] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 87 88 89 108 109 110 111 112 119 120
(code_label 77 76 78 11 6 (nil) [1 uses])
(note 78 77 79 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 11 (set (reg/f:DI 0 ax [orig:87 _6 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [orig:86 _5 ] [86]) [3 *_5+0 S8 A64])) "main.c":18:23 66 {*movdi_internal}
     (nil))
(insn 80 79 81 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _6 ] [87])) "main.c":18:23 66 {*movdi_internal}
     (nil))
(call_insn/i 81 80 83 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7ffa22e69600 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) "main.c":18:23 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 83 81 84 11 (set (reg:DI 0 ax [119])
        (sign_extend:DI (reg:SI 0 ax [orig:88 _7 ] [88]))) "main.c":18:12 128 {*extendsidi2_rex64}
     (nil))
(insn 84 83 85 11 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 yearFrom+0 S8 A64])
        (reg:DI 0 ax [119])) "main.c":18:12 66 {*movdi_internal}
     (nil))
(insn 85 84 86 11 (set (reg/f:DI 0 ax [120])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [12 argv+0 S8 A64])) "main.c":19:30 66 {*movdi_internal}
     (nil))
(insn 86 85 87 11 (parallel [
            (set (reg/f:DI 0 ax [orig:89 _8 ] [89])
                (plus:DI (reg/f:DI 0 ax [120])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":19:30 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -80 [0xffffffffffffffb0])) [12 argv+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 87 86 164 11 (set (reg:DI 1 dx [orig:108 _54 ] [108])
        (reg/f:DI 0 ax [orig:89 _8 ] [89])) "main.c":19:21 66 {*movdi_internal}
     (nil))
(insn 164 87 88 11 (set (reg:DI 2 cx [orig:109 _55 ] [109])
        (reg:DI 1 dx [orig:108 _54 ] [108])) "main.c":19:21 66 {*movdi_internal}
     (nil))
(insn 88 164 89 11 (parallel [
            (set (reg:DI 2 cx [orig:109 _55 ] [109])
                (lshiftrt:DI (reg:DI 2 cx [orig:109 _55 ] [109])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":19:21 566 {*lshrdi3_1}
     (nil))
(insn 89 88 91 11 (parallel [
            (set (reg:DI 2 cx [orig:110 _56 ] [110])
                (plus:DI (reg:DI 2 cx [orig:109 _55 ] [109])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":19:21 191 {*adddi_1}
     (nil))
(insn 91 89 92 11 (set (reg:QI 2 cx [orig:112 _58 ] [112])
        (mem:QI (reg/f:DI 2 cx [orig:111 _57 ] [111]) [7 *_57+0 S1 A8])) "main.c":19:21 69 {*movqi_internal}
     (nil))
(insn 92 91 93 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:112 _58 ] [112])
            (const_int 0 [0]))) "main.c":19:21 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 93 92 94 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 98)
            (pc))) "main.c":19:21 659 {*jcc}
     (nil)
 -> 98)
;;  succ:       13 [100.0% (guessed)] 
;;              12 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89 108

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 [0.0% (guessed)]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 108
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 108
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 94 93 95 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 12 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:108 _54 ] [108])) "main.c":19:21 66 {*movdi_internal}
     (nil))
(call_insn 96 95 97 12 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":19:21 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 97 96 98)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 1, flags: (RTL, MODIFIED)
;;  pred:       11 [100.0% (guessed)] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 90 91 92 113 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137
(code_label 98 97 99 13 7 (nil) [1 uses])
(note 99 98 100 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 13 (set (reg/f:DI 0 ax [orig:90 _9 ] [90])
        (mem/f:DI (reg/f:DI 0 ax [orig:89 _8 ] [89]) [3 *_8+0 S8 A64])) "main.c":19:21 66 {*movdi_internal}
     (nil))
(insn 101 100 102 13 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 _9 ] [90])) "main.c":19:21 66 {*movdi_internal}
     (nil))
(call_insn/i 102 101 104 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7ffa22e69600 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) "main.c":19:21 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 104 102 105 13 (set (reg:DI 0 ax [121])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _10 ] [91]))) "main.c":19:12 128 {*extendsidi2_rex64}
     (nil))
(insn 105 104 106 13 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 yearTo+0 S8 A64])
        (reg:DI 0 ax [121])) "main.c":19:12 66 {*movdi_internal}
     (nil))
(insn 106 105 107 13 (set (reg:DI 1 dx [122])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 yearTo+0 S8 A64])) "main.c":20:22 66 {*movdi_internal}
     (nil))
(insn 107 106 108 13 (set (reg:DI 0 ax [123])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 yearFrom+0 S8 A64])) "main.c":20:22 66 {*movdi_internal}
     (nil))
(insn 108 107 109 13 (set (reg:DI 4 si)
        (reg:DI 1 dx [122])) "main.c":20:22 66 {*movdi_internal}
     (nil))
(insn 109 108 110 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [123])) "main.c":20:22 66 {*movdi_internal}
     (nil))
(call_insn 110 109 112 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("newQuery") [flags 0x41]  <function_decl 0x7ffa22afeb00 newQuery>) [0 newQuery S1 A8])
            (const_int 0 [0]))) "main.c":20:22 677 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 112 110 113 13 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 query+0 S8 A64])
        (reg:DI 0 ax [124])) "main.c":20:22 66 {*movdi_internal}
     (nil))
(insn 113 112 114 13 (set (reg:DI 0 ax [125])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [10 fSensor+0 S8 A64])) "main.c":21:25 66 {*movdi_internal}
     (nil))
(insn 114 113 115 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [125])) "main.c":21:25 66 {*movdi_internal}
     (nil))
(call_insn 115 114 117 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("createSensorV") [flags 0x3]  <function_decl 0x7ffa22b09200 createSensorV>) [0 createSensorV S1 A8])
            (const_int 0 [0]))) "main.c":21:25 677 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 117 115 118 13 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 vectorS+0 S8 A64])
        (reg:DI 0 ax [126])) "main.c":21:25 66 {*movdi_internal}
     (nil))
(insn 118 117 119 13 (set (reg:DI 1 dx [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 vectorS+0 S8 A64])) "main.c":22:5 66 {*movdi_internal}
     (nil))
(insn 119 118 120 13 (set (reg:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 query+0 S8 A64])) "main.c":22:5 66 {*movdi_internal}
     (nil))
(insn 120 119 121 13 (set (reg:DI 4 si)
        (reg:DI 1 dx [127])) "main.c":22:5 66 {*movdi_internal}
     (nil))
(insn 121 120 122 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [128])) "main.c":22:5 66 {*movdi_internal}
     (nil))
(call_insn 122 121 123 13 (call (mem:QI (symbol_ref:DI ("insertVector") [flags 0x41]  <function_decl 0x7ffa22afe700 insertVector>) [0 insertVector S1 A8])
        (const_int 0 [0])) "main.c":22:5 666 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 123 122 124 13 (set (reg:DI 1 dx [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 query+0 S8 A64])) "main.c":23:21 66 {*movdi_internal}
     (nil))
(insn 124 123 125 13 (set (reg:DI 0 ax [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [10 fReadings+0 S8 A64])) "main.c":23:21 66 {*movdi_internal}
     (nil))
(insn 125 124 126 13 (set (reg:DI 4 si)
        (reg:DI 1 dx [129])) "main.c":23:21 66 {*movdi_internal}
     (nil))
(insn 126 125 127 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [130])) "main.c":23:21 66 {*movdi_internal}
     (nil))
(call_insn 127 126 129 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("createYearL") [flags 0x3]  <function_decl 0x7ffa22b09100 createYearL>) [0 createYearL S1 A8])
            (const_int 0 [0]))) "main.c":23:21 677 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 129 127 130 13 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])
        (reg:DI 0 ax [131])) "main.c":23:21 66 {*movdi_internal}
     (nil))
(insn 130 129 131 13 (set (reg:DI 1 dx [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":24:5 66 {*movdi_internal}
     (nil))
(insn 131 130 132 13 (set (reg:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 query+0 S8 A64])) "main.c":24:5 66 {*movdi_internal}
     (nil))
(insn 132 131 133 13 (set (reg:DI 4 si)
        (reg:DI 1 dx [132])) "main.c":24:5 66 {*movdi_internal}
     (nil))
(insn 133 132 134 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [133])) "main.c":24:5 66 {*movdi_internal}
     (nil))
(call_insn 134 133 135 13 (call (mem:QI (symbol_ref:DI ("insertYearL") [flags 0x41]  <function_decl 0x7ffa22afea00 insertYearL>) [0 insertYearL S1 A8])
        (const_int 0 [0])) "main.c":24:5 666 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 135 134 136 13 (set (reg:DI 0 ax [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 query+0 S8 A64])) "main.c":25:5 66 {*movdi_internal}
     (nil))
(insn 136 135 137 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [134])) "main.c":25:5 66 {*movdi_internal}
     (nil))
(call_insn 137 136 138 13 (call (mem:QI (symbol_ref:DI ("makeSenL") [flags 0x41]  <function_decl 0x7ffa22afef00 makeSenL>) [0 makeSenL S1 A8])
        (const_int 0 [0])) "main.c":25:5 666 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 138 137 139 13 (set (reg:DI 0 ax [135])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 query+0 S8 A64])) "main.c":26:5 66 {*movdi_internal}
     (nil))
(insn 139 138 140 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [135])) "main.c":26:5 66 {*movdi_internal}
     (nil))
(call_insn 140 139 141 13 (call (mem:QI (symbol_ref:DI ("freeQuery") [flags 0x41]  <function_decl 0x7ffa22afed00 freeQuery>) [0 freeQuery S1 A8])
        (const_int 0 [0])) "main.c":26:5 666 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 141 140 142 13 (set (reg:DI 0 ax [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [10 fReadings+0 S8 A64])) "main.c":27:5 66 {*movdi_internal}
     (nil))
(insn 142 141 143 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [136])) "main.c":27:5 66 {*movdi_internal}
     (nil))
(call_insn 143 142 144 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7ffa22e2bc00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) "main.c":27:5 677 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 144 143 145 13 (set (reg:DI 0 ax [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [10 fSensor+0 S8 A64])) "main.c":28:5 66 {*movdi_internal}
     (nil))
(insn 145 144 146 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [137])) "main.c":28:5 66 {*movdi_internal}
     (nil))
(call_insn 146 145 147 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7ffa22e2bc00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) "main.c":28:5 677 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 147 146 155 13 (set (reg:SI 0 ax [orig:92 _31 ] [92])
        (const_int 0 [0])) "main.c":29:12 67 {*movsi_internal}
     (nil))
(insn 155 147 157 13 (use (reg/i:SI 0 ax)) "main.c":30:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 157 155 0 NOTE_INSN_DELETED)

;; Function createSensorV (createSensorV, funcdef_no=1, decl_uid=3399, cgraph_uid=2, symbol_order=1)

      Creating newreg=227
Removing SCRATCH in insn #40 (nop 2)
rescanning insn with uid = 40.
      Creating newreg=228
Removing SCRATCH in insn #373 (nop 3)
rescanning insn with uid = 373.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=400, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=336, prev_offset=0)
Can eliminate 19 to 6 (offset=-48, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 38:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 2:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) ?mr {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 6:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpdi_ccno_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 12:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 19:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=229 from oldreg=178, assigning class GENERAL_REGS to r229
   19: {r229:DI=r229:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  398: r229:DI=r173:DI
    Inserting insn reload after:
  399: r178:DI=r229:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) m  (1) re {*movsi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =m  (1) m  (2) =&r {stack_protect_set_di}
      Change to class INDEX_REGS for r227
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 43:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 44:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 47:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 51:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 60:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 72:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 73:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 77:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 86:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 87:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 88:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 91:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 99:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 106:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 108:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=230 from oldreg=122, assigning class GENERAL_REGS to r230
  108: {r230:DI=r230:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  400: r230:DI=r121:DI
    Inserting insn reload after:
  401: r122:DI=r230:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 109:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 111:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 120:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 128:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 129:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 130
	 Choosing alt 0 in insn 130:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 131:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 133:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=231 from oldreg=127, assigning class GENERAL_REGS to r231
  133: {r231:DI=r231:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  402: r231:DI=r126:DI
    Inserting insn reload after:
  403: r127:DI=r231:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 134:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 136:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 146:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 147:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 154:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 155:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 161:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 163:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=232 from oldreg=132, assigning class GENERAL_REGS to r232
  163: {r232:DI=r232:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  404: r232:DI=r131:DI
    Inserting insn reload after:
  405: r132:DI=r232:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 164:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 166:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 175:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 176:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 183:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 184:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 185
	 Choosing alt 0 in insn 185:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 186:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 188:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=233 from oldreg=137, assigning class GENERAL_REGS to r233
  188: {r233:DI=r233:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  406: r233:DI=r136:DI
    Inserting insn reload after:
  407: r137:DI=r233:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 189:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 191:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 200:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 204:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 212:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 219:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 220:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 221
	 Choosing alt 0 in insn 221:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 222:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 224:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=234 from oldreg=142, assigning class GENERAL_REGS to r234
  224: {r234:DI=r234:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  408: r234:DI=r141:DI
    Inserting insn reload after:
  409: r142:DI=r234:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 225:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 227:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 236:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 237:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 241:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 248:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 249:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 251:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 253:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=235 from oldreg=147, assigning class GENERAL_REGS to r235
  253: {r235:DI=r235:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  410: r235:DI=r146:DI
    Inserting insn reload after:
  411: r147:DI=r235:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 254:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 256:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =qm {*setcc_qi}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 263
	 Choosing alt 0 in insn 263:  (0) =qm  (1) %0  (2) qn {*andqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 272:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 273:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 274:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 277:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 278:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 285:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 286:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 288:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 289:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=236 from oldreg=155, assigning class GENERAL_REGS to r236
  289: {r236:DI=r236:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  412: r236:DI=r154:DI
    Inserting insn reload after:
  413: r155:DI=r236:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 290:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 292:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =qm {*setcc_qi}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=17,losers=2 -- refuse
            alt=3: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 295:  (0) =r  (1) %0  (2) Z {*anddi_1}
      Creating newreg=237 from oldreg=160, assigning class GENERAL_REGS to r237
  295: {r237:DI=r237:DI&0x7;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  414: r237:DI=r154:DI
    Inserting insn reload after:
  415: r160:DI=r237:DI

            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 296:  (0) R  (1) R {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =qm {*setcc_qi}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 299
	 Choosing alt 0 in insn 299:  (0) =qm  (1) %0  (2) qn {*andqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 300:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 304:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 308:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=16,losers=2,rld_nregs=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 309:  (0) q  (1) m {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 310:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 312:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=238 from oldreg=165, assigning class GENERAL_REGS to r238
  312: {r238:DI=r238:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  416: r238:DI=r164:DI
    Inserting insn reload after:
  417: r165:DI=r238:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 313:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 315:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 316:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 320:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) =qm {*setcc_qi}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 322
	 Choosing alt 0 in insn 322:  (0) =qm  (1) %0  (2) qn {*andqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 323:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 327:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=15,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=4,overall=21,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 331:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 332:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 333:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 336:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 340:  (0) ?mr {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 343:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 346:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 347:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 351:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 354:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 358:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 363:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 366:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 26:  (0) m  (1) re {*movdi_internal}
            Staticly defined alt reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=3 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=15,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
	 Choosing alt 1 in insn 27:  (0) o  (1) re {*movti_internal}
      Creating newreg=239, assigning class GENERAL_REGS to r239
   27: [r178:DI+0x7fff8000]=r239:TI
    Inserting insn reload before:
  418: r239:TI=<0xf5f5f5f5f5f5f5f5,0xf5f5f5f5f5f5f5f5>

            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (0) =!r  (1) riFo {*movti_internal}
      Change to class INDEX_REGS for r239
            Staticly defined alt reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=3 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=15,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
	 Choosing alt 1 in insn 28:  (0) o  (1) re {*movti_internal}
      Creating newreg=240, assigning class GENERAL_REGS to r240
   28: [r178:DI+0x7fff8010]=r240:TI
      REG_DEAD r178:DI
    Inserting insn reload before:
  419: r240:TI=<0xf5f5f5f5f5f5f5f5,0xf5f5f5f5f5f5f5f5>

            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 419:  (0) =!r  (1) riFo {*movti_internal}
      Change to class INDEX_REGS for r240
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 30:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 35:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 373:  (1) m  (2) m  (3) =&r {stack_protect_test_di}
      Change to class INDEX_REGS for r228
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 375:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3 4
EBB 5 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29 30
EBB 31
EBB 32 33 34
    [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
      Creating newreg=241 from oldreg=239, assigning class INDEX_REGS to invariant inheritance r241
  418: r239:TI=<0xf5f5f5f5f5f5f5f5,0xf5f5f5f5f5f5f5f5>
    Add invariant inheritance<-original after:
  420: r241:TI=r239:TI

  419: r240:TI=<0xf5f5f5f5f5f5f5f5,0xf5f5f5f5f5f5f5f5>
    Changing reload<-inheritance after:
  421: r240:TI=r241:TI

deleting insn with uid = 419.
    Invariant inheritance reuse change 241 (bb34):
  419: NOTE_INSN_DELETED
	  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
EBB 35
EBB 36 37
EBB 38

********** Pseudo live ranges #1: **********

  BB 6
   Insn 55: point = 0, n_alt = 0
   Insn 54: point = 0, n_alt = 0
   Insn 53: point = 0, n_alt = 0
   Insn 52: point = 0, n_alt = 0
   Insn 51: point = 0, n_alt = 4
  BB 11
   Insn 116: point = 0, n_alt = 0
   Insn 115: point = 0, n_alt = -2
  BB 13
   Insn 141: point = 2, n_alt = 0
   Insn 140: point = 2, n_alt = -2
  BB 15
   Insn 171: point = 4, n_alt = 0
   Insn 170: point = 4, n_alt = -2
  BB 17
   Insn 196: point = 6, n_alt = 0
   Insn 195: point = 6, n_alt = -2
  BB 19
   Insn 208: point = 8, n_alt = 0
   Insn 207: point = 8, n_alt = 0
   Insn 206: point = 8, n_alt = 0
   Insn 205: point = 8, n_alt = 0
   Insn 204: point = 8, n_alt = 4
  BB 21
   Insn 232: point = 8, n_alt = 0
   Insn 231: point = 8, n_alt = -2
  BB 23
   Insn 268: point = 10, n_alt = 0
   Insn 267: point = 10, n_alt = -2
  BB 25
   Insn 304: point = 12, n_alt = 0
   Insn 303: point = 12, n_alt = -2
  BB 27
   Insn 327: point = 14, n_alt = 0
   Insn 326: point = 14, n_alt = -2
  BB 37
   Insn 375: point = 16, n_alt = 0
  BB 38
   Insn 379: point = 16, n_alt = -1
   Insn 378: point = 16, n_alt = -2
  BB 36
   Insn 374: point = 18, n_alt = -1
   Insn 373: point = 18, n_alt = 0
  BB 34
   Insn 395: point = 21, n_alt = -1
   Insn 30: point = 21, n_alt = 8
   Insn 29: point = 22, n_alt = 3
   Insn 28: point = 24, n_alt = 1
   Insn 421: point = 25, n_alt = -1
	   Creating copy r240<-r241@1000
   Insn 27: point = 27, n_alt = 1
   Insn 420: point = 28, n_alt = -1
	   Creating copy r239->r241@1000
   Insn 418: point = 29, n_alt = 0
   Insn 26: point = 30, n_alt = 5
  BB 35
   Insn 36: point = 31, n_alt = 1
   Insn 35: point = 32, n_alt = 5
   Insn 34: point = 32, n_alt = 1
  BB 33
   Insn 25: point = 33, n_alt = -1
   Insn 24: point = 33, n_alt = 0
   Insn 369: point = 34, n_alt = -2
   Insn 366: point = 36, n_alt = 3
  BB 32
   Insn 364: point = 38, n_alt = -1
   Insn 363: point = 38, n_alt = 0
   Insn 361: point = 39, n_alt = -2
   Insn 360: point = 40, n_alt = 0
   Insn 359: point = 40, n_alt = -2
   Insn 358: point = 41, n_alt = 3
  BB 7
   Insn 389: point = 43, n_alt = -1
   Insn 64: point = 43, n_alt = 0
   Insn 63: point = 43, n_alt = -2
   Insn 62: point = 44, n_alt = 0
   Insn 61: point = 44, n_alt = -2
   Insn 60: point = 45, n_alt = 3
   Insn 59: point = 46, n_alt = 3
  BB 5
   Insn 49: point = 48, n_alt = -1
   Insn 48: point = 48, n_alt = 1
   Insn 47: point = 48, n_alt = 5
   Insn 46: point = 49, n_alt = -2
   Insn 45: point = 50, n_alt = 0
   Insn 44: point = 50, n_alt = 2
   Insn 43: point = 50, n_alt = 2
   Insn 40: point = 50, n_alt = 0
   Insn 23: point = 52, n_alt = 1
   Insn 22: point = 52, n_alt = 1
   Insn 21: point = 52, n_alt = 1
   Insn 20: point = 52, n_alt = 1
   Insn 399: point = 52, n_alt = -2
	Hard reg 40 is preferable by r229 with profit 1000
   Insn 19: point = 54, n_alt = 0
   Insn 398: point = 55, n_alt = -2
	Hard reg 40 is preferable by r229 with profit 1000
	Hard reg 3 is preferable by r229 with profit 1000
   Insn 18: point = 56, n_alt = 5
   Insn 17: point = 57, n_alt = 4
   Insn 16: point = 58, n_alt = 5
   Insn 15: point = 59, n_alt = 4
   Insn 14: point = 60, n_alt = 5
   Insn 13: point = 60, n_alt = -2
   Insn 12: point = 62, n_alt = 3
  BB 4
   Insn 10: point = 64, n_alt = -2
  BB 3
   Insn 9: point = 66, n_alt = -1
   Insn 8: point = 66, n_alt = 0
   Insn 7: point = 66, n_alt = 0
   Insn 6: point = 66, n_alt = 2
  BB 2
   Insn 5: point = 67, n_alt = -1
   Insn 4: point = 67, n_alt = 1
   Insn 3: point = 67, n_alt = -2
   Insn 2: point = 68, n_alt = 3
   Insn 38: point = 69, n_alt = 5
  BB 31
   Insn 355: point = 69, n_alt = -1
   Insn 354: point = 69, n_alt = 0
   Insn 352: point = 70, n_alt = -2
   Insn 351: point = 71, n_alt = 0
   Insn 350: point = 71, n_alt = -2
   Insn 349: point = 72, n_alt = 0
   Insn 348: point = 72, n_alt = -2
   Insn 347: point = 73, n_alt = 3
   Insn 346: point = 74, n_alt = 3
  BB 8
   Insn 391: point = 76, n_alt = -1
   Insn 68: point = 76, n_alt = 1
  BB 30
   Insn 343: point = 77, n_alt = 1
  BB 29
   Insn 341: point = 78, n_alt = -1
   Insn 340: point = 78, n_alt = 1
  BB 9
   Insn 393: point = 79, n_alt = -1
   Insn 77: point = 79, n_alt = 5
   Insn 76: point = 80, n_alt = -2
   Insn 75: point = 81, n_alt = 0
   Insn 74: point = 81, n_alt = -2
   Insn 73: point = 82, n_alt = 4
   Insn 72: point = 82, n_alt = 3
  BB 28
   Insn 336: point = 84, n_alt = 5
   Insn 335: point = 85, n_alt = -2
   Insn 334: point = 86, n_alt = 0
   Insn 333: point = 86, n_alt = 2
   Insn 332: point = 86, n_alt = 4
   Insn 331: point = 86, n_alt = 8
  BB 26
   Insn 324: point = 88, n_alt = -1
   Insn 323: point = 88, n_alt = 0
   Insn 322: point = 89, n_alt = 0
   Insn 321: point = 91, n_alt = 0
   Insn 320: point = 92, n_alt = 0
   Insn 317: point = 93, n_alt = 0
   Insn 316: point = 94, n_alt = 0
   Insn 315: point = 94, n_alt = 4
   Insn 314: point = 96, n_alt = -2
   Insn 313: point = 98, n_alt = 0
   Insn 417: point = 100, n_alt = -2
	Hard reg 0 is preferable by r238 with profit 1000
   Insn 312: point = 102, n_alt = 0
   Insn 416: point = 103, n_alt = -2
	Hard reg 0 is preferable by r238 with profit 1000
	Hard reg 2 is preferable by r238 with profit 1000
   Insn 311: point = 104, n_alt = -2
   Insn 310: point = 106, n_alt = 3
   Insn 309: point = 107, n_alt = 4
   Insn 308: point = 109, n_alt = 3
  BB 24
   Insn 301: point = 111, n_alt = -1
   Insn 300: point = 111, n_alt = 0
   Insn 299: point = 112, n_alt = 0
   Insn 298: point = 114, n_alt = 0
   Insn 297: point = 115, n_alt = 0
   Insn 296: point = 116, n_alt = 1
   Insn 415: point = 118, n_alt = -2
	Hard reg 5 is preferable by r237 with profit 1000
   Insn 295: point = 120, n_alt = 0
   Insn 414: point = 121, n_alt = -2
	Hard reg 5 is preferable by r237 with profit 1000
	Hard reg 0 is preferable by r237 with profit 1000
   Insn 294: point = 122, n_alt = 0
   Insn 293: point = 123, n_alt = 0
   Insn 292: point = 123, n_alt = 4
   Insn 291: point = 125, n_alt = -2
   Insn 290: point = 127, n_alt = 0
   Insn 413: point = 129, n_alt = -2
	Hard reg 2 is preferable by r236 with profit 1000
   Insn 289: point = 131, n_alt = 0
   Insn 412: point = 132, n_alt = -2
	Hard reg 2 is preferable by r236 with profit 1000
	Hard reg 0 is preferable by r236 with profit 1000
   Insn 288: point = 133, n_alt = 3
   Insn 287: point = 134, n_alt = 0
   Insn 286: point = 136, n_alt = 3
   Insn 285: point = 137, n_alt = 3
   Insn 284: point = 139, n_alt = -2
   Insn 283: point = 141, n_alt = -2
   Insn 282: point = 143, n_alt = 0
   Insn 281: point = 145, n_alt = 0
   Insn 280: point = 147, n_alt = 0
   Insn 279: point = 148, n_alt = -2
   Insn 278: point = 149, n_alt = 3
   Insn 277: point = 150, n_alt = 5
   Insn 276: point = 151, n_alt = -2
   Insn 275: point = 152, n_alt = 0
   Insn 274: point = 152, n_alt = 2
   Insn 273: point = 152, n_alt = 4
   Insn 272: point = 152, n_alt = 8
  BB 22
   Insn 265: point = 154, n_alt = -1
   Insn 264: point = 154, n_alt = 0
   Insn 263: point = 155, n_alt = 0
   Insn 262: point = 157, n_alt = 0
   Insn 261: point = 158, n_alt = 0
   Insn 258: point = 159, n_alt = 0
   Insn 257: point = 160, n_alt = 0
   Insn 256: point = 160, n_alt = 4
   Insn 255: point = 162, n_alt = -2
   Insn 254: point = 164, n_alt = 0
   Insn 411: point = 166, n_alt = -2
	Hard reg 0 is preferable by r235 with profit 1000
   Insn 253: point = 168, n_alt = 0
   Insn 410: point = 169, n_alt = -2
	Hard reg 0 is preferable by r235 with profit 1000
	Hard reg 2 is preferable by r235 with profit 1000
   Insn 252: point = 170, n_alt = -2
   Insn 251: point = 172, n_alt = 3
   Insn 250: point = 173, n_alt = 0
   Insn 249: point = 175, n_alt = 3
   Insn 248: point = 176, n_alt = 3
   Insn 247: point = 178, n_alt = -2
   Insn 246: point = 180, n_alt = -2
   Insn 245: point = 182, n_alt = 0
   Insn 244: point = 184, n_alt = 0
   Insn 243: point = 186, n_alt = 0
   Insn 242: point = 187, n_alt = -2
   Insn 241: point = 188, n_alt = 3
   Insn 240: point = 189, n_alt = 0
   Insn 239: point = 189, n_alt = -2
   Insn 238: point = 190, n_alt = -2
   Insn 237: point = 191, n_alt = 3
   Insn 236: point = 192, n_alt = 3
  BB 20
   Insn 229: point = 195, n_alt = -1
   Insn 228: point = 195, n_alt = 0
   Insn 227: point = 196, n_alt = 4
   Insn 226: point = 198, n_alt = -2
   Insn 225: point = 200, n_alt = 0
   Insn 409: point = 202, n_alt = -2
	Hard reg 2 is preferable by r234 with profit 1000
   Insn 224: point = 204, n_alt = 0
   Insn 408: point = 205, n_alt = -2
	Hard reg 2 is preferable by r234 with profit 1000
	Hard reg 1 is preferable by r234 with profit 1000
   Insn 223: point = 206, n_alt = -2
   Insn 222: point = 208, n_alt = 3
   Insn 221: point = 209, n_alt = 0
   Insn 220: point = 211, n_alt = 3
   Insn 219: point = 212, n_alt = 3
   Insn 218: point = 214, n_alt = -2
   Insn 217: point = 216, n_alt = -2
   Insn 216: point = 218, n_alt = 0
   Insn 215: point = 220, n_alt = 0
   Insn 214: point = 222, n_alt = 0
   Insn 213: point = 223, n_alt = -2
   Insn 212: point = 224, n_alt = 3
  BB 18
   Insn 202: point = 226, n_alt = -1
   Insn 201: point = 226, n_alt = 0
   Insn 200: point = 227, n_alt = 3
  BB 16
   Insn 193: point = 230, n_alt = -1
   Insn 192: point = 230, n_alt = 0
   Insn 191: point = 231, n_alt = 4
   Insn 190: point = 233, n_alt = -2
   Insn 189: point = 235, n_alt = 0
   Insn 407: point = 237, n_alt = -2
	Hard reg 2 is preferable by r233 with profit 1000
   Insn 188: point = 239, n_alt = 0
   Insn 406: point = 240, n_alt = -2
	Hard reg 2 is preferable by r233 with profit 1000
	Hard reg 1 is preferable by r233 with profit 1000
   Insn 187: point = 241, n_alt = -2
   Insn 186: point = 243, n_alt = 3
   Insn 185: point = 244, n_alt = 0
   Insn 184: point = 246, n_alt = 3
   Insn 183: point = 247, n_alt = 3
   Insn 182: point = 249, n_alt = -2
   Insn 181: point = 251, n_alt = -2
   Insn 180: point = 253, n_alt = 0
   Insn 179: point = 255, n_alt = 0
   Insn 178: point = 257, n_alt = 0
   Insn 177: point = 258, n_alt = -2
   Insn 176: point = 259, n_alt = 3
   Insn 175: point = 260, n_alt = 5
  BB 14
   Insn 168: point = 262, n_alt = -1
   Insn 167: point = 262, n_alt = 0
   Insn 166: point = 263, n_alt = 4
   Insn 165: point = 265, n_alt = -2
   Insn 164: point = 267, n_alt = 0
   Insn 405: point = 269, n_alt = -2
	Hard reg 1 is preferable by r232 with profit 1000
   Insn 163: point = 271, n_alt = 0
   Insn 404: point = 272, n_alt = -2
	Hard reg 1 is preferable by r232 with profit 1000
	Hard reg 0 is preferable by r232 with profit 1000
   Insn 162: point = 273, n_alt = -2
   Insn 161: point = 275, n_alt = 3
   Insn 160: point = 276, n_alt = -2
   Insn 159: point = 278, n_alt = -2
   Insn 158: point = 279, n_alt = 0
   Insn 157: point = 279, n_alt = -2
   Insn 156: point = 280, n_alt = 3
   Insn 155: point = 282, n_alt = 3
   Insn 154: point = 283, n_alt = 3
   Insn 153: point = 285, n_alt = -2
   Insn 152: point = 287, n_alt = -2
   Insn 151: point = 289, n_alt = 0
   Insn 150: point = 291, n_alt = 0
   Insn 149: point = 293, n_alt = 0
   Insn 148: point = 294, n_alt = -2
   Insn 147: point = 295, n_alt = 3
   Insn 146: point = 296, n_alt = 3
   Insn 145: point = 298, n_alt = 3
  BB 12
   Insn 138: point = 301, n_alt = -1
   Insn 137: point = 301, n_alt = 0
   Insn 136: point = 302, n_alt = 4
   Insn 135: point = 304, n_alt = -2
   Insn 134: point = 306, n_alt = 0
   Insn 403: point = 308, n_alt = -2
	Hard reg 2 is preferable by r231 with profit 1000
   Insn 133: point = 310, n_alt = 0
   Insn 402: point = 311, n_alt = -2
	Hard reg 2 is preferable by r231 with profit 1000
	Hard reg 1 is preferable by r231 with profit 1000
   Insn 132: point = 312, n_alt = -2
   Insn 131: point = 314, n_alt = 3
   Insn 130: point = 315, n_alt = 0
   Insn 129: point = 317, n_alt = 3
   Insn 128: point = 318, n_alt = 3
   Insn 127: point = 320, n_alt = -2
   Insn 126: point = 322, n_alt = -2
   Insn 125: point = 324, n_alt = 0
   Insn 124: point = 326, n_alt = 0
   Insn 123: point = 328, n_alt = 0
   Insn 122: point = 329, n_alt = -2
   Insn 121: point = 330, n_alt = 3
   Insn 120: point = 331, n_alt = 5
  BB 10
   Insn 113: point = 333, n_alt = -1
   Insn 112: point = 333, n_alt = 0
   Insn 111: point = 334, n_alt = 4
   Insn 110: point = 336, n_alt = -2
   Insn 109: point = 338, n_alt = 0
   Insn 401: point = 340, n_alt = -2
	Hard reg 2 is preferable by r230 with profit 1000
   Insn 108: point = 342, n_alt = 0
   Insn 400: point = 343, n_alt = -2
	Hard reg 2 is preferable by r230 with profit 1000
	Hard reg 1 is preferable by r230 with profit 1000
   Insn 107: point = 344, n_alt = -2
   Insn 106: point = 346, n_alt = 3
   Insn 105: point = 347, n_alt = -2
   Insn 104: point = 348, n_alt = 0
   Insn 103: point = 348, n_alt = -2
   Insn 102: point = 349, n_alt = 3
   Insn 101: point = 350, n_alt = 3
   Insn 100: point = 352, n_alt = 3
   Insn 99: point = 353, n_alt = 3
   Insn 98: point = 355, n_alt = -2
   Insn 97: point = 357, n_alt = -2
   Insn 96: point = 359, n_alt = 0
   Insn 95: point = 361, n_alt = 0
   Insn 94: point = 363, n_alt = 0
   Insn 93: point = 364, n_alt = -2
   Insn 92: point = 365, n_alt = 3
   Insn 91: point = 366, n_alt = 5
   Insn 90: point = 367, n_alt = -2
   Insn 89: point = 368, n_alt = 0
   Insn 88: point = 368, n_alt = 2
   Insn 87: point = 368, n_alt = 4
   Insn 86: point = 368, n_alt = 5
   Insn 85: point = 369, n_alt = 0
   Insn 84: point = 371, n_alt = -2
   Insn 83: point = 372, n_alt = 0
   Insn 82: point = 372, n_alt = -2
   Insn 81: point = 373, n_alt = 3
 r82: [370..371]
 r83: [354..355]
 r84: [351..353]
 r85: [331..350]
 r86: [331..347]
 r87: [319..320]
 r88: [316..318]
 r89: [299..315]
 r90: [297..298]
 r91: [279..296]
 r92: [284..285]
 r93: [281..283]
 r94: [260..280]
 r95: [260..276]
 r96: [248..249]
 r97: [245..247]
 r98: [228..244]
 r99: [226..227]
 r100: [213..214]
 r101: [210..212]
 r102: [193..209]
 r103: [189..192]
 r104: [177..178]
 r105: [174..176]
 r106: [152..173]
 r107: [138..139]
 r108: [135..137]
 r109: [86..134]
 r110: [86..107]
 r111: [69..70]
 r112: [38..39]
 r113: [35..36]
 r114: [345..346]
 r115: [313..314]
 r116: [274..275]
 r117: [242..243]
 r118: [207..208]
 r119: [171..172]
 r120: [105..106]
 r121: [333..344] [0..1]
 r122: [339..340]
 r123: [337..338]
 r124: [335..336]
 r125: [333..334]
 r126: [301..312] [2..3]
 r127: [307..308]
 r128: [305..306]
 r129: [303..304]
 r130: [301..302]
 r131: [262..273] [4..5]
 r132: [268..269]
 r133: [266..267]
 r134: [264..265]
 r135: [262..263]
 r136: [230..241] [6..7]
 r137: [236..237]
 r138: [234..235]
 r139: [232..233]
 r140: [230..231]
 r141: [195..206] [8..9]
 r142: [201..202]
 r143: [199..200]
 r144: [197..198]
 r145: [195..196]
 r146: [154..170] [10..11]
 r147: [165..166]
 r148: [163..164]
 r149: [161..162]
 r150: [158..160]
 r151: [156..159]
 r152: [156..157]
 r153: [154..155]
 r154: [111..133] [12..13]
 r155: [128..129]
 r156: [126..127]
 r157: [124..125]
 r158: [115..123]
 r159: [113..122]
 r160: [117..118]
 r161: [115..116]
 r162: [113..114]
 r163: [111..112]
 r164: [88..104] [14..15]
 r165: [99..100]
 r166: [97..98]
 r167: [95..96]
 r168: [92..94]
 r169: [90..93]
 r170: [90..91]
 r171: [88..89]
 r172: [69..374] [38..60]
 r173: [66..374] [33..64] [23..30]
 r174: [69..374] [33..67]
 r175: [61..62]
 r176: [58..59]
 r177: [56..57]
 r178: [69..374] [24..52]
 r179: [21..22]
 r180: [16..34]
 r181: [48..49]
 r182: [44..46]
 r183: [43..45]
 r184: [81..82]
 r185: [79..80]
 r186: [372..373]
 r187: [368..369]
 r188: [366..367]
 r189: [362..365]
 r190: [360..364] [356..357]
 r191: [358..359]
 r192: [351..352]
 r193: [348..349]
 r194: [327..330]
 r195: [325..329] [321..322]
 r196: [323..324]
 r197: [316..317]
 r198: [292..295]
 r199: [290..294] [286..287]
 r200: [288..289]
 r201: [281..282]
 r202: [277..278]
 r203: [256..259]
 r204: [254..258] [250..251]
 r205: [252..253]
 r206: [245..246]
 r207: [221..224]
 r208: [219..223] [215..216]
 r209: [217..218]
 r210: [210..211]
 r211: [190..191]
 r212: [185..188]
 r213: [183..187] [179..180]
 r214: [181..182]
 r215: [174..175]
 r216: [150..151]
 r217: [146..149]
 r218: [144..148] [140..141]
 r219: [142..143]
 r220: [135..136]
 r221: [108..109]
 r222: [84..85]
 r223: [72..74]
 r224: [71..73]
 r225: [40..41]
 r227: [50..51]
 r228: [18..19]
 r229: [53..55]
 r230: [341..343]
 r231: [309..311]
 r232: [270..272]
 r233: [238..240]
 r234: [203..205]
 r235: [167..169]
 r236: [130..132]
 r237: [119..121]
 r238: [101..103]
 r239: [27..29]
 r240: [24..25]
 r241: [26..28]
Compressing live ranges: from 375 to 262 - 69%
Ranges after the compression:
 r82: [258..259]
 r83: [246..247]
 r84: [244..245]
 r85: [230..243]
 r86: [230..241]
 r87: [222..223]
 r88: [220..221]
 r89: [208..219]
 r90: [206..207]
 r91: [194..205]
 r92: [198..199]
 r93: [196..197]
 r94: [180..195]
 r95: [180..191]
 r96: [172..173]
 r97: [170..171]
 r98: [158..169]
 r99: [156..157]
 r100: [148..149]
 r101: [146..147]
 r102: [134..145]
 r103: [132..133]
 r104: [124..125]
 r105: [122..123]
 r106: [106..121]
 r107: [96..97]
 r108: [94..95]
 r109: [58..93]
 r110: [58..73]
 r111: [48..49]
 r112: [28..29]
 r113: [26..27]
 r114: [240..241]
 r115: [218..219]
 r116: [190..191]
 r117: [168..169]
 r118: [144..145]
 r119: [120..121]
 r120: [72..73]
 r121: [230..239] [0..1]
 r122: [236..237]
 r123: [234..235]
 r124: [232..233]
 r125: [230..231]
 r126: [208..217] [2..3]
 r127: [214..215]
 r128: [212..213]
 r129: [210..211]
 r130: [208..209]
 r131: [180..189] [4..5]
 r132: [186..187]
 r133: [184..185]
 r134: [182..183]
 r135: [180..181]
 r136: [158..167] [6..7]
 r137: [164..165]
 r138: [162..163]
 r139: [160..161]
 r140: [158..159]
 r141: [134..143] [8..9]
 r142: [140..141]
 r143: [138..139]
 r144: [136..137]
 r145: [134..135]
 r146: [106..119] [10..11]
 r147: [116..117]
 r148: [114..115]
 r149: [112..113]
 r150: [110..111]
 r151: [108..111]
 r152: [108..109]
 r153: [106..107]
 r154: [76..93] [12..13]
 r155: [90..91]
 r156: [88..89]
 r157: [86..87]
 r158: [80..85]
 r159: [78..85]
 r160: [82..83]
 r161: [80..81]
 r162: [78..79]
 r163: [76..77]
 r164: [58..71] [14..15]
 r165: [68..69]
 r166: [66..67]
 r167: [64..65]
 r168: [62..63]
 r169: [60..63]
 r170: [60..61]
 r171: [58..59]
 r172: [48..261] [28..43]
 r173: [20..261]
 r174: [24..261]
 r175: [44..45]
 r176: [42..43]
 r177: [40..41]
 r178: [48..261] [20..37]
 r179: [18..19]
 r180: [16..25]
 r181: [34..35]
 r182: [32..33]
 r183: [32..33]
 r184: [54..55]
 r185: [52..53]
 r186: [260..261]
 r187: [256..257]
 r188: [254..255]
 r189: [252..253]
 r190: [252..253] [248..249]
 r191: [250..251]
 r192: [244..245]
 r193: [242..243]
 r194: [228..229]
 r195: [228..229] [224..225]
 r196: [226..227]
 r197: [220..221]
 r198: [204..205]
 r199: [204..205] [200..201]
 r200: [202..203]
 r201: [196..197]
 r202: [192..193]
 r203: [178..179]
 r204: [178..179] [174..175]
 r205: [176..177]
 r206: [170..171]
 r207: [154..155]
 r208: [154..155] [150..151]
 r209: [152..153]
 r210: [146..147]
 r211: [132..133]
 r212: [130..131]
 r213: [130..131] [126..127]
 r214: [128..129]
 r215: [122..123]
 r216: [104..105]
 r217: [102..103]
 r218: [102..103] [98..99]
 r219: [100..101]
 r220: [94..95]
 r221: [74..75]
 r222: [56..57]
 r223: [50..51]
 r224: [50..51]
 r225: [30..31]
 r227: [36..37]
 r228: [16..17]
 r229: [38..39]
 r230: [238..239]
 r231: [216..217]
 r232: [188..189]
 r233: [166..167]
 r234: [142..143]
 r235: [118..119]
 r236: [92..93]
 r237: [84..85]
 r238: [70..71]
 r239: [22..23]
 r240: [20..21]
 r241: [22..23]

********** Assignment #1: **********

	 Assigning to 239 (cl=INDEX_REGS, orig=239, freq=3000, tfirst=239, tfreq=3000)...
	   Assign 4 to reload r239 (freq=3000)
	Hard reg 4 is preferable by r241 with profit 1000
	Hard reg 4 is preferable by r240 with profit 500
	 Assigning to 240 (cl=INDEX_REGS, orig=240, freq=2000, tfirst=239, tfreq=3000)...
	   Assign 4 to reload r240 (freq=2000)
	Hard reg 4 is preferable by r241 with profit 2000
	 Assigning to 241 (cl=INDEX_REGS, orig=239, freq=2000, tfirst=239, tfreq=3000)...
	   Assign 4 to inheritance r241 (freq=2000)
	 Assigning to 229 (cl=GENERAL_REGS, orig=178, freq=3000, tfirst=229, tfreq=3000)...
	   Assign 40 to reload r229 (freq=3000)
	 Assigning to 230 (cl=GENERAL_REGS, orig=122, freq=3000, tfirst=230, tfreq=3000)...
	   Assign 2 to reload r230 (freq=3000)
	 Assigning to 231 (cl=GENERAL_REGS, orig=127, freq=3000, tfirst=231, tfreq=3000)...
	   Assign 2 to reload r231 (freq=3000)
	 Assigning to 232 (cl=GENERAL_REGS, orig=132, freq=3000, tfirst=232, tfreq=3000)...
	   Assign 1 to reload r232 (freq=3000)
	 Assigning to 233 (cl=GENERAL_REGS, orig=137, freq=3000, tfirst=233, tfreq=3000)...
	   Assign 2 to reload r233 (freq=3000)
	 Assigning to 234 (cl=GENERAL_REGS, orig=142, freq=3000, tfirst=234, tfreq=3000)...
	   Assign 2 to reload r234 (freq=3000)
	 Assigning to 235 (cl=GENERAL_REGS, orig=147, freq=3000, tfirst=235, tfreq=3000)...
	   Assign 0 to reload r235 (freq=3000)
	 Assigning to 236 (cl=GENERAL_REGS, orig=155, freq=3000, tfirst=236, tfreq=3000)...
	   Assign 2 to reload r236 (freq=3000)
	 Assigning to 237 (cl=GENERAL_REGS, orig=160, freq=3000, tfirst=237, tfreq=3000)...
	   Assign 5 to reload r237 (freq=3000)
	 Assigning to 238 (cl=GENERAL_REGS, orig=165, freq=3000, tfirst=238, tfreq=3000)...
	   Assign 0 to reload r238 (freq=3000)
	 Assigning to 227 (cl=INDEX_REGS, orig=227, freq=1000, tfirst=227, tfreq=1000)...
	   Assign 0 to reload r227 (freq=1000)
	 Assigning to 228 (cl=INDEX_REGS, orig=228, freq=1000, tfirst=228, tfreq=1000)...
	   Assign 0 to reload r228 (freq=1000)

********** Undoing inheritance #1: **********

Inherit 1 out of 1 (100.00%)

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=400, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=336, prev_offset=0)
Can eliminate 19 to 6 (offset=-48, prev_offset=-48)
changing reg in insn 84
changing reg in insn 85
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 101
changing reg in insn 101
changing reg in insn 101
changing reg in insn 120
changing reg in insn 106
changing reg in insn 105
changing reg in insn 120
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 130
changing reg in insn 130
changing reg in insn 145
changing reg in insn 131
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 157
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 156
changing reg in insn 156
changing reg in insn 156
changing reg in insn 175
changing reg in insn 161
changing reg in insn 160
changing reg in insn 175
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 185
changing reg in insn 185
changing reg in insn 200
changing reg in insn 186
changing reg in insn 200
changing reg in insn 201
changing reg in insn 218
changing reg in insn 219
changing reg in insn 219
changing reg in insn 221
changing reg in insn 221
changing reg in insn 236
changing reg in insn 222
changing reg in insn 236
changing reg in insn 239
changing reg in insn 247
changing reg in insn 248
changing reg in insn 248
changing reg in insn 250
changing reg in insn 250
changing reg in insn 250
changing reg in insn 272
changing reg in insn 251
changing reg in insn 284
changing reg in insn 285
changing reg in insn 285
changing reg in insn 287
changing reg in insn 287
changing reg in insn 287
changing reg in insn 331
changing reg in insn 310
changing reg in insn 309
changing reg in insn 331
changing reg in insn 352
changing reg in insn 354
changing reg in insn 361
changing reg in insn 363
changing reg in insn 366
changing reg in insn 369
changing reg in insn 106
changing reg in insn 107
changing reg in insn 131
changing reg in insn 132
changing reg in insn 161
changing reg in insn 162
changing reg in insn 186
changing reg in insn 187
changing reg in insn 222
changing reg in insn 223
changing reg in insn 251
changing reg in insn 252
changing reg in insn 310
changing reg in insn 311
changing reg in insn 107
changing reg in insn 115
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 132
changing reg in insn 140
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 162
changing reg in insn 170
changing reg in insn 164
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 187
changing reg in insn 195
changing reg in insn 189
changing reg in insn 189
changing reg in insn 190
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 223
changing reg in insn 231
changing reg in insn 225
changing reg in insn 225
changing reg in insn 226
changing reg in insn 226
changing reg in insn 227
changing reg in insn 227
changing reg in insn 228
changing reg in insn 252
changing reg in insn 267
changing reg in insn 254
changing reg in insn 254
changing reg in insn 255
changing reg in insn 255
changing reg in insn 256
changing reg in insn 256
changing reg in insn 261
changing reg in insn 257
changing reg in insn 258
changing reg in insn 262
changing reg in insn 263
changing reg in insn 264
changing reg in insn 288
changing reg in insn 303
changing reg in insn 290
changing reg in insn 290
changing reg in insn 291
changing reg in insn 291
changing reg in insn 292
changing reg in insn 292
changing reg in insn 297
changing reg in insn 293
changing reg in insn 294
changing reg in insn 296
changing reg in insn 297
changing reg in insn 298
changing reg in insn 299
changing reg in insn 300
changing reg in insn 311
changing reg in insn 326
changing reg in insn 313
changing reg in insn 313
changing reg in insn 314
changing reg in insn 314
changing reg in insn 315
changing reg in insn 315
changing reg in insn 320
changing reg in insn 316
changing reg in insn 317
changing reg in insn 321
changing reg in insn 322
changing reg in insn 323
changing reg in insn 13
changing reg in insn 347
changing reg in insn 72
changing reg in insn 60
changing reg in insn 10
changing reg in insn 2
changing reg in insn 29
changing reg in insn 26
changing reg in insn 24
changing reg in insn 18
changing reg in insn 16
changing reg in insn 14
changing reg in insn 12
changing reg in insn 3
changing reg in insn 3
changing reg in insn 24
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 36
changing reg in insn 35
changing reg in insn 34
changing reg in insn 28
changing reg in insn 27
changing reg in insn 23
changing reg in insn 22
changing reg in insn 21
changing reg in insn 20
changing reg in insn 29
changing reg in insn 30
changing reg in insn 369
changing reg in insn 378
changing reg in insn 46
changing reg in insn 47
changing reg in insn 59
changing reg in insn 61
changing reg in insn 60
changing reg in insn 63
changing reg in insn 72
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 81
changing reg in insn 82
changing reg in insn 85
changing reg in insn 86
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 95
changing reg in insn 93
changing reg in insn 95
changing reg in insn 97
changing reg in insn 95
changing reg in insn 94
changing reg in insn 93
changing reg in insn 98
changing reg in insn 96
changing reg in insn 95
changing reg in insn 94
changing reg in insn 96
changing reg in insn 97
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 121
changing reg in insn 124
changing reg in insn 122
changing reg in insn 124
changing reg in insn 126
changing reg in insn 124
changing reg in insn 123
changing reg in insn 122
changing reg in insn 127
changing reg in insn 125
changing reg in insn 124
changing reg in insn 123
changing reg in insn 125
changing reg in insn 126
changing reg in insn 129
changing reg in insn 147
changing reg in insn 150
changing reg in insn 148
changing reg in insn 150
changing reg in insn 152
changing reg in insn 150
changing reg in insn 149
changing reg in insn 148
changing reg in insn 153
changing reg in insn 151
changing reg in insn 150
changing reg in insn 149
changing reg in insn 151
changing reg in insn 152
changing reg in insn 155
changing reg in insn 156
changing reg in insn 159
changing reg in insn 160
changing reg in insn 176
changing reg in insn 179
changing reg in insn 177
changing reg in insn 179
changing reg in insn 181
changing reg in insn 179
changing reg in insn 178
changing reg in insn 177
changing reg in insn 182
changing reg in insn 180
changing reg in insn 179
changing reg in insn 178
changing reg in insn 180
changing reg in insn 181
changing reg in insn 184
changing reg in insn 212
changing reg in insn 215
changing reg in insn 213
changing reg in insn 215
changing reg in insn 217
changing reg in insn 215
changing reg in insn 214
changing reg in insn 213
changing reg in insn 218
changing reg in insn 216
changing reg in insn 215
changing reg in insn 214
changing reg in insn 216
changing reg in insn 217
changing reg in insn 220
changing reg in insn 237
changing reg in insn 238
changing reg in insn 241
changing reg in insn 244
changing reg in insn 242
changing reg in insn 244
changing reg in insn 246
changing reg in insn 244
changing reg in insn 243
changing reg in insn 242
changing reg in insn 247
changing reg in insn 245
changing reg in insn 244
changing reg in insn 243
changing reg in insn 245
changing reg in insn 246
changing reg in insn 249
changing reg in insn 250
changing reg in insn 276
changing reg in insn 277
changing reg in insn 278
changing reg in insn 281
changing reg in insn 279
changing reg in insn 281
changing reg in insn 283
changing reg in insn 281
changing reg in insn 280
changing reg in insn 279
changing reg in insn 284
changing reg in insn 282
changing reg in insn 281
changing reg in insn 280
changing reg in insn 282
changing reg in insn 283
changing reg in insn 286
changing reg in insn 287
changing reg in insn 308
changing reg in insn 309
changing reg in insn 335
changing reg in insn 336
changing reg in insn 346
changing reg in insn 348
changing reg in insn 347
changing reg in insn 350
changing reg in insn 358
changing reg in insn 359
changing reg in insn 40
changing reg in insn 373
deleting insn with uid = 399.
deleting insn with uid = 46.
deleting insn with uid = 61.
deleting insn with uid = 76.
deleting insn with uid = 84.
deleting insn with uid = 90.
deleting insn with uid = 97.
deleting insn with uid = 98.
deleting insn with uid = 105.
deleting insn with uid = 107.
deleting insn with uid = 401.
deleting insn with uid = 110.
deleting insn with uid = 126.
deleting insn with uid = 127.
deleting insn with uid = 132.
deleting insn with uid = 403.
deleting insn with uid = 135.
deleting insn with uid = 152.
deleting insn with uid = 153.
deleting insn with uid = 159.
deleting insn with uid = 162.
deleting insn with uid = 405.
deleting insn with uid = 165.
deleting insn with uid = 181.
deleting insn with uid = 182.
deleting insn with uid = 187.
deleting insn with uid = 407.
deleting insn with uid = 190.
deleting insn with uid = 217.
deleting insn with uid = 218.
deleting insn with uid = 223.
deleting insn with uid = 409.
deleting insn with uid = 226.
deleting insn with uid = 246.
deleting insn with uid = 247.
deleting insn with uid = 411.
deleting insn with uid = 255.
deleting insn with uid = 276.
deleting insn with uid = 283.
deleting insn with uid = 284.
deleting insn with uid = 413.
deleting insn with uid = 291.
deleting insn with uid = 415.
deleting insn with uid = 296.
deleting insn with uid = 417.
deleting insn with uid = 314.
deleting insn with uid = 335.
deleting insn with uid = 348.
deleting insn with uid = 352.
deleting insn with uid = 361.
deleting insn with uid = 420.
deleting insn with uid = 421.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 53.
verify found no changes in insn with uid = 55.
verify found no changes in insn with uid = 64.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 89.
verify found no changes in insn with uid = 104.
verify found no changes in insn with uid = 116.
verify found no changes in insn with uid = 141.
verify found no changes in insn with uid = 158.
verify found no changes in insn with uid = 171.
verify found no changes in insn with uid = 196.
verify found no changes in insn with uid = 205.
verify found no changes in insn with uid = 206.
verify found no changes in insn with uid = 208.
verify found no changes in insn with uid = 232.
verify found no changes in insn with uid = 240.
verify found no changes in insn with uid = 268.
verify found no changes in insn with uid = 275.
verify found no changes in insn with uid = 304.
verify found no changes in insn with uid = 327.
verify found no changes in insn with uid = 334.
verify found no changes in insn with uid = 351.
verify found no changes in insn with uid = 360.
verify found no changes in insn with uid = 375.


createSensorV

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 40 [r12] 41 [r13] 42 [r14] 43 [r15]
;;  ref usage 	r0={102d,92u} r1={57d,41u,14e} r2={55d,29u} r3={2d,9u} r4={41d,13u} r5={58d,31u} r6={1d,76u} r7={1d,66u} r8={28d} r9={28d} r10={28d} r11={28d} r12={28d} r13={28d} r14={28d} r15={28d} r17={122d,23u} r18={28d} r19={1d,1u,7e} r20={29d} r21={29d} r22={29d} r23={29d} r24={29d} r25={29d} r26={29d} r27={29d} r28={28d} r29={28d} r30={28d} r31={28d} r32={28d} r33={28d} r34={28d} r35={28d} r36={29d} r37={29d} r38={28d} r39={28d} r40={2d,10u} r41={1d,3u} r42={2d,4u} r43={1d,1u} r44={28d} r45={28d} r46={28d} r47={28d} r48={28d} r49={28d} r50={28d} r51={28d} r52={28d} r53={28d} r54={28d} r55={28d} r56={28d} r57={28d} r58={28d} r59={28d} r60={28d} r61={28d} r62={28d} r63={28d} r64={28d} r65={28d} r66={28d} r67={28d} r68={28d} r69={28d} r70={28d} r71={28d} r72={28d} r73={28d} r74={28d} r75={28d} 
;;    total ref usage 2584{2164d,399u,21e} in 274{246 regular + 28 call} insns.
(note 1 0 41 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 173 174
(note 41 1 38 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 38 41 2 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -376 [0xfffffffffffffe88])) [10 fSensor+0 S8 A64])
        (reg:DI 5 di [ fSensor ])) "main.c":32:40 66 {*movdi_internal}
     (nil))
(insn 2 38 3 2 (parallel [
            (set (reg:DI 3 bx [173])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -336 [0xfffffffffffffeb0])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":32:40 191 {*adddi_1}
     (nil))
(insn 3 2 4 2 (set (reg:DI 43 r15 [174])
        (reg:DI 3 bx [173])) "main.c":32:40 66 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (symbol_ref:DI ("__asan_option_detect_stack_use_after_return") [flags 0x40]  <var_decl 0x7ffa22b503f0 __asan_option_detect_stack_use_after_return>) [11 __asan_option_detect_stack_use_after_return+0 S4 A32])
            (const_int 0 [0]))) "main.c":32:40 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 5 4 381 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 11)
            (pc))) "main.c":32:40 659 {*jcc}
     (nil)
 -> 11)
;;  succ:       5
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 173 174

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 173 174
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 381 5 6 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 6 381 7 3 (set (reg:DI 5 di)
        (const_int 256 [0x100])) "main.c":32:40 66 {*movdi_internal}
     (nil))
(call_insn 7 6 8 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__asan_stack_malloc_2") [flags 0x41]) [0  S1 A8])
            (const_int 0 [0]))) "main.c":32:40 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
        (nil))
    (expr_list (use (reg:DI 5 di))
        (nil)))
(insn 8 7 9 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax)
            (const_int 0 [0]))) "main.c":32:40 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 382 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 11)
            (pc))) "main.c":32:40 659 {*jcc}
     (nil)
 -> 11)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 173 174

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 174
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 173
(note 382 9 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 10 382 11 4 (set (reg:DI 3 bx [173])
        (reg:DI 0 ax)) "main.c":32:40 66 {*movdi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 173 174

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 173 174
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 173
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 172 175 176 177 178 181
(code_label 11 10 383 5 9 (nil) [2 uses])
(note 383 11 12 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 12 383 13 5 (parallel [
            (set (reg:DI 0 ax [175])
                (plus:DI (reg:DI 3 bx [173])
                    (const_int 288 [0x120])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":32:40 191 {*adddi_1}
     (nil))
(insn 13 12 14 5 (set (reg:DI 41 r13 [172])
        (reg:DI 0 ax [175])) "main.c":32:40 66 {*movdi_internal}
     (nil))
(insn 14 13 15 5 (set (mem:DI (reg:DI 3 bx [173]) [0  S8 A8])
        (const_int 1102416563 [0x41b58ab3])) "main.c":32:40 66 {*movdi_internal}
     (nil))
(insn 15 14 16 5 (set (reg/f:DI 0 ax [176])
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7ffa22b50480 *.LC2>)) "main.c":32:40 66 {*movdi_internal}
     (nil))
(insn 16 15 17 5 (set (mem:DI (plus:DI (reg:DI 3 bx [173])
                (const_int 8 [0x8])) [0  S8 A8])
        (reg/f:DI 0 ax [176])) "main.c":32:40 66 {*movdi_internal}
     (nil))
(insn 17 16 18 5 (set (reg/f:DI 0 ax [177])
        (symbol_ref:DI ("*.LASANPC1") [flags 0x2]  <var_decl 0x7ffa22b50510 *.LASANPC1>)) "main.c":32:40 66 {*movdi_internal}
     (nil))
(insn 18 17 398 5 (set (mem:DI (plus:DI (reg:DI 3 bx [173])
                (const_int 16 [0x10])) [0  S8 A8])
        (reg/f:DI 0 ax [177])) "main.c":32:40 66 {*movdi_internal}
     (nil))
(insn 398 18 19 5 (set (reg:DI 40 r12 [178])
        (reg:DI 3 bx [173])) "main.c":32:40 66 {*movdi_internal}
     (nil))
(insn 19 398 20 5 (parallel [
            (set (reg:DI 40 r12 [178])
                (lshiftrt:DI (reg:DI 40 r12 [178])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":32:40 566 {*lshrdi3_1}
     (nil))
(insn 20 19 21 5 (set (mem:SI (plus:DI (reg:DI 40 r12 [178])
                (const_int 2147450880 [0x7fff8000])) [7  S4 A8])
        (const_int -235802127 [0xfffffffff1f1f1f1])) "main.c":32:40 67 {*movsi_internal}
     (nil))
(insn 21 20 22 5 (set (mem:SI (plus:DI (reg:DI 40 r12 [178])
                (const_int 2147450900 [0x7fff8014])) [7  S4 A8])
        (const_int -217710592 [0xfffffffff3060000])) "main.c":32:40 67 {*movsi_internal}
     (nil))
(insn 22 21 23 5 (set (mem:SI (plus:DI (reg:DI 40 r12 [178])
                (const_int 2147450904 [0x7fff8018])) [7  S4 A8])
        (const_int -202116109 [0xfffffffff3f3f3f3])) "main.c":32:40 67 {*movsi_internal}
     (nil))
(insn 23 22 39 5 (set (mem:SI (plus:DI (reg:DI 40 r12 [178])
                (const_int 2147450908 [0x7fff801c])) [7  S4 A8])
        (const_int -202116109 [0xfffffffff3f3f3f3])) "main.c":32:40 67 {*movsi_internal}
     (nil))
(note 39 23 40 5 NOTE_INSN_FUNCTION_BEG)
(insn 40 39 43 5 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -56 [0xffffffffffffffc8])) [13 D.3491+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (reg:DI 0 ax [227])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "main.c":32:40 976 {stack_protect_set_di}
     (nil))
(insn 43 40 44 5 (set (reg:DI 4 si)
        (const_int 80 [0x50])) "main.c":33:21 66 {*movdi_internal}
     (nil))
(insn 44 43 45 5 (set (reg:DI 5 di)
        (const_int 86 [0x56])) "main.c":33:21 66 {*movdi_internal}
     (nil))
(call_insn 45 44 47 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("calloc") [flags 0x41]  <function_decl 0x7ffa22d7bd00 calloc>) [0 __builtin_calloc S1 A8])
            (const_int 0 [0]))) "main.c":33:21 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 47 45 48 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [8 ans+0 S8 A64])
        (reg/f:DI 0 ax [181])) "main.c":33:21 66 {*movdi_internal}
     (nil))
(insn 48 47 49 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -352 [0xfffffffffffffea0])) [8 ans+0 S8 A64])
            (const_int 0 [0]))) "main.c":34:8 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 49 48 50 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) "main.c":34:8 659 {*jcc}
     (nil)
 -> 57)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172 173 174 178

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 50 49 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7ffa22b505a0 *.LC3>)) "main.c":35:9 66 {*movdi_internal}
     (nil))
(call_insn 52 51 53 6 (call (mem:QI (symbol_ref:DI ("perror") [flags 0x41]  <function_decl 0x7ffa22e64500 perror>) [0 perror S1 A8])
        (const_int 0 [0])) "main.c":35:9 666 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 53 52 54 6 (call (mem:QI (symbol_ref:DI ("__asan_handle_no_return") [flags 0x41]  <function_decl 0x7ffa22db2800 __builtin___asan_handle_no_return>) [0 __builtin___asan_handle_no_return S1 A8])
        (const_int 0 [0])) "main.c":36:9 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 54 53 55 6 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "main.c":36:9 67 {*movsi_internal}
     (nil))
(call_insn 55 54 56 6 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7ffa22d81900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) "main.c":36:9 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 56 55 57)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172 173 174 178
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 182 183
(code_label 57 56 58 7 13 (nil) [1 uses])
(note 58 57 59 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 7 (set (reg:DI 1 dx [182])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -376 [0xfffffffffffffe88])) [10 fSensor+0 S8 A64])) "main.c":39:5 66 {*movdi_internal}
     (nil))
(insn 60 59 62 7 (parallel [
            (set (reg:DI 0 ax [183])
                (plus:DI (reg:DI 41 r13 [172])
                    (const_int -256 [0xffffffffffffff00])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":39:5 191 {*adddi_1}
     (nil))
(insn 62 60 63 7 (set (reg:SI 4 si)
        (const_int 150 [0x96])) "main.c":39:5 67 {*movsi_internal}
     (nil))
(insn 63 62 64 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [183])) "main.c":39:5 66 {*movdi_internal}
     (nil))
(call_insn 64 63 389 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7ffa22e57300 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) "main.c":39:5 677 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 389 64 390 7 (set (pc)
        (label_ref 356)) "main.c":40:11 660 {jump}
     (nil)
 -> 356)
;;  succ:       32 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172 173 174 178

(barrier 390 389 362)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       32
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172 173 174 178
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 362 390 67 8 28 (nil) [1 uses])
(note 67 362 68 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 391 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -364 [0xfffffffffffffe94])) [11 i+0 S4 A32])
        (const_int 0 [0])) "main.c":41:18 67 {*movsi_internal}
     (nil))
(jump_insn 391 68 392 8 (set (pc)
        (label_ref 344)) "main.c":41:9 660 {jump}
     (nil)
 -> 344)
;;  succ:       31 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172 173 174 178

(barrier 392 391 353)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       31
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172 173 174 178
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 184 185
(code_label 353 392 71 9 27 (nil) [1 uses])
(note 71 353 72 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 9 (parallel [
            (set (reg:DI 0 ax [184])
                (plus:DI (reg:DI 41 r13 [172])
                    (const_int -256 [0xffffffffffffff00])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":42:28 191 {*adddi_1}
     (nil))
(insn 73 72 74 9 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7ffa22b50630 *.LC4>)) "main.c":42:28 66 {*movdi_internal}
     (nil))
(insn 74 73 75 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [184])) "main.c":42:28 66 {*movdi_internal}
     (nil))
(call_insn 75 74 77 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7ffa22aecf00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) "main.c":42:28 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 77 75 393 9 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -360 [0xfffffffffffffe98])) [3 value+0 S8 A64])
        (reg:DI 0 ax [185])) "main.c":42:28 66 {*movdi_internal}
     (nil))
(jump_insn 393 77 394 9 (set (pc)
        (label_ref 337)) "main.c":43:19 660 {jump}
     (nil)
 -> 337)
;;  succ:       29 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172 173 174 178

(barrier 394 393 339)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       29
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172 173 174 178
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 82 83 84 85 86 114 121 122 123 124 125 186 187 188 189 190 191 192 193
(code_label 339 394 80 10 26 (nil) [1 uses])
(note 80 339 81 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 10 (set (reg:DI 0 ax [186])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -360 [0xfffffffffffffe98])) [3 value+0 S8 A64])) "main.c":44:30 66 {*movdi_internal}
     (nil))
(insn 82 81 83 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [186])) "main.c":44:30 66 {*movdi_internal}
     (nil))
(call_insn/i 83 82 85 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7ffa22e69600 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) "main.c":44:30 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 85 83 86 10 (set (reg:DI 0 ax [187])
        (sign_extend:DI (reg:SI 0 ax [orig:82 _1 ] [82]))) "main.c":44:24 128 {*extendsidi2_rex64}
     (nil))
(insn 86 85 87 10 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -344 [0xfffffffffffffea8])) [2 pos+0 S8 A64])
        (reg:DI 0 ax [187])) "main.c":44:24 66 {*movdi_internal}
     (nil))
(insn 87 86 88 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7ffa22b50630 *.LC4>)) "main.c":45:25 66 {*movdi_internal}
     (nil))
(insn 88 87 89 10 (set (reg:DI 5 di)
        (const_int 0 [0])) "main.c":45:25 66 {*movdi_internal}
     (nil))
(call_insn 89 88 91 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7ffa22aecf00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) "main.c":45:25 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 91 89 92 10 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -360 [0xfffffffffffffe98])) [3 value+0 S8 A64])
        (reg:DI 0 ax [188])) "main.c":45:25 66 {*movdi_internal}
     (nil))
(insn 92 91 93 10 (set (reg:DI 1 dx [189])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -344 [0xfffffffffffffea8])) [2 pos+0 S8 A64])) "main.c":46:20 66 {*movdi_internal}
     (nil))
(insn 93 92 94 10 (set (reg:DI 0 ax [190])
        (reg:DI 1 dx [189])) "main.c":46:20 66 {*movdi_internal}
     (nil))
(insn 94 93 95 10 (parallel [
            (set (reg:DI 0 ax [190])
                (ashift:DI (reg:DI 0 ax [190])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":46:20 520 {*ashldi3_1}
     (nil))
(insn 95 94 96 10 (parallel [
            (set (reg:DI 0 ax [190])
                (plus:DI (reg:DI 0 ax [190])
                    (reg:DI 1 dx [189])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":46:20 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [189])
            (const_int 5 [0x5]))
        (nil)))
(insn 96 95 99 10 (parallel [
            (set (reg:DI 0 ax [191])
                (ashift:DI (reg:DI 0 ax [190])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":46:20 520 {*ashldi3_1}
     (nil))
(insn 99 96 100 10 (parallel [
            (set (reg:DI 1 dx [orig:84 _3 ] [84])
                (plus:DI (reg:DI 0 ax [orig:83 _2 ] [83])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":46:20 191 {*adddi_1}
     (nil))
(insn 100 99 101 10 (set (reg/f:DI 0 ax [192])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [8 ans+0 S8 A64])) "main.c":46:20 66 {*movdi_internal}
     (nil))
(insn 101 100 102 10 (parallel [
            (set (reg/f:DI 42 r14 [orig:85 _4 ] [85])
                (plus:DI (reg:DI 1 dx [orig:84 _3 ] [84])
                    (reg/f:DI 0 ax [192])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":46:20 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -304 [0xfffffffffffffed0])) [8 ans+0 S8 A64])
            (reg:DI 1 dx [orig:84 _3 ] [84]))
        (nil)))
(insn 102 101 103 10 (set (reg:DI 0 ax [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -360 [0xfffffffffffffe98])) [3 value+0 S8 A64])) "main.c":46:36 66 {*movdi_internal}
     (nil))
(insn 103 102 104 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [193])) "main.c":46:36 66 {*movdi_internal}
     (nil))
(call_insn/i 104 103 106 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7ffa22d64d00 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) "main.c":46:36 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 106 104 400 10 (parallel [
            (set (reg/f:DI 1 dx [orig:114 _68 ] [114])
                (plus:DI (reg/f:DI 42 r14 [orig:85 _4 ] [85])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":46:34 191 {*adddi_1}
     (nil))
(insn 400 106 108 10 (set (reg:DI 2 cx [orig:122 _86 ] [122])
        (reg:DI 1 dx [orig:121 _85 ] [121])) "main.c":46:34 66 {*movdi_internal}
     (nil))
(insn 108 400 109 10 (parallel [
            (set (reg:DI 2 cx [orig:122 _86 ] [122])
                (lshiftrt:DI (reg:DI 2 cx [orig:122 _86 ] [122])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":46:34 566 {*lshrdi3_1}
     (nil))
(insn 109 108 111 10 (parallel [
            (set (reg:DI 2 cx [orig:123 _87 ] [123])
                (plus:DI (reg:DI 2 cx [orig:122 _86 ] [122])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":46:34 191 {*adddi_1}
     (nil))
(insn 111 109 112 10 (set (reg:QI 2 cx [orig:125 _89 ] [125])
        (mem:QI (reg/f:DI 2 cx [orig:124 _88 ] [124]) [7 *_88+0 S1 A8])) "main.c":46:34 69 {*movqi_internal}
     (nil))
(insn 112 111 113 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:125 _89 ] [125])
            (const_int 0 [0]))) "main.c":46:34 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 113 112 114 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 118)
            (pc))) "main.c":46:34 659 {*jcc}
     (nil)
 -> 118)
;;  succ:       12 [100.0% (guessed)] 
;;              11 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 86 121 172 173 174 178

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 [0.0% (guessed)]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 121
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 121
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 114 113 115 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 115 114 116 11 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:121 _85 ] [121])) "main.c":46:34 66 {*movdi_internal}
     (nil))
(call_insn 116 115 117 11 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7ffa22daaf00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "main.c":46:34 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 117 116 118)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       10 [100.0% (guessed)] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 86 172 173 174 178
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 85 86
;; lr  def 	 17 [flags] 87 88 89 115 126 127 128 129 130 194 195 196 197
(code_label 118 117 119 12 17 (nil) [1 uses])
(note 119 118 120 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 120 119 121 12 (set (mem:DI (plus:DI (reg/f:DI 42 r14 [orig:85 _4 ] [85])
                (const_int 16 [0x10])) [2 _4->len+0 S8 A64])
        (reg:DI 0 ax [orig:86 _5 ] [86])) "main.c":46:34 66 {*movdi_internal}
     (nil))
(insn 121 120 122 12 (set (reg:DI 1 dx [194])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -344 [0xfffffffffffffea8])) [2 pos+0 S8 A64])) "main.c":47:47 66 {*movdi_internal}
     (nil))
(insn 122 121 123 12 (set (reg:DI 0 ax [195])
        (reg:DI 1 dx [194])) "main.c":47:47 66 {*movdi_internal}
     (nil))
(insn 123 122 124 12 (parallel [
            (set (reg:DI 0 ax [195])
                (ashift:DI (reg:DI 0 ax [195])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":47:47 520 {*ashldi3_1}
     (nil))
(insn 124 123 125 12 (parallel [
            (set (reg:DI 0 ax [195])
                (plus:DI (reg:DI 0 ax [195])
                    (reg:DI 1 dx [194])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":47:47 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [194])
            (const_int 5 [0x5]))
        (nil)))
(insn 125 124 128 12 (parallel [
            (set (reg:DI 0 ax [196])
                (ashift:DI (reg:DI 0 ax [195])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":47:47 520 {*ashldi3_1}
     (nil))
(insn 128 125 129 12 (parallel [
            (set (reg:DI 1 dx [orig:88 _7 ] [88])
                (plus:DI (reg:DI 0 ax [orig:87 _6 ] [87])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":47:47 191 {*adddi_1}
     (nil))
(insn 129 128 130 12 (set (reg/f:DI 0 ax [197])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [8 ans+0 S8 A64])) "main.c":47:47 66 {*movdi_internal}
     (nil))
(insn 130 129 131 12 (parallel [
            (set (reg/f:DI 0 ax [orig:89 _8 ] [89])
                (plus:DI (reg/f:DI 0 ax [197])
                    (reg:DI 1 dx [orig:88 _7 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":47:47 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -304 [0xfffffffffffffed0])) [8 ans+0 S8 A64])
            (reg:DI 1 dx [orig:88 _7 ] [88]))
        (nil)))
(insn 131 130 402 12 (parallel [
            (set (reg/f:DI 1 dx [orig:115 _69 ] [115])
                (plus:DI (reg/f:DI 0 ax [orig:89 _8 ] [89])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":47:56 191 {*adddi_1}
     (nil))
(insn 402 131 133 12 (set (reg:DI 2 cx [orig:127 _91 ] [127])
        (reg:DI 1 dx [orig:126 _90 ] [126])) "main.c":47:56 66 {*movdi_internal}
     (nil))
(insn 133 402 134 12 (parallel [
            (set (reg:DI 2 cx [orig:127 _91 ] [127])
                (lshiftrt:DI (reg:DI 2 cx [orig:127 _91 ] [127])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":47:56 566 {*lshrdi3_1}
     (nil))
(insn 134 133 136 12 (parallel [
            (set (reg:DI 2 cx [orig:128 _92 ] [128])
                (plus:DI (reg:DI 2 cx [orig:127 _91 ] [127])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":47:56 191 {*adddi_1}
     (nil))
(insn 136 134 137 12 (set (reg:QI 2 cx [orig:130 _94 ] [130])
        (mem:QI (reg/f:DI 2 cx [orig:129 _93 ] [129]) [7 *_93+0 S1 A8])) "main.c":47:56 69 {*movqi_internal}
     (nil))
(insn 137 136 138 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:130 _94 ] [130])
            (const_int 0 [0]))) "main.c":47:56 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 138 137 139 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 143)
            (pc))) "main.c":47:56 659 {*jcc}
     (nil)
 -> 143)
;;  succ:       14 [100.0% (guessed)] 
;;              13 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89 126 172 173 174 178

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 [0.0% (guessed)]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 126
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 139 138 140 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 141 13 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:126 _90 ] [126])) "main.c":47:56 66 {*movdi_internal}
     (nil))
(call_insn 141 140 142 13 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":47:56 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 142 141 143)
;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       12 [100.0% (guessed)] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89 172 173 174 178
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 90 91 92 93 94 95 116 131 132 133 134 135 198 199 200 201 202
(code_label 143 142 144 14 18 (nil) [1 uses])
(note 144 143 145 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 145 144 146 14 (set (reg:DI 0 ax [orig:90 _9 ] [90])
        (mem:DI (plus:DI (reg/f:DI 0 ax [orig:89 _8 ] [89])
                (const_int 16 [0x10])) [2 _8->len+0 S8 A64])) "main.c":47:56 66 {*movdi_internal}
     (nil))
(insn 146 145 147 14 (parallel [
            (set (reg:DI 2 cx [orig:91 _10 ] [91])
                (plus:DI (reg:DI 0 ax [orig:90 _9 ] [90])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":47:37 191 {*adddi_1}
     (nil))
(insn 147 146 148 14 (set (reg:DI 1 dx [198])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -344 [0xfffffffffffffea8])) [2 pos+0 S8 A64])) "main.c":47:20 66 {*movdi_internal}
     (nil))
(insn 148 147 149 14 (set (reg:DI 0 ax [199])
        (reg:DI 1 dx [198])) "main.c":47:20 66 {*movdi_internal}
     (nil))
(insn 149 148 150 14 (parallel [
            (set (reg:DI 0 ax [199])
                (ashift:DI (reg:DI 0 ax [199])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":47:20 520 {*ashldi3_1}
     (nil))
(insn 150 149 151 14 (parallel [
            (set (reg:DI 0 ax [199])
                (plus:DI (reg:DI 0 ax [199])
                    (reg:DI 1 dx [198])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":47:20 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [198])
            (const_int 5 [0x5]))
        (nil)))
(insn 151 150 154 14 (parallel [
            (set (reg:DI 0 ax [200])
                (ashift:DI (reg:DI 0 ax [199])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":47:20 520 {*ashldi3_1}
     (nil))
(insn 154 151 155 14 (parallel [
            (set (reg:DI 1 dx [orig:93 _12 ] [93])
                (plus:DI (reg:DI 0 ax [orig:92 _11 ] [92])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":47:20 191 {*adddi_1}
     (nil))
(insn 155 154 156 14 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [8 ans+0 S8 A64])) "main.c":47:20 66 {*movdi_internal}
     (nil))
(insn 156 155 157 14 (parallel [
            (set (reg/f:DI 42 r14 [orig:94 _13 ] [94])
                (plus:DI (reg:DI 1 dx [orig:93 _12 ] [93])
                    (reg/f:DI 0 ax [201])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":47:20 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -304 [0xfffffffffffffed0])) [8 ans+0 S8 A64])
            (reg:DI 1 dx [orig:93 _12 ] [93]))
        (nil)))
(insn 157 156 158 14 (set (reg:DI 5 di)
        (reg:DI 2 cx [orig:91 _10 ] [91])) "main.c":47:37 66 {*movdi_internal}
     (nil))
(call_insn 158 157 160 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7ffa22d87000 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "main.c":47:37 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 160 158 161 14 (set (reg/f:DI 2 cx [orig:95 _14 ] [95])
        (reg/f:DI 0 ax [202])) "main.c":47:37 66 {*movdi_internal}
     (nil))
(insn 161 160 404 14 (parallel [
            (set (reg/f:DI 0 ax [orig:116 _70 ] [116])
                (plus:DI (reg/f:DI 42 r14 [orig:94 _13 ] [94])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":47:35 191 {*adddi_1}
     (nil))
(insn 404 161 163 14 (set (reg:DI 1 dx [orig:132 _96 ] [132])
        (reg:DI 0 ax [orig:131 _95 ] [131])) "main.c":47:35 66 {*movdi_internal}
     (nil))
(insn 163 404 164 14 (parallel [
            (set (reg:DI 1 dx [orig:132 _96 ] [132])
                (lshiftrt:DI (reg:DI 1 dx [orig:132 _96 ] [132])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":47:35 566 {*lshrdi3_1}
     (nil))
(insn 164 163 166 14 (parallel [
            (set (reg:DI 1 dx [orig:133 _97 ] [133])
                (plus:DI (reg:DI 1 dx [orig:132 _96 ] [132])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":47:35 191 {*adddi_1}
     (nil))
(insn 166 164 167 14 (set (reg:QI 1 dx [orig:135 _99 ] [135])
        (mem:QI (reg/f:DI 1 dx [orig:134 _98 ] [134]) [7 *_98+0 S1 A8])) "main.c":47:35 69 {*movqi_internal}
     (nil))
(insn 167 166 168 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:135 _99 ] [135])
            (const_int 0 [0]))) "main.c":47:35 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 168 167 169 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 173)
            (pc))) "main.c":47:35 659 {*jcc}
     (nil)
 -> 173)
;;  succ:       16 [100.0% (guessed)] 
;;              15 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 94 95 131 172 173 174 178

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 [0.0% (guessed)]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 131
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 169 168 170 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 170 169 171 15 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:131 _95 ] [131])) "main.c":47:35 66 {*movdi_internal}
     (nil))
(call_insn 171 170 172 15 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7ffa22daaf00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "main.c":47:35 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 172 171 173)
;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       14 [100.0% (guessed)] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 94 95 172 173 174 178
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 94 95
;; lr  def 	 17 [flags] 96 97 98 117 136 137 138 139 140 203 204 205 206
(code_label 173 172 174 16 19 (nil) [1 uses])
(note 174 173 175 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 175 174 176 16 (set (mem/f:DI (plus:DI (reg/f:DI 42 r14 [orig:94 _13 ] [94])
                (const_int 8 [0x8])) [3 _13->name+0 S8 A64])
        (reg/f:DI 2 cx [orig:95 _14 ] [95])) "main.c":47:35 66 {*movdi_internal}
     (nil))
(insn 176 175 177 16 (set (reg:DI 1 dx [203])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -344 [0xfffffffffffffea8])) [2 pos+0 S8 A64])) "main.c":48:24 66 {*movdi_internal}
     (nil))
(insn 177 176 178 16 (set (reg:DI 0 ax [204])
        (reg:DI 1 dx [203])) "main.c":48:24 66 {*movdi_internal}
     (nil))
(insn 178 177 179 16 (parallel [
            (set (reg:DI 0 ax [204])
                (ashift:DI (reg:DI 0 ax [204])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":48:24 520 {*ashldi3_1}
     (nil))
(insn 179 178 180 16 (parallel [
            (set (reg:DI 0 ax [204])
                (plus:DI (reg:DI 0 ax [204])
                    (reg:DI 1 dx [203])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":48:24 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [203])
            (const_int 5 [0x5]))
        (nil)))
(insn 180 179 183 16 (parallel [
            (set (reg:DI 0 ax [205])
                (ashift:DI (reg:DI 0 ax [204])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":48:24 520 {*ashldi3_1}
     (nil))
(insn 183 180 184 16 (parallel [
            (set (reg:DI 1 dx [orig:97 _16 ] [97])
                (plus:DI (reg:DI 0 ax [orig:96 _15 ] [96])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":48:24 191 {*adddi_1}
     (nil))
(insn 184 183 185 16 (set (reg/f:DI 0 ax [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [8 ans+0 S8 A64])) "main.c":48:24 66 {*movdi_internal}
     (nil))
(insn 185 184 186 16 (parallel [
            (set (reg/f:DI 0 ax [orig:98 _17 ] [98])
                (plus:DI (reg/f:DI 0 ax [206])
                    (reg:DI 1 dx [orig:97 _16 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":48:24 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -304 [0xfffffffffffffed0])) [8 ans+0 S8 A64])
            (reg:DI 1 dx [orig:97 _16 ] [97]))
        (nil)))
(insn 186 185 406 16 (parallel [
            (set (reg/f:DI 1 dx [orig:117 _71 ] [117])
                (plus:DI (reg/f:DI 0 ax [orig:98 _17 ] [98])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":48:33 191 {*adddi_1}
     (nil))
(insn 406 186 188 16 (set (reg:DI 2 cx [orig:137 _101 ] [137])
        (reg:DI 1 dx [orig:136 _100 ] [136])) "main.c":48:33 66 {*movdi_internal}
     (nil))
(insn 188 406 189 16 (parallel [
            (set (reg:DI 2 cx [orig:137 _101 ] [137])
                (lshiftrt:DI (reg:DI 2 cx [orig:137 _101 ] [137])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":48:33 566 {*lshrdi3_1}
     (nil))
(insn 189 188 191 16 (parallel [
            (set (reg:DI 2 cx [orig:138 _102 ] [138])
                (plus:DI (reg:DI 2 cx [orig:137 _101 ] [137])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":48:33 191 {*adddi_1}
     (nil))
(insn 191 189 192 16 (set (reg:QI 2 cx [orig:140 _104 ] [140])
        (mem:QI (reg/f:DI 2 cx [orig:139 _103 ] [139]) [7 *_103+0 S1 A8])) "main.c":48:33 69 {*movqi_internal}
     (nil))
(insn 192 191 193 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:140 _104 ] [140])
            (const_int 0 [0]))) "main.c":48:33 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 193 192 194 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 198)
            (pc))) "main.c":48:33 659 {*jcc}
     (nil)
 -> 198)
;;  succ:       18 [100.0% (guessed)] 
;;              17 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 98 136 172 173 174 178

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 [0.0% (guessed)]  (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 136
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 136
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 194 193 195 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 195 194 196 17 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:136 _100 ] [136])) "main.c":48:33 66 {*movdi_internal}
     (nil))
(call_insn 196 195 197 17 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":48:33 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 197 196 198)
;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       16 [100.0% (guessed)] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 98 172 173 174 178
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 98
;; lr  def 	 17 [flags] 99
(code_label 198 197 199 18 20 (nil) [1 uses])
(note 199 198 200 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 200 199 201 18 (set (reg/f:DI 0 ax [orig:99 _18 ] [99])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:98 _17 ] [98])
                (const_int 8 [0x8])) [3 _17->name+0 S8 A64])) "main.c":48:33 66 {*movdi_internal}
     (nil))
(insn 201 200 202 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:99 _18 ] [99])
            (const_int 0 [0]))) "main.c":48:20 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 202 201 203 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 210)
            (pc))) "main.c":48:20 659 {*jcc}
     (nil)
 -> 210)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172 173 174 178

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 203 202 204 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 204 203 205 19 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7ffa22b505a0 *.LC3>)) "main.c":49:21 66 {*movdi_internal}
     (nil))
(call_insn 205 204 206 19 (call (mem:QI (symbol_ref:DI ("perror") [flags 0x41]  <function_decl 0x7ffa22e64500 perror>) [0 perror S1 A8])
        (const_int 0 [0])) "main.c":49:21 666 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 206 205 207 19 (call (mem:QI (symbol_ref:DI ("__asan_handle_no_return") [flags 0x41]  <function_decl 0x7ffa22db2800 __builtin___asan_handle_no_return>) [0 __builtin___asan_handle_no_return S1 A8])
        (const_int 0 [0])) "main.c":50:21 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 207 206 208 19 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "main.c":50:21 67 {*movsi_internal}
     (nil))
(call_insn 208 207 209 19 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7ffa22d81900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) "main.c":50:21 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 209 208 210)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172 173 174 178
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 100 101 102 118 141 142 143 144 145 207 208 209 210
(code_label 210 209 211 20 21 (nil) [1 uses])
(note 211 210 212 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 212 211 213 20 (set (reg:DI 1 dx [207])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -344 [0xfffffffffffffea8])) [2 pos+0 S8 A64])) "main.c":52:27 66 {*movdi_internal}
     (nil))
(insn 213 212 214 20 (set (reg:DI 0 ax [208])
        (reg:DI 1 dx [207])) "main.c":52:27 66 {*movdi_internal}
     (nil))
(insn 214 213 215 20 (parallel [
            (set (reg:DI 0 ax [208])
                (ashift:DI (reg:DI 0 ax [208])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":52:27 520 {*ashldi3_1}
     (nil))
(insn 215 214 216 20 (parallel [
            (set (reg:DI 0 ax [208])
                (plus:DI (reg:DI 0 ax [208])
                    (reg:DI 1 dx [207])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":52:27 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [207])
            (const_int 5 [0x5]))
        (nil)))
(insn 216 215 219 20 (parallel [
            (set (reg:DI 0 ax [209])
                (ashift:DI (reg:DI 0 ax [208])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":52:27 520 {*ashldi3_1}
     (nil))
(insn 219 216 220 20 (parallel [
            (set (reg:DI 1 dx [orig:101 _20 ] [101])
                (plus:DI (reg:DI 0 ax [orig:100 _19 ] [100])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":52:27 191 {*adddi_1}
     (nil))
(insn 220 219 221 20 (set (reg/f:DI 0 ax [210])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [8 ans+0 S8 A64])) "main.c":52:27 66 {*movdi_internal}
     (nil))
(insn 221 220 222 20 (parallel [
            (set (reg/f:DI 0 ax [orig:102 _21 ] [102])
                (plus:DI (reg/f:DI 0 ax [210])
                    (reg:DI 1 dx [orig:101 _20 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":52:27 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -304 [0xfffffffffffffed0])) [8 ans+0 S8 A64])
            (reg:DI 1 dx [orig:101 _20 ] [101]))
        (nil)))
(insn 222 221 408 20 (parallel [
            (set (reg/f:DI 1 dx [orig:118 _72 ] [118])
                (plus:DI (reg/f:DI 0 ax [orig:102 _21 ] [102])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":52:17 191 {*adddi_1}
     (nil))
(insn 408 222 224 20 (set (reg:DI 2 cx [orig:142 _106 ] [142])
        (reg:DI 1 dx [orig:141 _105 ] [141])) "main.c":52:17 66 {*movdi_internal}
     (nil))
(insn 224 408 225 20 (parallel [
            (set (reg:DI 2 cx [orig:142 _106 ] [142])
                (lshiftrt:DI (reg:DI 2 cx [orig:142 _106 ] [142])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":52:17 566 {*lshrdi3_1}
     (nil))
(insn 225 224 227 20 (parallel [
            (set (reg:DI 2 cx [orig:143 _107 ] [143])
                (plus:DI (reg:DI 2 cx [orig:142 _106 ] [142])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":52:17 191 {*adddi_1}
     (nil))
(insn 227 225 228 20 (set (reg:QI 2 cx [orig:145 _109 ] [145])
        (mem:QI (reg/f:DI 2 cx [orig:144 _108 ] [144]) [7 *_108+0 S1 A8])) "main.c":52:17 69 {*movqi_internal}
     (nil))
(insn 228 227 229 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:145 _109 ] [145])
            (const_int 0 [0]))) "main.c":52:17 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 229 228 230 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 234)
            (pc))) "main.c":52:17 659 {*jcc}
     (nil)
 -> 234)
;;  succ:       22 [100.0% (guessed)] 
;;              21 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 102 141 172 173 174 178

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 [0.0% (guessed)]  (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 141
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 141
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 230 229 231 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 231 230 232 21 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:141 _105 ] [141])) "main.c":52:17 66 {*movdi_internal}
     (nil))
(call_insn 232 231 233 21 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":52:17 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 233 232 234)
;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       20 [100.0% (guessed)] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 102 172 173 174 178
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 102
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 103 104 105 106 119 146 147 148 149 150 151 152 153 211 212 213 214 215
(code_label 234 233 235 22 22 (nil) [1 uses])
(note 235 234 236 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 22 (set (reg/f:DI 0 ax [orig:103 _22 ] [103])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:102 _21 ] [102])
                (const_int 8 [0x8])) [3 _21->name+0 S8 A64])) "main.c":52:17 66 {*movdi_internal}
     (nil))
(insn 237 236 238 22 (set (reg:DI 1 dx [211])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -360 [0xfffffffffffffe98])) [3 value+0 S8 A64])) "main.c":52:17 66 {*movdi_internal}
     (nil))
(insn 238 237 239 22 (set (reg:DI 4 si)
        (reg:DI 1 dx [211])) "main.c":52:17 66 {*movdi_internal}
     (nil))
(insn 239 238 240 22 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:103 _22 ] [103])) "main.c":52:17 66 {*movdi_internal}
     (nil))
(call_insn 240 239 241 22 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7ffa22d64700 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) "main.c":52:17 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 241 240 242 22 (set (reg:DI 1 dx [212])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -344 [0xfffffffffffffea8])) [2 pos+0 S8 A64])) "main.c":53:20 66 {*movdi_internal}
     (nil))
(insn 242 241 243 22 (set (reg:DI 0 ax [213])
        (reg:DI 1 dx [212])) "main.c":53:20 66 {*movdi_internal}
     (nil))
(insn 243 242 244 22 (parallel [
            (set (reg:DI 0 ax [213])
                (ashift:DI (reg:DI 0 ax [213])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":53:20 520 {*ashldi3_1}
     (nil))
(insn 244 243 245 22 (parallel [
            (set (reg:DI 0 ax [213])
                (plus:DI (reg:DI 0 ax [213])
                    (reg:DI 1 dx [212])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":53:20 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [212])
            (const_int 5 [0x5]))
        (nil)))
(insn 245 244 248 22 (parallel [
            (set (reg:DI 0 ax [214])
                (ashift:DI (reg:DI 0 ax [213])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":53:20 520 {*ashldi3_1}
     (nil))
(insn 248 245 249 22 (parallel [
            (set (reg:DI 1 dx [orig:105 _24 ] [105])
                (plus:DI (reg:DI 0 ax [orig:104 _23 ] [104])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":53:20 191 {*adddi_1}
     (nil))
(insn 249 248 250 22 (set (reg/f:DI 0 ax [215])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [8 ans+0 S8 A64])) "main.c":53:20 66 {*movdi_internal}
     (nil))
(insn 250 249 251 22 (parallel [
            (set (reg/f:DI 1 dx [orig:106 _25 ] [106])
                (plus:DI (reg:DI 1 dx [orig:105 _24 ] [105])
                    (reg/f:DI 0 ax [215])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":53:20 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -304 [0xfffffffffffffed0])) [8 ans+0 S8 A64])
            (reg:DI 1 dx [orig:105 _24 ] [105]))
        (nil)))
(insn 251 250 252 22 (parallel [
            (set (reg/f:DI 0 ax [orig:119 _73 ] [119])
                (plus:DI (reg/f:DI 1 dx [orig:106 _25 ] [106])
                    (const_int 40 [0x28])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":53:40 191 {*adddi_1}
     (nil))
(insn 252 251 410 22 (set (reg:DI 2 cx [orig:146 _110 ] [146])
        (reg/f:DI 0 ax [orig:119 _73 ] [119])) "main.c":53:40 66 {*movdi_internal}
     (nil))
(insn 410 252 253 22 (set (reg:DI 0 ax [orig:147 _111 ] [147])
        (reg:DI 2 cx [orig:146 _110 ] [146])) "main.c":53:40 66 {*movdi_internal}
     (nil))
(insn 253 410 254 22 (parallel [
            (set (reg:DI 0 ax [orig:147 _111 ] [147])
                (lshiftrt:DI (reg:DI 0 ax [orig:147 _111 ] [147])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":53:40 566 {*lshrdi3_1}
     (nil))
(insn 254 253 256 22 (parallel [
            (set (reg:DI 0 ax [orig:148 _112 ] [148])
                (plus:DI (reg:DI 0 ax [orig:147 _111 ] [147])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":53:40 191 {*adddi_1}
     (nil))
(insn 256 254 257 22 (set (reg:QI 0 ax [orig:150 _114 ] [150])
        (mem:QI (reg/f:DI 0 ax [orig:149 _113 ] [149]) [7 *_113+0 S1 A8])) "main.c":53:40 69 {*movqi_internal}
     (nil))
(insn 257 256 258 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:150 _114 ] [150])
            (const_int 0 [0]))) "main.c":53:40 5 {*cmpqi_ccno_1}
     (nil))
(insn 258 257 261 22 (set (reg:QI 4 si [orig:151 _115 ] [151])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "main.c":53:40 655 {*setcc_qi}
     (nil))
(insn 261 258 262 22 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:QI 0 ax [orig:150 _114 ] [150])
            (const_int 0 [0]))) "main.c":53:40 5 {*cmpqi_ccno_1}
     (nil))
(insn 262 261 263 22 (set (reg:QI 0 ax [orig:152 _116 ] [152])
        (le:QI (reg:CCNO 17 flags)
            (const_int 0 [0]))) "main.c":53:40 655 {*setcc_qi}
     (nil))
(insn 263 262 264 22 (parallel [
            (set (reg:QI 0 ax [orig:153 _117 ] [153])
                (and:QI (reg:QI 0 ax [orig:152 _116 ] [152])
                    (reg:QI 4 si [orig:151 _115 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":53:40 396 {*andqi_1}
     (nil))
(insn 264 263 265 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:153 _117 ] [153])
            (const_int 0 [0]))) "main.c":53:40 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 265 264 266 22 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 270)
            (pc))) "main.c":53:40 659 {*jcc}
     (nil)
 -> 270)
;;  succ:       24 [100.0% (guessed)] 
;;              23 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 106 146 172 173 174 178

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 [0.0% (guessed)]  (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 146
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 146
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 266 265 267 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 23 (set (reg:DI 5 di)
        (reg:DI 2 cx [orig:146 _110 ] [146])) "main.c":53:40 66 {*movdi_internal}
     (nil))
(call_insn 268 267 269 23 (call (mem:QI (symbol_ref:DI ("__asan_report_store1") [flags 0x41]  <function_decl 0x7ffa22daac00 __builtin___asan_report_store1>) [0 __builtin___asan_report_store1 S1 A8])
        (const_int 0 [0])) "main.c":53:40 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 269 268 270)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       22 [100.0% (guessed)] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 106 172 173 174 178
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 106
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 107 108 109 154 155 156 157 158 159 160 161 162 163 216 217 218 219 220
(code_label 270 269 271 24 23 (nil) [1 uses])
(note 271 270 272 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 272 271 273 24 (set (mem:QI (plus:DI (reg/f:DI 1 dx [orig:106 _25 ] [106])
                (const_int 40 [0x28])) [0 _25->oldest.used+0 S1 A64])
        (const_int 0 [0])) "main.c":53:40 69 {*movqi_internal}
     (nil))
(insn 273 272 274 24 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7ffa22b50630 *.LC4>)) "main.c":54:25 66 {*movdi_internal}
     (nil))
(insn 274 273 275 24 (set (reg:DI 5 di)
        (const_int 0 [0])) "main.c":54:25 66 {*movdi_internal}
     (nil))
(call_insn 275 274 277 24 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7ffa22aecf00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) "main.c":54:25 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 277 275 278 24 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -360 [0xfffffffffffffe98])) [3 value+0 S8 A64])
        (reg:DI 0 ax [216])) "main.c":54:25 66 {*movdi_internal}
     (nil))
(insn 278 277 279 24 (set (reg:DI 1 dx [217])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -344 [0xfffffffffffffea8])) [2 pos+0 S8 A64])) "main.c":55:20 66 {*movdi_internal}
     (nil))
(insn 279 278 280 24 (set (reg:DI 0 ax [218])
        (reg:DI 1 dx [217])) "main.c":55:20 66 {*movdi_internal}
     (nil))
(insn 280 279 281 24 (parallel [
            (set (reg:DI 0 ax [218])
                (ashift:DI (reg:DI 0 ax [218])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":55:20 520 {*ashldi3_1}
     (nil))
(insn 281 280 282 24 (parallel [
            (set (reg:DI 0 ax [218])
                (plus:DI (reg:DI 0 ax [218])
                    (reg:DI 1 dx [217])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":55:20 191 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [217])
            (const_int 5 [0x5]))
        (nil)))
(insn 282 281 285 24 (parallel [
            (set (reg:DI 0 ax [219])
                (ashift:DI (reg:DI 0 ax [218])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":55:20 520 {*ashldi3_1}
     (nil))
(insn 285 282 286 24 (parallel [
            (set (reg:DI 1 dx [orig:108 _27 ] [108])
                (plus:DI (reg:DI 0 ax [orig:107 _26 ] [107])
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":55:20 191 {*adddi_1}
     (nil))
(insn 286 285 287 24 (set (reg/f:DI 0 ax [220])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [8 ans+0 S8 A64])) "main.c":55:20 66 {*movdi_internal}
     (nil))
(insn 287 286 288 24 (parallel [
            (set (reg/f:DI 1 dx [orig:109 _28 ] [109])
                (plus:DI (reg:DI 1 dx [orig:108 _27 ] [108])
                    (reg/f:DI 0 ax [220])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":55:20 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -304 [0xfffffffffffffed0])) [8 ans+0 S8 A64])
            (reg:DI 1 dx [orig:108 _27 ] [108]))
        (nil)))
(insn 288 287 412 24 (set (reg:DI 0 ax [orig:154 _118 ] [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -360 [0xfffffffffffffe98])) [3 value+0 S8 A64])) "main.c":55:37 66 {*movdi_internal}
     (nil))
(insn 412 288 289 24 (set (reg:DI 2 cx [orig:155 _119 ] [155])
        (reg:DI 0 ax [orig:154 _118 ] [154])) "main.c":55:37 66 {*movdi_internal}
     (nil))
(insn 289 412 290 24 (parallel [
            (set (reg:DI 2 cx [orig:155 _119 ] [155])
                (lshiftrt:DI (reg:DI 2 cx [orig:155 _119 ] [155])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":55:37 566 {*lshrdi3_1}
     (nil))
(insn 290 289 292 24 (parallel [
            (set (reg:DI 2 cx [orig:156 _120 ] [156])
                (plus:DI (reg:DI 2 cx [orig:155 _119 ] [155])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":55:37 191 {*adddi_1}
     (nil))
(insn 292 290 293 24 (set (reg:QI 2 cx [orig:158 _122 ] [158])
        (mem:QI (reg/f:DI 2 cx [orig:157 _121 ] [157]) [7 *_121+0 S1 A8])) "main.c":55:37 69 {*movqi_internal}
     (nil))
(insn 293 292 294 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:158 _122 ] [158])
            (const_int 0 [0]))) "main.c":55:37 5 {*cmpqi_ccno_1}
     (nil))
(insn 294 293 414 24 (set (reg:QI 4 si [orig:159 _123 ] [159])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "main.c":55:37 655 {*setcc_qi}
     (nil))
(insn 414 294 295 24 (set (reg:DI 5 di [orig:160 _124 ] [160])
        (reg:DI 0 ax [orig:154 _118 ] [154])) "main.c":55:37 66 {*movdi_internal}
     (nil))
(insn 295 414 297 24 (parallel [
            (set (reg:DI 5 di [orig:160 _124 ] [160])
                (and:DI (reg:DI 5 di [orig:160 _124 ] [160])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":55:37 391 {*anddi_1}
     (nil))
(insn 297 295 298 24 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:QI 5 di [orig:161 _125 ] [161])
            (reg:QI 2 cx [orig:158 _122 ] [158]))) "main.c":55:37 9 {*cmpqi_1}
     (nil))
(insn 298 297 299 24 (set (reg:QI 2 cx [orig:162 _126 ] [162])
        (ge:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "main.c":55:37 655 {*setcc_qi}
     (nil))
(insn 299 298 300 24 (parallel [
            (set (reg:QI 2 cx [orig:163 _127 ] [163])
                (and:QI (reg:QI 2 cx [orig:162 _126 ] [162])
                    (reg:QI 4 si [orig:159 _123 ] [159])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":55:37 396 {*andqi_1}
     (nil))
(insn 300 299 301 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:163 _127 ] [163])
            (const_int 0 [0]))) "main.c":55:37 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 301 300 302 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 306)
            (pc))) "main.c":55:37 659 {*jcc}
     (nil)
 -> 306)
;;  succ:       26 [100.0% (guessed)] 
;;              25 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 109 154 172 173 174 178

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 [0.0% (guessed)]  (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 154
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 154
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 302 301 303 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 303 302 304 25 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:154 _118 ] [154])) "main.c":55:37 66 {*movdi_internal}
     (nil))
(call_insn 304 303 305 25 (call (mem:QI (symbol_ref:DI ("__asan_report_load1") [flags 0x41]  <function_decl 0x7ffa22daa600 __builtin___asan_report_load1>) [0 __builtin___asan_report_load1 S1 A8])
        (const_int 0 [0])) "main.c":55:37 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 305 304 306)
;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       24 [100.0% (guessed)] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 109 172 173 174 178
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 109
;; lr  def 	 17 [flags] 110 120 164 165 166 167 168 169 170 171 221
(code_label 306 305 307 26 24 (nil) [1 uses])
(note 307 306 308 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 308 307 309 26 (set (reg/f:DI 0 ax [221])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -360 [0xfffffffffffffe98])) [3 value+0 S8 A64])) "main.c":55:37 66 {*movdi_internal}
     (nil))
(insn 309 308 310 26 (set (reg:QI 4 si [orig:110 _29 ] [110])
        (mem:QI (reg/f:DI 0 ax [221]) [0 *value_60+0 S1 A8])) "main.c":55:37 69 {*movqi_internal}
     (nil))
(insn 310 309 311 26 (parallel [
            (set (reg/f:DI 0 ax [orig:120 _74 ] [120])
                (plus:DI (reg/f:DI 1 dx [orig:109 _28 ] [109])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":55:35 191 {*adddi_1}
     (nil))
(insn 311 310 416 26 (set (reg:DI 2 cx [orig:164 _128 ] [164])
        (reg/f:DI 0 ax [orig:120 _74 ] [120])) "main.c":55:35 66 {*movdi_internal}
     (nil))
(insn 416 311 312 26 (set (reg:DI 0 ax [orig:165 _129 ] [165])
        (reg:DI 2 cx [orig:164 _128 ] [164])) "main.c":55:35 66 {*movdi_internal}
     (nil))
(insn 312 416 313 26 (parallel [
            (set (reg:DI 0 ax [orig:165 _129 ] [165])
                (lshiftrt:DI (reg:DI 0 ax [orig:165 _129 ] [165])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":55:35 566 {*lshrdi3_1}
     (nil))
(insn 313 312 315 26 (parallel [
            (set (reg:DI 0 ax [orig:166 _130 ] [166])
                (plus:DI (reg:DI 0 ax [orig:165 _129 ] [165])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":55:35 191 {*adddi_1}
     (nil))
(insn 315 313 316 26 (set (reg:QI 0 ax [orig:168 _132 ] [168])
        (mem:QI (reg/f:DI 0 ax [orig:167 _131 ] [167]) [7 *_131+0 S1 A8])) "main.c":55:35 69 {*movqi_internal}
     (nil))
(insn 316 315 317 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:168 _132 ] [168])
            (const_int 0 [0]))) "main.c":55:35 5 {*cmpqi_ccno_1}
     (nil))
(insn 317 316 320 26 (set (reg:QI 5 di [orig:169 _133 ] [169])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "main.c":55:35 655 {*setcc_qi}
     (nil))
(insn 320 317 321 26 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:QI 0 ax [orig:168 _132 ] [168])
            (const_int 0 [0]))) "main.c":55:35 5 {*cmpqi_ccno_1}
     (nil))
(insn 321 320 322 26 (set (reg:QI 0 ax [orig:170 _134 ] [170])
        (le:QI (reg:CCNO 17 flags)
            (const_int 0 [0]))) "main.c":55:35 655 {*setcc_qi}
     (nil))
(insn 322 321 323 26 (parallel [
            (set (reg:QI 0 ax [orig:171 _135 ] [171])
                (and:QI (reg:QI 0 ax [orig:170 _134 ] [170])
                    (reg:QI 5 di [orig:169 _133 ] [169])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":55:35 396 {*andqi_1}
     (nil))
(insn 323 322 324 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:171 _135 ] [171])
            (const_int 0 [0]))) "main.c":55:35 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 324 323 325 26 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 329)
            (pc))) "main.c":55:35 659 {*jcc}
     (nil)
 -> 329)
;;  succ:       28 [100.0% (guessed)] 
;;              27 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 109 110 164 172 173 174 178

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       26 [0.0% (guessed)]  (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 164
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 325 324 326 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 326 325 327 27 (set (reg:DI 5 di)
        (reg:DI 2 cx [orig:164 _128 ] [164])) "main.c":55:35 66 {*movdi_internal}
     (nil))
(call_insn 327 326 328 27 (call (mem:QI (symbol_ref:DI ("__asan_report_store1") [flags 0x41]  <function_decl 0x7ffa22daac00 __builtin___asan_report_store1>) [0 __builtin___asan_report_store1 S1 A8])
        (const_int 0 [0])) "main.c":55:35 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 328 327 329)
;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       26 [100.0% (guessed)] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 109 110 172 173 174 178
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 109 110
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 222
(code_label 329 328 330 28 25 (nil) [1 uses])
(note 330 329 331 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 331 330 332 28 (set (mem:QI (plus:DI (reg/f:DI 1 dx [orig:109 _28 ] [109])
                (const_int 24 [0x18])) [0 _28->flag+0 S1 A64])
        (reg:QI 4 si [orig:110 _29 ] [110])) "main.c":55:35 69 {*movqi_internal}
     (nil))
(insn 332 331 333 28 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7ffa22b50630 *.LC4>)) "main.c":56:25 66 {*movdi_internal}
     (nil))
(insn 333 332 334 28 (set (reg:DI 5 di)
        (const_int 0 [0])) "main.c":56:25 66 {*movdi_internal}
     (nil))
(call_insn 334 333 336 28 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7ffa22aecf00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) "main.c":56:25 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 336 334 337 28 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -360 [0xfffffffffffffe98])) [3 value+0 S8 A64])
        (reg:DI 0 ax [222])) "main.c":56:25 66 {*movdi_internal}
     (nil))
;;  succ:       29 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172 173 174 178

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       28 (FALLTHRU,DFS_BACK)
;;              9 [always] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172 173 174 178
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 337 336 338 29 16 (nil) [1 uses])
(note 338 337 340 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 340 338 341 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -360 [0xfffffffffffffe98])) [3 value+0 S8 A64])
            (const_int 0 [0]))) "main.c":43:19 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 341 340 342 29 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 339)
            (pc))) "main.c":43:19 659 {*jcc}
     (nil)
 -> 339)
;;  succ:       10
;;              30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172 173 174 178

;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172 173 174 178
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 342 341 343 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 343 342 344 30 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -364 [0xfffffffffffffe94])) [11 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -364 [0xfffffffffffffe94])) [11 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":41:53 190 {*addsi_1}
     (nil))
;;  succ:       31 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172 173 174 178

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       30 (FALLTHRU,DFS_BACK)
;;              8 [always] 
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172 173 174 178
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 111 223 224
(code_label 344 343 345 31 15 (nil) [1 uses])
(note 345 344 346 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 346 345 347 31 (set (reg:DI 1 dx [223])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -376 [0xfffffffffffffe88])) [10 fSensor+0 S8 A64])) "main.c":41:23 66 {*movdi_internal}
     (nil))
(insn 347 346 349 31 (parallel [
            (set (reg:DI 0 ax [224])
                (plus:DI (reg:DI 41 r13 [172])
                    (const_int -256 [0xffffffffffffff00])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":41:23 191 {*adddi_1}
     (nil))
(insn 349 347 350 31 (set (reg:SI 4 si)
        (const_int 150 [0x96])) "main.c":41:23 67 {*movsi_internal}
     (nil))
(insn 350 349 351 31 (set (reg:DI 5 di)
        (reg:DI 0 ax [224])) "main.c":41:23 66 {*movdi_internal}
     (nil))
(call_insn 351 350 354 31 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7ffa22e57300 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) "main.c":41:23 677 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 354 351 355 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:111 _30 ] [111])
            (const_int 0 [0]))) "main.c":41:9 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 355 354 356 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 353)
            (pc))) "main.c":41:9 659 {*jcc}
     (nil)
 -> 353)
;;  succ:       9
;;              32 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172 173 174 178

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       31 (FALLTHRU,DFS_BACK)
;;              7 [always] 
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172 173 174 178
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 112 225
(code_label 356 355 357 32 14 (nil) [1 uses])
(note 357 356 358 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 358 357 359 32 (set (reg:DI 0 ax [225])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -376 [0xfffffffffffffe88])) [10 fSensor+0 S8 A64])) "main.c":40:13 66 {*movdi_internal}
     (nil))
(insn 359 358 360 32 (set (reg:DI 5 di)
        (reg:DI 0 ax [225])) "main.c":40:13 66 {*movdi_internal}
     (nil))
(call_insn 360 359 363 32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("feof") [flags 0x41]  <function_decl 0x7ffa22e64300 feof>) [0 feof S1 A8])
            (const_int 0 [0]))) "main.c":40:13 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 363 360 364 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:112 _31 ] [112])
            (const_int 0 [0]))) "main.c":40:11 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 364 363 365 32 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 362)
            (pc))) "main.c":40:11 659 {*jcc}
     (nil)
 -> 362)
;;  succ:       8
;;              33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 172 173 174 178

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 173 174 178
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 173 174
;; lr  def 	 17 [flags] 113 180
(note 365 364 366 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 366 365 369 33 (set (reg/f:DI 0 ax [orig:113 _44 ] [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [8 ans+0 S8 A64])) "main.c":60:12 66 {*movdi_internal}
     (nil))
(insn 369 366 24 33 (set (reg/f:DI 1 dx [orig:180 <retval> ] [180])
        (reg/f:DI 0 ax [orig:113 _44 ] [113])) "main.c":60:12 66 {*movdi_internal}
     (nil))
(insn 24 369 25 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 43 r15 [174])
            (reg:DI 3 bx [173]))) "main.c":32:40 12 {*cmpdi_1}
     (nil))
(jump_insn 25 24 384 33 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) "main.c":32:40 659 {*jcc}
     (nil)
 -> 33)
;;  succ:       35
;;              34 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 173 178 180

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 173 178 180
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 173 178
;; lr  def 	 179
(note 384 25 26 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 26 384 418 34 (set (mem:DI (reg:DI 3 bx [173]) [0  S8 A8])
        (const_int 1172321806 [0x45e0360e])) "main.c":32:40 66 {*movdi_internal}
     (nil))
(insn 418 26 27 34 (set (reg:TI 4 si [239])
        (const_wide_int 0xf5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5)) "main.c":32:40 65 {*movti_internal}
     (nil))
(insn 27 418 419 34 (set (mem:TI (plus:DI (reg:DI 40 r12 [178])
                (const_int 2147450880 [0x7fff8000])) [7  S16 A8])
        (reg:TI 4 si [239])) "main.c":32:40 65 {*movti_internal}
     (nil))
(note 419 27 28 34 NOTE_INSN_DELETED)
(insn 28 419 29 34 (set (mem:TI (plus:DI (reg:DI 40 r12 [178])
                (const_int 2147450896 [0x7fff8010])) [7  S16 A8])
        (reg:TI 4 si [240])) "main.c":32:40 65 {*movti_internal}
     (nil))
(insn 29 28 30 34 (set (reg:DI 0 ax [179])
        (mem:DI (plus:DI (reg:DI 3 bx [173])
                (const_int 248 [0xf8])) [0  S8 A8])) "main.c":32:40 66 {*movdi_internal}
     (nil))
(insn 30 29 395 34 (set (mem:QI (reg:DI 0 ax [179]) [0  S1 A8])
        (const_int 0 [0])) "main.c":32:40 69 {*movqi_internal}
     (nil))
(jump_insn 395 30 396 34 (set (pc)
        (label_ref 37)) 660 {jump}
     (nil)
 -> 37)
;;  succ:       36 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 180

(barrier 396 395 33)
;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL, MODIFIED)
;;  pred:       33
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 178 180
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 178
;; lr  def 	
(code_label 33 396 385 35 10 (nil) [1 uses])
(note 385 33 34 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 34 385 35 35 (set (mem:SI (plus:DI (reg:DI 40 r12 [178])
                (const_int 2147450880 [0x7fff8000])) [7  S4 A8])
        (const_int 0 [0])) "main.c":32:40 67 {*movsi_internal}
     (nil))
(insn 35 34 36 35 (set (mem:DI (plus:DI (reg:DI 40 r12 [178])
                (const_int 2147450900 [0x7fff8014])) [7  S8 A8])
        (const_int 0 [0])) "main.c":32:40 66 {*movdi_internal}
     (nil))
(insn 36 35 37 35 (set (mem:SI (plus:DI (reg:DI 40 r12 [178])
                (const_int 2147450908 [0x7fff801c])) [7  S4 A8])
        (const_int 0 [0])) "main.c":32:40 67 {*movsi_internal}
     (nil))
;;  succ:       36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 180

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;;              34 [always] 
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 180
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 37 36 386 36 11 (nil) [1 uses])
(note 386 37 373 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 373 386 374 36 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -56 [0xffffffffffffffc8])) [13 D.3491+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (reg:DI 0 ax [228]))
        ]) "main.c":61:1 978 {stack_protect_test_di}
     (nil))
(jump_insn 374 373 387 36 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 377)
            (pc))) "main.c":61:1 659 {*jcc}
     (nil)
 -> 377)
;;  succ:       38
;;              37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 180

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 38, flags: (RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 387 374 375 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(call_insn 375 387 376 37 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7ffa22b3e700 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "main.c":61:1 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 376 375 377)
;; basic block 38, loop depth 0, maybe hot
;;  prev block 37, next block 1, flags: (RTL, MODIFIED)
;;  pred:       36
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 180
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 180
;; lr  def 	 0 [ax]
(code_label 377 376 388 38 30 (nil) [1 uses])
(note 388 377 378 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 378 388 379 38 (set (reg/i:DI 0 ax)
        (reg/f:DI 1 dx [orig:180 <retval> ] [180])) "main.c":61:1 66 {*movdi_internal}
     (nil))
(insn 379 378 397 38 (use (reg/i:DI 0 ax)) "main.c":61:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 397 379 0 NOTE_INSN_DELETED)

;; Function addRec (addRec, funcdef_no=2, decl_uid=3430, cgraph_uid=3, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 20:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=206 from oldreg=112, assigning class GENERAL_REGS to r206
   20: {r206:DI=r206:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  287: r206:DI=r111:DI
    Inserting insn reload after:
  288: r112:DI=r206:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 36:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=207 from oldreg=117, assigning class GENERAL_REGS to r207
   36: {r207:DI=r207:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  289: r207:DI=r116:DI
    Inserting insn reload after:
  290: r117:DI=r207:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 39:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 55:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 57:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=208 from oldreg=122, assigning class GENERAL_REGS to r208
   57: {r208:DI=r208:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  291: r208:DI=r121:DI
    Inserting insn reload after:
  292: r122:DI=r208:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 58:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 60:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 71:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 79:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=209 from oldreg=127, assigning class GENERAL_REGS to r209
   79: {r209:DI=r209:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  293: r209:DI=r126:DI
    Inserting insn reload after:
  294: r127:DI=r209:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 80:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 82:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 95:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=210 from oldreg=132, assigning class GENERAL_REGS to r210
   95: {r210:DI=r210:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  295: r210:DI=r131:DI
    Inserting insn reload after:
  296: r132:DI=r210:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 96:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 98:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 115:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=211 from oldreg=137, assigning class GENERAL_REGS to r211
  115: {r211:DI=r211:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  297: r211:DI=r136:DI
    Inserting insn reload after:
  298: r137:DI=r211:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 118:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 129:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 130:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 132:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=212 from oldreg=142, assigning class GENERAL_REGS to r212
  132: {r212:DI=r212:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  299: r212:DI=r141:DI
    Inserting insn reload after:
  300: r142:DI=r212:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 135:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 144:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 147:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 148:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 150:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 152:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=213 from oldreg=147, assigning class GENERAL_REGS to r213
  152: {r213:DI=r213:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  301: r213:DI=r146:DI
    Inserting insn reload after:
  302: r147:DI=r213:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 153:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 155:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 164:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 165:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 169:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=214 from oldreg=152, assigning class GENERAL_REGS to r214
  169: {r214:DI=r214:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  303: r214:DI=r151:DI
    Inserting insn reload after:
  304: r152:DI=r214:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 170:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 172:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 181:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 182:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 183:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 184:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 185:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 189:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=215 from oldreg=157, assigning class GENERAL_REGS to r215
  189: {r215:DI=r215:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  305: r215:DI=r156:DI
    Inserting insn reload after:
  306: r157:DI=r215:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 192:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 201:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 202:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 203:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 204:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 206:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=216 from oldreg=162, assigning class GENERAL_REGS to r216
  206: {r216:DI=r216:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  307: r216:DI=r161:DI
    Inserting insn reload after:
  308: r162:DI=r216:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 207:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 209:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 218:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 220:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 221:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 222:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 223:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 226:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 231:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 232:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 234:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=217 from oldreg=167, assigning class GENERAL_REGS to r217
  234: {r217:DI=r217:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  309: r217:DI=r166:DI
    Inserting insn reload after:
  310: r167:DI=r217:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 235:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 237:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 246:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 247:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 248:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 253:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 254:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 256:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=218 from oldreg=172, assigning class GENERAL_REGS to r218
  256: {r218:DI=r218:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  311: r218:DI=r171:DI
    Inserting insn reload after:
  312: r172:DI=r218:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 257:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 259:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 268:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 269:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 270:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36

********** Pseudo live ranges #1: **********

  BB 6
   Insn 28: point = 0, n_alt = 0
   Insn 27: point = 0, n_alt = -2
  BB 8
   Insn 44: point = 2, n_alt = 0
   Insn 43: point = 2, n_alt = -2
  BB 11
   Insn 65: point = 4, n_alt = 0
   Insn 64: point = 4, n_alt = -2
  BB 14
   Insn 87: point = 6, n_alt = 0
   Insn 86: point = 6, n_alt = -2
  BB 16
   Insn 103: point = 8, n_alt = 0
   Insn 102: point = 8, n_alt = -2
  BB 19
   Insn 123: point = 10, n_alt = 0
   Insn 122: point = 10, n_alt = -2
  BB 21
   Insn 140: point = 12, n_alt = 0
   Insn 139: point = 12, n_alt = -2
  BB 23
   Insn 160: point = 14, n_alt = 0
   Insn 159: point = 14, n_alt = -2
  BB 25
   Insn 177: point = 16, n_alt = 0
   Insn 176: point = 16, n_alt = -2
  BB 27
   Insn 197: point = 18, n_alt = 0
   Insn 196: point = 18, n_alt = -2
  BB 29
   Insn 214: point = 20, n_alt = 0
   Insn 213: point = 20, n_alt = -2
  BB 32
   Insn 242: point = 22, n_alt = 0
   Insn 241: point = 22, n_alt = -2
  BB 34
   Insn 264: point = 24, n_alt = 0
   Insn 263: point = 24, n_alt = -2
  BB 36
   Insn 278: point = 26, n_alt = -1
   Insn 277: point = 26, n_alt = -2
   Insn 273: point = 27, n_alt = -2
  BB 30
   Insn 284: point = 30, n_alt = -1
   Insn 226: point = 30, n_alt = 3
   Insn 225: point = 31, n_alt = 0
   Insn 224: point = 31, n_alt = -2
   Insn 223: point = 32, n_alt = 3
   Insn 222: point = 33, n_alt = 5
   Insn 221: point = 34, n_alt = 3
   Insn 220: point = 35, n_alt = 3
   Insn 219: point = 37, n_alt = 3
   Insn 218: point = 39, n_alt = 3
  BB 28
   Insn 211: point = 41, n_alt = -1
   Insn 210: point = 41, n_alt = 0
   Insn 209: point = 42, n_alt = 4
   Insn 208: point = 44, n_alt = -2
   Insn 207: point = 46, n_alt = 0
   Insn 308: point = 48, n_alt = -2
	Hard reg 1 is preferable by r216 with profit 1000
   Insn 206: point = 50, n_alt = 0
   Insn 307: point = 51, n_alt = -2
	Hard reg 1 is preferable by r216 with profit 1000
	Hard reg 0 is preferable by r216 with profit 1000
   Insn 205: point = 52, n_alt = -2
   Insn 204: point = 54, n_alt = 0
   Insn 203: point = 56, n_alt = 3
   Insn 202: point = 57, n_alt = 3
   Insn 201: point = 59, n_alt = 3
  BB 26
   Insn 194: point = 60, n_alt = -1
   Insn 193: point = 60, n_alt = 0
   Insn 192: point = 61, n_alt = 4
   Insn 191: point = 63, n_alt = -2
   Insn 190: point = 65, n_alt = 0
   Insn 306: point = 67, n_alt = -2
	Hard reg 1 is preferable by r215 with profit 1000
   Insn 189: point = 69, n_alt = 0
   Insn 305: point = 70, n_alt = -2
	Hard reg 1 is preferable by r215 with profit 1000
	Hard reg 0 is preferable by r215 with profit 1000
   Insn 188: point = 71, n_alt = -2
   Insn 187: point = 73, n_alt = 0
   Insn 186: point = 75, n_alt = 3
   Insn 185: point = 76, n_alt = 5
   Insn 184: point = 77, n_alt = 3
   Insn 183: point = 78, n_alt = 3
   Insn 182: point = 80, n_alt = 3
   Insn 181: point = 82, n_alt = 3
  BB 24
   Insn 174: point = 84, n_alt = -1
   Insn 173: point = 84, n_alt = 0
   Insn 172: point = 85, n_alt = 4
   Insn 171: point = 87, n_alt = -2
   Insn 170: point = 89, n_alt = 0
   Insn 304: point = 91, n_alt = -2
	Hard reg 1 is preferable by r214 with profit 1000
   Insn 169: point = 93, n_alt = 0
   Insn 303: point = 94, n_alt = -2
	Hard reg 1 is preferable by r214 with profit 1000
	Hard reg 0 is preferable by r214 with profit 1000
   Insn 168: point = 95, n_alt = -2
   Insn 167: point = 97, n_alt = 0
   Insn 166: point = 99, n_alt = 3
   Insn 165: point = 100, n_alt = 3
   Insn 164: point = 102, n_alt = 3
  BB 22
   Insn 157: point = 103, n_alt = -1
   Insn 156: point = 103, n_alt = 0
   Insn 155: point = 104, n_alt = 4
   Insn 154: point = 106, n_alt = -2
   Insn 153: point = 108, n_alt = 0
   Insn 302: point = 110, n_alt = -2
	Hard reg 1 is preferable by r213 with profit 1000
   Insn 152: point = 112, n_alt = 0
   Insn 301: point = 113, n_alt = -2
	Hard reg 1 is preferable by r213 with profit 1000
	Hard reg 0 is preferable by r213 with profit 1000
   Insn 151: point = 114, n_alt = -2
   Insn 150: point = 116, n_alt = 0
   Insn 149: point = 118, n_alt = 3
   Insn 148: point = 119, n_alt = 5
   Insn 147: point = 120, n_alt = 3
   Insn 146: point = 121, n_alt = 3
   Insn 145: point = 123, n_alt = 3
   Insn 144: point = 125, n_alt = 3
  BB 20
   Insn 137: point = 127, n_alt = -1
   Insn 136: point = 127, n_alt = 0
   Insn 135: point = 128, n_alt = 4
   Insn 134: point = 130, n_alt = -2
   Insn 133: point = 132, n_alt = 0
   Insn 300: point = 134, n_alt = -2
	Hard reg 1 is preferable by r212 with profit 1000
   Insn 132: point = 136, n_alt = 0
   Insn 299: point = 137, n_alt = -2
	Hard reg 1 is preferable by r212 with profit 1000
	Hard reg 0 is preferable by r212 with profit 1000
   Insn 131: point = 138, n_alt = -2
   Insn 130: point = 140, n_alt = 0
   Insn 129: point = 142, n_alt = 3
   Insn 128: point = 143, n_alt = 3
   Insn 127: point = 145, n_alt = 3
  BB 18
   Insn 120: point = 146, n_alt = -1
   Insn 119: point = 146, n_alt = 0
   Insn 118: point = 147, n_alt = 4
   Insn 117: point = 149, n_alt = -2
   Insn 116: point = 151, n_alt = 0
   Insn 298: point = 153, n_alt = -2
	Hard reg 1 is preferable by r211 with profit 1000
   Insn 115: point = 155, n_alt = 0
   Insn 297: point = 156, n_alt = -2
	Hard reg 1 is preferable by r211 with profit 1000
	Hard reg 0 is preferable by r211 with profit 1000
   Insn 114: point = 157, n_alt = -2
   Insn 113: point = 159, n_alt = 0
   Insn 112: point = 161, n_alt = 3
  BB 12
   Insn 282: point = 162, n_alt = -1
   Insn 72: point = 162, n_alt = 3
   Insn 71: point = 163, n_alt = 5
   Insn 70: point = 164, n_alt = 3
   Insn 69: point = 165, n_alt = 3
  BB 10
   Insn 62: point = 166, n_alt = -1
   Insn 61: point = 166, n_alt = 0
   Insn 60: point = 167, n_alt = 4
   Insn 59: point = 169, n_alt = -2
   Insn 58: point = 171, n_alt = 0
   Insn 292: point = 173, n_alt = -2
	Hard reg 1 is preferable by r208 with profit 1000
   Insn 57: point = 175, n_alt = 0
   Insn 291: point = 176, n_alt = -2
	Hard reg 1 is preferable by r208 with profit 1000
	Hard reg 0 is preferable by r208 with profit 1000
   Insn 56: point = 177, n_alt = -2
   Insn 55: point = 179, n_alt = 0
   Insn 54: point = 181, n_alt = 3
  BB 3
   Insn 280: point = 182, n_alt = -1
   Insn 10: point = 182, n_alt = 3
  BB 35
   Insn 270: point = 183, n_alt = 3
   Insn 269: point = 184, n_alt = 5
   Insn 268: point = 185, n_alt = 3
  BB 33
   Insn 261: point = 187, n_alt = -1
   Insn 260: point = 187, n_alt = 0
   Insn 259: point = 188, n_alt = 4
   Insn 258: point = 190, n_alt = -2
   Insn 257: point = 192, n_alt = 0
   Insn 312: point = 194, n_alt = -2
	Hard reg 2 is preferable by r218 with profit 1000
   Insn 256: point = 196, n_alt = 0
   Insn 311: point = 197, n_alt = -2
	Hard reg 2 is preferable by r218 with profit 1000
	Hard reg 1 is preferable by r218 with profit 1000
   Insn 255: point = 198, n_alt = -2
   Insn 254: point = 200, n_alt = 0
   Insn 253: point = 202, n_alt = 3
   Insn 252: point = 203, n_alt = -2
   Insn 251: point = 204, n_alt = 0
   Insn 250: point = 204, n_alt = -2
   Insn 249: point = 205, n_alt = -2
   Insn 248: point = 206, n_alt = 3
   Insn 247: point = 207, n_alt = 3
   Insn 246: point = 209, n_alt = 3
  BB 31
   Insn 239: point = 210, n_alt = -1
   Insn 238: point = 210, n_alt = 0
   Insn 237: point = 211, n_alt = 4
   Insn 236: point = 213, n_alt = -2
   Insn 235: point = 215, n_alt = 0
   Insn 310: point = 217, n_alt = -2
	Hard reg 1 is preferable by r217 with profit 1000
   Insn 234: point = 219, n_alt = 0
   Insn 309: point = 220, n_alt = -2
	Hard reg 1 is preferable by r217 with profit 1000
	Hard reg 0 is preferable by r217 with profit 1000
   Insn 233: point = 221, n_alt = -2
   Insn 232: point = 223, n_alt = 0
   Insn 231: point = 225, n_alt = 3
  BB 17
   Insn 110: point = 226, n_alt = -1
   Insn 109: point = 226, n_alt = 0
   Insn 108: point = 227, n_alt = 3
   Insn 107: point = 229, n_alt = 3
  BB 15
   Insn 100: point = 231, n_alt = -1
   Insn 99: point = 231, n_alt = 0
   Insn 98: point = 232, n_alt = 4
   Insn 97: point = 234, n_alt = -2
   Insn 96: point = 236, n_alt = 0
   Insn 296: point = 238, n_alt = -2
	Hard reg 1 is preferable by r210 with profit 1000
   Insn 95: point = 240, n_alt = 0
   Insn 295: point = 241, n_alt = -2
	Hard reg 1 is preferable by r210 with profit 1000
	Hard reg 0 is preferable by r210 with profit 1000
   Insn 94: point = 242, n_alt = -2
   Insn 93: point = 244, n_alt = 3
   Insn 92: point = 245, n_alt = 3
   Insn 91: point = 247, n_alt = 3
  BB 13
   Insn 84: point = 248, n_alt = -1
   Insn 83: point = 248, n_alt = 0
   Insn 82: point = 249, n_alt = 4
   Insn 81: point = 251, n_alt = -2
   Insn 80: point = 253, n_alt = 0
   Insn 294: point = 255, n_alt = -2
	Hard reg 1 is preferable by r209 with profit 1000
   Insn 79: point = 257, n_alt = 0
   Insn 293: point = 258, n_alt = -2
	Hard reg 1 is preferable by r209 with profit 1000
	Hard reg 0 is preferable by r209 with profit 1000
   Insn 78: point = 259, n_alt = -2
   Insn 77: point = 261, n_alt = 3
  BB 9
   Insn 51: point = 262, n_alt = -1
   Insn 50: point = 262, n_alt = 0
   Insn 49: point = 263, n_alt = 3
   Insn 48: point = 265, n_alt = 3
  BB 7
   Insn 41: point = 267, n_alt = -1
   Insn 40: point = 267, n_alt = 0
   Insn 39: point = 268, n_alt = 4
   Insn 38: point = 270, n_alt = -2
   Insn 37: point = 272, n_alt = 0
   Insn 290: point = 274, n_alt = -2
	Hard reg 1 is preferable by r207 with profit 1000
   Insn 36: point = 276, n_alt = 0
   Insn 289: point = 277, n_alt = -2
	Hard reg 1 is preferable by r207 with profit 1000
	Hard reg 0 is preferable by r207 with profit 1000
   Insn 35: point = 278, n_alt = -2
   Insn 34: point = 280, n_alt = 3
   Insn 33: point = 281, n_alt = 3
   Insn 32: point = 283, n_alt = 3
  BB 5
   Insn 25: point = 284, n_alt = -1
   Insn 24: point = 284, n_alt = 0
   Insn 23: point = 285, n_alt = 4
   Insn 22: point = 287, n_alt = -2
   Insn 21: point = 289, n_alt = 0
   Insn 288: point = 291, n_alt = -2
	Hard reg 1 is preferable by r206 with profit 1000
   Insn 20: point = 293, n_alt = 0
   Insn 287: point = 294, n_alt = -2
	Hard reg 1 is preferable by r206 with profit 1000
	Hard reg 0 is preferable by r206 with profit 1000
   Insn 19: point = 295, n_alt = -2
   Insn 18: point = 297, n_alt = 3
  BB 4
   Insn 16: point = 298, n_alt = -1
   Insn 15: point = 298, n_alt = 1
  BB 2
   Insn 8: point = 298, n_alt = -1
   Insn 7: point = 298, n_alt = 1
   Insn 3: point = 298, n_alt = 5
   Insn 2: point = 298, n_alt = 5
 r82: [262..281]
 r83: [262..263]
 r84: [226..245]
 r85: [226..227]
 r86: [122..143]
 r87: [122..123]
 r88: [119..121]
 r89: [79..100]
 r90: [79..80]
 r91: [76..78]
 r92: [36..57]
 r93: [36..37]
 r94: [33..35]
 r95: [204..207]
 r96: [184..203]
 r97: [182..183] [162..162] [28..30]
 r98: [296..297]
 r99: [279..280]
 r100: [178..179]
 r101: [260..261]
 r102: [243..244]
 r103: [158..159]
 r104: [139..140]
 r105: [115..116]
 r106: [96..97]
 r107: [72..73]
 r108: [53..54]
 r109: [222..223]
 r110: [199..200]
 r111: [284..295] [0..1]
 r112: [290..291]
 r113: [288..289]
 r114: [286..287]
 r115: [284..285]
 r116: [267..278] [2..3]
 r117: [273..274]
 r118: [271..272]
 r119: [269..270]
 r120: [267..268]
 r121: [166..177] [4..5]
 r122: [172..173]
 r123: [170..171]
 r124: [168..169]
 r125: [166..167]
 r126: [248..259] [6..7]
 r127: [254..255]
 r128: [252..253]
 r129: [250..251]
 r130: [248..249]
 r131: [231..242] [8..9]
 r132: [237..238]
 r133: [235..236]
 r134: [233..234]
 r135: [231..232]
 r136: [146..157] [10..11]
 r137: [152..153]
 r138: [150..151]
 r139: [148..149]
 r140: [146..147]
 r141: [127..138] [12..13]
 r142: [133..134]
 r143: [131..132]
 r144: [129..130]
 r145: [127..128]
 r146: [103..114] [14..15]
 r147: [109..110]
 r148: [107..108]
 r149: [105..106]
 r150: [103..104]
 r151: [84..95] [16..17]
 r152: [90..91]
 r153: [88..89]
 r154: [86..87]
 r155: [84..85]
 r156: [60..71] [18..19]
 r157: [66..67]
 r158: [64..65]
 r159: [62..63]
 r160: [60..61]
 r161: [41..52] [20..21]
 r162: [47..48]
 r163: [45..46]
 r164: [43..44]
 r165: [41..42]
 r166: [210..221] [22..23]
 r167: [216..217]
 r168: [214..215]
 r169: [212..213]
 r170: [210..211]
 r171: [187..198] [24..25]
 r172: [193..194]
 r173: [191..192]
 r174: [189..190]
 r175: [187..188]
 r176: [26..27]
 r177: [282..283]
 r178: [264..265]
 r179: [180..181]
 r180: [163..165]
 r181: [163..164]
 r182: [246..247]
 r183: [228..229]
 r184: [160..161]
 r185: [144..145]
 r186: [141..142]
 r187: [124..125]
 r188: [119..120]
 r189: [117..118]
 r190: [101..102]
 r191: [98..99]
 r192: [81..82]
 r193: [76..77]
 r194: [74..75]
 r195: [58..59]
 r196: [55..56]
 r197: [38..39]
 r198: [33..34]
 r199: [31..32]
 r200: [224..225]
 r201: [208..209]
 r202: [205..206]
 r203: [201..202]
 r204: [184..185]
 r206: [292..294]
 r207: [275..277]
 r208: [174..176]
 r209: [256..258]
 r210: [239..241]
 r211: [154..156]
 r212: [135..137]
 r213: [111..113]
 r214: [92..94]
 r215: [68..70]
 r216: [49..51]
 r217: [218..220]
 r218: [195..197]
Compressing live ranges: from 298 to 253 - 84%
Ranges after the compression:
 r82: [223..238]
 r83: [223..224]
 r84: [193..208]
 r85: [193..194]
 r86: [106..123]
 r87: [106..107]
 r88: [104..105]
 r89: [70..87]
 r90: [70..71]
 r91: [68..69]
 r92: [34..51]
 r93: [34..35]
 r94: [32..33]
 r95: [175..176]
 r96: [159..174]
 r97: [157..158] [140..140] [28..29]
 r98: [251..252]
 r99: [237..238]
 r100: [153..154]
 r101: [221..222]
 r102: [207..208]
 r103: [136..137]
 r104: [120..121]
 r105: [100..101]
 r106: [84..85]
 r107: [64..65]
 r108: [48..49]
 r109: [189..190]
 r110: [171..172]
 r111: [241..250] [0..1]
 r112: [247..248]
 r113: [245..246]
 r114: [243..244]
 r115: [241..242]
 r116: [227..236] [2..3]
 r117: [233..234]
 r118: [231..232]
 r119: [229..230]
 r120: [227..228]
 r121: [143..152] [4..5]
 r122: [149..150]
 r123: [147..148]
 r124: [145..146]
 r125: [143..144]
 r126: [211..220] [6..7]
 r127: [217..218]
 r128: [215..216]
 r129: [213..214]
 r130: [211..212]
 r131: [197..206] [8..9]
 r132: [203..204]
 r133: [201..202]
 r134: [199..200]
 r135: [197..198]
 r136: [126..135] [10..11]
 r137: [132..133]
 r138: [130..131]
 r139: [128..129]
 r140: [126..127]
 r141: [110..119] [12..13]
 r142: [116..117]
 r143: [114..115]
 r144: [112..113]
 r145: [110..111]
 r146: [90..99] [14..15]
 r147: [96..97]
 r148: [94..95]
 r149: [92..93]
 r150: [90..91]
 r151: [74..83] [16..17]
 r152: [80..81]
 r153: [78..79]
 r154: [76..77]
 r155: [74..75]
 r156: [54..63] [18..19]
 r157: [60..61]
 r158: [58..59]
 r159: [56..57]
 r160: [54..55]
 r161: [38..47] [20..21]
 r162: [44..45]
 r163: [42..43]
 r164: [40..41]
 r165: [38..39]
 r166: [179..188] [22..23]
 r167: [185..186]
 r168: [183..184]
 r169: [181..182]
 r170: [179..180]
 r171: [161..170] [24..25]
 r172: [167..168]
 r173: [165..166]
 r174: [163..164]
 r175: [161..162]
 r176: [26..27]
 r177: [239..240]
 r178: [225..226]
 r179: [155..156]
 r180: [141..142]
 r181: [141..142]
 r182: [209..210]
 r183: [195..196]
 r184: [138..139]
 r185: [124..125]
 r186: [122..123]
 r187: [108..109]
 r188: [104..105]
 r189: [102..103]
 r190: [88..89]
 r191: [86..87]
 r192: [72..73]
 r193: [68..69]
 r194: [66..67]
 r195: [52..53]
 r196: [50..51]
 r197: [36..37]
 r198: [32..33]
 r199: [30..31]
 r200: [191..192]
 r201: [177..178]
 r202: [175..176]
 r203: [173..174]
 r204: [159..160]
 r206: [249..250]
 r207: [235..236]
 r208: [151..152]
 r209: [219..220]
 r210: [205..206]
 r211: [134..135]
 r212: [118..119]
 r213: [98..99]
 r214: [82..83]
 r215: [62..63]
 r216: [46..47]
 r217: [187..188]
 r218: [169..170]

********** Assignment #1: **********

	 Assigning to 206 (cl=GENERAL_REGS, orig=112, freq=3000, tfirst=206, tfreq=3000)...
	   Assign 1 to reload r206 (freq=3000)
	 Assigning to 207 (cl=GENERAL_REGS, orig=117, freq=3000, tfirst=207, tfreq=3000)...
	   Assign 1 to reload r207 (freq=3000)
	 Assigning to 208 (cl=GENERAL_REGS, orig=122, freq=3000, tfirst=208, tfreq=3000)...
	   Assign 1 to reload r208 (freq=3000)
	 Assigning to 209 (cl=GENERAL_REGS, orig=127, freq=3000, tfirst=209, tfreq=3000)...
	   Assign 1 to reload r209 (freq=3000)
	 Assigning to 210 (cl=GENERAL_REGS, orig=132, freq=3000, tfirst=210, tfreq=3000)...
	   Assign 1 to reload r210 (freq=3000)
	 Assigning to 211 (cl=GENERAL_REGS, orig=137, freq=3000, tfirst=211, tfreq=3000)...
	   Assign 1 to reload r211 (freq=3000)
	 Assigning to 212 (cl=GENERAL_REGS, orig=142, freq=3000, tfirst=212, tfreq=3000)...
	   Assign 1 to reload r212 (freq=3000)
	 Assigning to 213 (cl=GENERAL_REGS, orig=147, freq=3000, tfirst=213, tfreq=3000)...
	   Assign 1 to reload r213 (freq=3000)
	 Assigning to 214 (cl=GENERAL_REGS, orig=152, freq=3000, tfirst=214, tfreq=3000)...
	   Assign 1 to reload r214 (freq=3000)
	 Assigning to 215 (cl=GENERAL_REGS, orig=157, freq=3000, tfirst=215, tfreq=3000)...
	   Assign 1 to reload r215 (freq=3000)
	 Assigning to 216 (cl=GENERAL_REGS, orig=162, freq=3000, tfirst=216, tfreq=3000)...
	   Assign 1 to reload r216 (freq=3000)
	 Assigning to 217 (cl=GENERAL_REGS, orig=167, freq=3000, tfirst=217, tfreq=3000)...
	   Assign 1 to reload r217 (freq=3000)
	 Assigning to 218 (cl=GENERAL_REGS, orig=172, freq=3000, tfirst=218, tfreq=3000)...
	   Assign 2 to reload r218 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 33
changing reg in insn 50
changing reg in insn 49
changing reg in insn 50
changing reg in insn 92
changing reg in insn 109
changing reg in insn 108
changing reg in insn 109
changing reg in insn 128
changing reg in insn 146
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 148
changing reg in insn 165
changing reg in insn 183
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 185
changing reg in insn 202
changing reg in insn 220
changing reg in insn 219
changing reg in insn 220
changing reg in insn 220
changing reg in insn 222
changing reg in insn 247
changing reg in insn 250
changing reg in insn 252
changing reg in insn 269
changing reg in insn 270
changing reg in insn 226
changing reg in insn 72
changing reg in insn 10
changing reg in insn 273
changing reg in insn 18
changing reg in insn 19
changing reg in insn 34
changing reg in insn 35
changing reg in insn 55
changing reg in insn 56
changing reg in insn 77
changing reg in insn 78
changing reg in insn 93
changing reg in insn 94
changing reg in insn 113
changing reg in insn 114
changing reg in insn 130
changing reg in insn 131
changing reg in insn 150
changing reg in insn 151
changing reg in insn 167
changing reg in insn 168
changing reg in insn 187
changing reg in insn 188
changing reg in insn 204
changing reg in insn 205
changing reg in insn 232
changing reg in insn 233
changing reg in insn 254
changing reg in insn 255
changing reg in insn 19
changing reg in insn 27
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 35
changing reg in insn 43
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 56
changing reg in insn 64
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 78
changing reg in insn 86
changing reg in insn 80
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 94
changing reg in insn 102
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 114
changing reg in insn 122
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 119
changing reg in insn 131
changing reg in insn 139
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 151
changing reg in insn 159
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 155
changing reg in insn 155
changing reg in insn 156
changing reg in insn 168
changing reg in insn 176
changing reg in insn 170
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 173
changing reg in insn 188
changing reg in insn 196
changing reg in insn 190
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 193
changing reg in insn 205
changing reg in insn 213
changing reg in insn 207
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 210
changing reg in insn 233
changing reg in insn 241
changing reg in insn 235
changing reg in insn 235
changing reg in insn 236
changing reg in insn 236
changing reg in insn 237
changing reg in insn 237
changing reg in insn 238
changing reg in insn 255
changing reg in insn 263
changing reg in insn 257
changing reg in insn 257
changing reg in insn 258
changing reg in insn 258
changing reg in insn 259
changing reg in insn 259
changing reg in insn 260
changing reg in insn 273
changing reg in insn 277
changing reg in insn 32
changing reg in insn 33
changing reg in insn 48
changing reg in insn 49
changing reg in insn 54
changing reg in insn 55
changing reg in insn 69
changing reg in insn 71
changing reg in insn 70
changing reg in insn 71
changing reg in insn 91
changing reg in insn 92
changing reg in insn 107
changing reg in insn 108
changing reg in insn 112
changing reg in insn 113
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 144
changing reg in insn 145
changing reg in insn 147
changing reg in insn 148
changing reg in insn 149
changing reg in insn 150
changing reg in insn 164
changing reg in insn 165
changing reg in insn 166
changing reg in insn 167
changing reg in insn 181
changing reg in insn 182
changing reg in insn 184
changing reg in insn 185
changing reg in insn 186
changing reg in insn 187
changing reg in insn 201
changing reg in insn 202
changing reg in insn 203
changing reg in insn 204
changing reg in insn 218
changing reg in insn 219
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 224
changing reg in insn 231
changing reg in insn 232
changing reg in insn 246
changing reg in insn 247
changing reg in insn 248
changing reg in insn 249
changing reg in insn 253
changing reg in insn 254
changing reg in insn 268
changing reg in insn 269
deleting insn with uid = 19.
deleting insn with uid = 288.
deleting insn with uid = 22.
deleting insn with uid = 35.
deleting insn with uid = 290.
deleting insn with uid = 38.
deleting insn with uid = 56.
deleting insn with uid = 292.
deleting insn with uid = 59.
deleting insn with uid = 78.
deleting insn with uid = 294.
deleting insn with uid = 81.
deleting insn with uid = 94.
deleting insn with uid = 296.
deleting insn with uid = 97.
deleting insn with uid = 114.
deleting insn with uid = 298.
deleting insn with uid = 117.
deleting insn with uid = 131.
deleting insn with uid = 300.
deleting insn with uid = 134.
deleting insn with uid = 151.
deleting insn with uid = 302.
deleting insn with uid = 154.
deleting insn with uid = 168.
deleting insn with uid = 304.
deleting insn with uid = 171.
deleting insn with uid = 188.
deleting insn with uid = 306.
deleting insn with uid = 191.
deleting insn with uid = 205.
deleting insn with uid = 308.
deleting insn with uid = 208.
deleting insn with uid = 233.
deleting insn with uid = 310.
deleting insn with uid = 236.
deleting insn with uid = 252.
deleting insn with uid = 255.
deleting insn with uid = 312.
deleting insn with uid = 258.
deleting insn with uid = 273.
deleting insn with uid = 277.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 65.
verify found no changes in insn with uid = 87.
verify found no changes in insn with uid = 103.
verify found no changes in insn with uid = 123.
verify found no changes in insn with uid = 140.
verify found no changes in insn with uid = 160.
verify found no changes in insn with uid = 177.
verify found no changes in insn with uid = 197.
verify found no changes in insn with uid = 214.
verify found no changes in insn with uid = 225.
verify found no changes in insn with uid = 242.
verify found no changes in insn with uid = 251.
verify found no changes in insn with uid = 264.


addRec

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={62d,57u} r1={72d,57u} r2={25d,9u} r4={17d,2u} r5={31d,16u} r6={1d,76u} r7={1d,51u} r8={15d} r9={15d} r10={15d} r11={15d} r12={15d} r13={15d} r14={15d} r15={15d} r17={70d,17u} r18={15d} r19={1d,1u,9e} r20={16d} r21={16d} r22={16d} r23={16d} r24={16d} r25={16d} r26={16d} r27={16d} r28={15d} r29={15d} r30={15d} r31={15d} r32={15d} r33={15d} r34={15d} r35={15d} r36={16d} r37={16d} r38={15d} r39={15d} r44={15d} r45={15d} r46={15d} r47={15d} r48={15d} r49={15d} r50={15d} r51={15d} r52={15d} r53={15d} r54={15d} r55={15d} r56={15d} r57={15d} r58={15d} r59={15d} r60={15d} r61={15d} r62={15d} r63={15d} r64={15d} r65={15d} r66={15d} r67={15d} r68={15d} r69={15d} r70={15d} r71={15d} r72={15d} r73={15d} r74={15d} r75={15d} 
;;    total ref usage 1500{1205d,286u,9e} in 187{172 regular + 15 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])
        (reg:DI 5 di [ years ])) "main.c":63:43 66 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])
        (reg:DI 4 si [ ans ])) "main.c":63:43 66 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])
            (const_int 0 [0]))) "main.c":64:7 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 13)
            (pc))) "main.c":64:7 659 {*jcc}
     (nil)
 -> 13)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 97
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 280 3 (set (reg/f:DI 0 ax [orig:97 _16 ] [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":65:16 66 {*movdi_internal}
     (nil))
(jump_insn 280 10 281 3 (set (pc)
        (label_ref 271)) "main.c":65:16 660 {jump}
     (nil)
 -> 271)
;;  succ:       36 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 97

(barrier 281 280 13)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 13 281 14 4 32 (nil) [1 uses])
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])
            (const_int 0 [0]))) "main.c":67:8 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 16 15 17 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) "main.c":67:8 659 {*jcc}
     (nil)
 -> 52)
;;  succ:       10
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 98 111 112 113 114 115
(note 17 16 18 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 287 5 (set (reg/f:DI 0 ax [orig:98 _32 ] [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":67:32 66 {*movdi_internal}
     (nil))
(insn 287 18 20 5 (set (reg:DI 1 dx [orig:112 _60 ] [112])
        (reg:DI 0 ax [orig:111 _59 ] [111])) "main.c":67:32 66 {*movdi_internal}
     (nil))
(insn 20 287 21 5 (parallel [
            (set (reg:DI 1 dx [orig:112 _60 ] [112])
                (lshiftrt:DI (reg:DI 1 dx [orig:112 _60 ] [112])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":67:32 566 {*lshrdi3_1}
     (nil))
(insn 21 20 23 5 (parallel [
            (set (reg:DI 1 dx [orig:113 _61 ] [113])
                (plus:DI (reg:DI 1 dx [orig:112 _60 ] [112])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":67:32 191 {*adddi_1}
     (nil))
(insn 23 21 24 5 (set (reg:QI 1 dx [orig:115 _63 ] [115])
        (mem:QI (reg/f:DI 1 dx [orig:114 _62 ] [114]) [7 *_62+0 S1 A8])) "main.c":67:32 69 {*movqi_internal}
     (nil))
(insn 24 23 25 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:115 _63 ] [115])
            (const_int 0 [0]))) "main.c":67:32 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 25 24 26 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "main.c":67:32 659 {*jcc}
     (nil)
 -> 30)
;;  succ:       7 [100.0% (guessed)] 
;;              6 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 111

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 [0.0% (guessed)]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 111
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 111
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 26 25 27 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:111 _59 ] [111])) "main.c":67:32 66 {*movdi_internal}
     (nil))
(call_insn 28 27 29 6 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":67:32 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 29 28 30)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5 [100.0% (guessed)] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 99 116 117 118 119 120 177
(code_label 30 29 31 7 35 (nil) [1 uses])
(note 31 30 32 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 7 (set (reg/f:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":67:32 66 {*movdi_internal}
     (nil))
(insn 33 32 34 7 (set (reg:DI 2 cx [orig:82 _1 ] [82])
        (mem:DI (reg/f:DI 0 ax [177]) [2 years_19(D)->year+0 S8 A64])) "main.c":67:32 66 {*movdi_internal}
     (nil))
(insn 34 33 289 7 (set (reg/f:DI 0 ax [orig:99 _33 ] [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])) "main.c":67:44 66 {*movdi_internal}
     (nil))
(insn 289 34 36 7 (set (reg:DI 1 dx [orig:117 _65 ] [117])
        (reg:DI 0 ax [orig:116 _64 ] [116])) "main.c":67:44 66 {*movdi_internal}
     (nil))
(insn 36 289 37 7 (parallel [
            (set (reg:DI 1 dx [orig:117 _65 ] [117])
                (lshiftrt:DI (reg:DI 1 dx [orig:117 _65 ] [117])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":67:44 566 {*lshrdi3_1}
     (nil))
(insn 37 36 39 7 (parallel [
            (set (reg:DI 1 dx [orig:118 _66 ] [118])
                (plus:DI (reg:DI 1 dx [orig:117 _65 ] [117])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":67:44 191 {*adddi_1}
     (nil))
(insn 39 37 40 7 (set (reg:QI 1 dx [orig:120 _68 ] [120])
        (mem:QI (reg/f:DI 1 dx [orig:119 _67 ] [119]) [7 *_67+0 S1 A8])) "main.c":67:44 69 {*movqi_internal}
     (nil))
(insn 40 39 41 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:120 _68 ] [120])
            (const_int 0 [0]))) "main.c":67:44 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 41 40 42 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 46)
            (pc))) "main.c":67:44 659 {*jcc}
     (nil)
 -> 46)
;;  succ:       9 [100.0% (guessed)] 
;;              8 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82 116

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 [0.0% (guessed)]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 116
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 116
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 42 41 43 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:116 _64 ] [116])) "main.c":67:44 66 {*movdi_internal}
     (nil))
(call_insn 44 43 45 8 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":67:44 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 45 44 46)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       7 [100.0% (guessed)] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; lr  def 	 17 [flags] 83 178
(code_label 46 45 47 9 36 (nil) [1 uses])
(note 47 46 48 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 9 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])) "main.c":67:44 66 {*movdi_internal}
     (nil))
(insn 49 48 50 9 (set (reg:DI 0 ax [orig:83 _2 ] [83])
        (mem:DI (reg/f:DI 0 ax [178]) [2 ans_18(D)->year+0 S8 A64])) "main.c":67:44 66 {*movdi_internal}
     (nil))
(insn 50 49 51 9 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 2 cx [orig:82 _1 ] [82])
            (reg:DI 0 ax [orig:83 _2 ] [83]))) "main.c":67:24 12 {*cmpdi_1}
     (nil))
(jump_insn 51 50 52 9 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) "main.c":67:24 659 {*jcc}
     (nil)
 -> 75)
;;  succ:       10 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       4
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 100 121 122 123 124 125 179
(code_label 52 51 53 10 34 (nil) [1 uses])
(note 53 52 54 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 10 (set (reg/f:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])) "main.c":68:19 66 {*movdi_internal}
     (nil))
(insn 55 54 291 10 (parallel [
            (set (reg/f:DI 0 ax [orig:100 _34 ] [100])
                (plus:DI (reg/f:DI 0 ax [179])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":68:19 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 291 55 57 10 (set (reg:DI 1 dx [orig:122 _70 ] [122])
        (reg:DI 0 ax [orig:121 _69 ] [121])) "main.c":68:19 66 {*movdi_internal}
     (nil))
(insn 57 291 58 10 (parallel [
            (set (reg:DI 1 dx [orig:122 _70 ] [122])
                (lshiftrt:DI (reg:DI 1 dx [orig:122 _70 ] [122])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":68:19 566 {*lshrdi3_1}
     (nil))
(insn 58 57 60 10 (parallel [
            (set (reg:DI 1 dx [orig:123 _71 ] [123])
                (plus:DI (reg:DI 1 dx [orig:122 _70 ] [122])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":68:19 191 {*adddi_1}
     (nil))
(insn 60 58 61 10 (set (reg:QI 1 dx [orig:125 _73 ] [125])
        (mem:QI (reg/f:DI 1 dx [orig:124 _72 ] [124]) [7 *_72+0 S1 A8])) "main.c":68:19 69 {*movqi_internal}
     (nil))
(insn 61 60 62 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:125 _73 ] [125])
            (const_int 0 [0]))) "main.c":68:19 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 62 61 63 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) "main.c":68:19 659 {*jcc}
     (nil)
 -> 67)
;;  succ:       12 [100.0% (guessed)] 
;;              11 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 121

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 [0.0% (guessed)]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 121
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 121
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 63 62 64 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:121 _69 ] [121])) "main.c":68:19 66 {*movdi_internal}
     (nil))
(call_insn 65 64 66 11 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7ffa22daaf00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "main.c":68:19 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 66 65 67)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       10 [100.0% (guessed)] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 97 180 181
(code_label 67 66 68 12 38 (nil) [1 uses])
(note 68 67 69 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 12 (set (reg/f:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])) "main.c":68:19 66 {*movdi_internal}
     (nil))
(insn 70 69 71 12 (set (reg/f:DI 1 dx [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":68:19 66 {*movdi_internal}
     (nil))
(insn 71 70 72 12 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [180])
                (const_int 32 [0x20])) [6 ans_18(D)->tail+0 S8 A64])
        (reg/f:DI 1 dx [181])) "main.c":68:19 66 {*movdi_internal}
     (nil))
(insn 72 71 282 12 (set (reg/f:DI 0 ax [orig:97 _16 ] [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])) "main.c":69:16 66 {*movdi_internal}
     (nil))
(jump_insn 282 72 283 12 (set (pc)
        (label_ref 271)) "main.c":69:16 660 {jump}
     (nil)
 -> 271)
;;  succ:       36 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 97

(barrier 283 282 75)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       9
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 101 126 127 128 129 130
(code_label 75 283 76 13 37 (nil) [1 uses])
(note 76 75 77 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 293 13 (set (reg/f:DI 0 ax [orig:101 _35 ] [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":71:13 66 {*movdi_internal}
     (nil))
(insn 293 77 79 13 (set (reg:DI 1 dx [orig:127 _75 ] [127])
        (reg:DI 0 ax [orig:126 _74 ] [126])) "main.c":71:13 66 {*movdi_internal}
     (nil))
(insn 79 293 80 13 (parallel [
            (set (reg:DI 1 dx [orig:127 _75 ] [127])
                (lshiftrt:DI (reg:DI 1 dx [orig:127 _75 ] [127])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":71:13 566 {*lshrdi3_1}
     (nil))
(insn 80 79 82 13 (parallel [
            (set (reg:DI 1 dx [orig:128 _76 ] [128])
                (plus:DI (reg:DI 1 dx [orig:127 _75 ] [127])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":71:13 191 {*adddi_1}
     (nil))
(insn 82 80 83 13 (set (reg:QI 1 dx [orig:130 _78 ] [130])
        (mem:QI (reg/f:DI 1 dx [orig:129 _77 ] [129]) [7 *_77+0 S1 A8])) "main.c":71:13 69 {*movqi_internal}
     (nil))
(insn 83 82 84 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:130 _78 ] [130])
            (const_int 0 [0]))) "main.c":71:13 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 84 83 85 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 89)
            (pc))) "main.c":71:13 659 {*jcc}
     (nil)
 -> 89)
;;  succ:       15 [100.0% (guessed)] 
;;              14 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 126

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 [0.0% (guessed)]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 126
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 85 84 86 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:126 _74 ] [126])) "main.c":71:13 66 {*movdi_internal}
     (nil))
(call_insn 87 86 88 14 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":71:13 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 88 87 89)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       13 [100.0% (guessed)] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 84 102 131 132 133 134 135 182
(code_label 89 88 90 15 39 (nil) [1 uses])
(note 90 89 91 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 15 (set (reg/f:DI 0 ax [182])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":71:13 66 {*movdi_internal}
     (nil))
(insn 92 91 93 15 (set (reg:DI 2 cx [orig:84 _3 ] [84])
        (mem:DI (reg/f:DI 0 ax [182]) [2 years_19(D)->year+0 S8 A64])) "main.c":71:13 66 {*movdi_internal}
     (nil))
(insn 93 92 295 15 (set (reg/f:DI 0 ax [orig:102 _36 ] [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])) "main.c":71:26 66 {*movdi_internal}
     (nil))
(insn 295 93 95 15 (set (reg:DI 1 dx [orig:132 _80 ] [132])
        (reg:DI 0 ax [orig:131 _79 ] [131])) "main.c":71:26 66 {*movdi_internal}
     (nil))
(insn 95 295 96 15 (parallel [
            (set (reg:DI 1 dx [orig:132 _80 ] [132])
                (lshiftrt:DI (reg:DI 1 dx [orig:132 _80 ] [132])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":71:26 566 {*lshrdi3_1}
     (nil))
(insn 96 95 98 15 (parallel [
            (set (reg:DI 1 dx [orig:133 _81 ] [133])
                (plus:DI (reg:DI 1 dx [orig:132 _80 ] [132])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":71:26 191 {*adddi_1}
     (nil))
(insn 98 96 99 15 (set (reg:QI 1 dx [orig:135 _83 ] [135])
        (mem:QI (reg/f:DI 1 dx [orig:134 _82 ] [134]) [7 *_82+0 S1 A8])) "main.c":71:26 69 {*movqi_internal}
     (nil))
(insn 99 98 100 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:135 _83 ] [135])
            (const_int 0 [0]))) "main.c":71:26 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 100 99 101 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 105)
            (pc))) "main.c":71:26 659 {*jcc}
     (nil)
 -> 105)
;;  succ:       17 [100.0% (guessed)] 
;;              16 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84 131

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 [0.0% (guessed)]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 131
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 131
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 101 100 102 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:131 _79 ] [131])) "main.c":71:26 66 {*movdi_internal}
     (nil))
(call_insn 103 102 104 16 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":71:26 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 104 103 105)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       15 [100.0% (guessed)] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 84
;; lr  def 	 17 [flags] 85 183
(code_label 105 104 106 17 40 (nil) [1 uses])
(note 106 105 107 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 17 (set (reg/f:DI 0 ax [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])) "main.c":71:26 66 {*movdi_internal}
     (nil))
(insn 108 107 109 17 (set (reg:DI 0 ax [orig:85 _4 ] [85])
        (mem:DI (reg/f:DI 0 ax [183]) [2 ans_18(D)->year+0 S8 A64])) "main.c":71:26 66 {*movdi_internal}
     (nil))
(insn 109 108 110 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 2 cx [orig:84 _3 ] [84])
            (reg:DI 0 ax [orig:85 _4 ] [85]))) "main.c":71:7 12 {*cmpdi_1}
     (nil))
(jump_insn 110 109 111 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 229)
            (pc))) "main.c":71:7 659 {*jcc}
     (nil)
 -> 229)
;;  succ:       18 (FALLTHRU)
;;              31
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 103 136 137 138 139 140 184
(note 111 110 112 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 112 111 113 18 (set (reg/f:DI 0 ax [184])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":72:22 66 {*movdi_internal}
     (nil))
(insn 113 112 297 18 (parallel [
            (set (reg/f:DI 0 ax [orig:103 _37 ] [103])
                (plus:DI (reg/f:DI 0 ax [184])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":72:22 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 297 113 115 18 (set (reg:DI 1 dx [orig:137 _85 ] [137])
        (reg:DI 0 ax [orig:136 _84 ] [136])) "main.c":72:22 66 {*movdi_internal}
     (nil))
(insn 115 297 116 18 (parallel [
            (set (reg:DI 1 dx [orig:137 _85 ] [137])
                (lshiftrt:DI (reg:DI 1 dx [orig:137 _85 ] [137])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":72:22 566 {*lshrdi3_1}
     (nil))
(insn 116 115 118 18 (parallel [
            (set (reg:DI 1 dx [orig:138 _86 ] [138])
                (plus:DI (reg:DI 1 dx [orig:137 _85 ] [137])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":72:22 191 {*adddi_1}
     (nil))
(insn 118 116 119 18 (set (reg:QI 1 dx [orig:140 _88 ] [140])
        (mem:QI (reg/f:DI 1 dx [orig:139 _87 ] [139]) [7 *_87+0 S1 A8])) "main.c":72:22 69 {*movqi_internal}
     (nil))
(insn 119 118 120 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:140 _88 ] [140])
            (const_int 0 [0]))) "main.c":72:22 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 120 119 121 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 125)
            (pc))) "main.c":72:22 659 {*jcc}
     (nil)
 -> 125)
;;  succ:       20 [100.0% (guessed)] 
;;              19 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 136

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 [0.0% (guessed)]  (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 136
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 136
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 121 120 122 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 19 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:136 _84 ] [136])) "main.c":72:22 66 {*movdi_internal}
     (nil))
(call_insn 123 122 124 19 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":72:22 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 124 123 125)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       18 [100.0% (guessed)] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 86 104 141 142 143 144 145 185 186
(code_label 125 124 126 20 42 (nil) [1 uses])
(note 126 125 127 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 128 20 (set (reg/f:DI 0 ax [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":72:22 66 {*movdi_internal}
     (nil))
(insn 128 127 129 20 (set (reg:DI 2 cx [orig:86 _5 ] [86])
        (mem:DI (plus:DI (reg/f:DI 0 ax [185])
                (const_int 8 [0x8])) [2 years_19(D)->total+0 S8 A64])) "main.c":72:22 66 {*movdi_internal}
     (nil))
(insn 129 128 130 20 (set (reg/f:DI 0 ax [186])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])) "main.c":72:28 66 {*movdi_internal}
     (nil))
(insn 130 129 299 20 (parallel [
            (set (reg/f:DI 0 ax [orig:104 _38 ] [104])
                (plus:DI (reg/f:DI 0 ax [186])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":72:28 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 299 130 132 20 (set (reg:DI 1 dx [orig:142 _90 ] [142])
        (reg:DI 0 ax [orig:141 _89 ] [141])) "main.c":72:28 66 {*movdi_internal}
     (nil))
(insn 132 299 133 20 (parallel [
            (set (reg:DI 1 dx [orig:142 _90 ] [142])
                (lshiftrt:DI (reg:DI 1 dx [orig:142 _90 ] [142])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":72:28 566 {*lshrdi3_1}
     (nil))
(insn 133 132 135 20 (parallel [
            (set (reg:DI 1 dx [orig:143 _91 ] [143])
                (plus:DI (reg:DI 1 dx [orig:142 _90 ] [142])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":72:28 191 {*adddi_1}
     (nil))
(insn 135 133 136 20 (set (reg:QI 1 dx [orig:145 _93 ] [145])
        (mem:QI (reg/f:DI 1 dx [orig:144 _92 ] [144]) [7 *_92+0 S1 A8])) "main.c":72:28 69 {*movqi_internal}
     (nil))
(insn 136 135 137 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:145 _93 ] [145])
            (const_int 0 [0]))) "main.c":72:28 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 137 136 138 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 142)
            (pc))) "main.c":72:28 659 {*jcc}
     (nil)
 -> 142)
;;  succ:       22 [100.0% (guessed)] 
;;              21 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 141

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 [0.0% (guessed)]  (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 141
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 141
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 138 137 139 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 21 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:141 _89 ] [141])) "main.c":72:28 66 {*movdi_internal}
     (nil))
(call_insn 140 139 141 21 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":72:28 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 141 140 142)
;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       20 [100.0% (guessed)] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
;; lr  def 	 17 [flags] 87 88 105 146 147 148 149 150 187 188 189
(code_label 142 141 143 22 43 (nil) [1 uses])
(note 143 142 144 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 144 143 145 22 (set (reg/f:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])) "main.c":72:28 66 {*movdi_internal}
     (nil))
(insn 145 144 146 22 (set (reg:DI 0 ax [orig:87 _6 ] [87])
        (mem:DI (plus:DI (reg/f:DI 0 ax [187])
                (const_int 8 [0x8])) [2 ans_18(D)->total+0 S8 A64])) "main.c":72:28 66 {*movdi_internal}
     (nil))
(insn 146 145 147 22 (parallel [
            (set (reg:DI 1 dx [orig:88 _7 ] [88])
                (plus:DI (reg:DI 2 cx [orig:86 _5 ] [86])
                    (reg:DI 0 ax [orig:87 _6 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":72:22 191 {*adddi_1}
     (nil))
(insn 147 146 148 22 (set (reg/f:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":72:22 66 {*movdi_internal}
     (nil))
(insn 148 147 149 22 (set (mem:DI (plus:DI (reg/f:DI 0 ax [188])
                (const_int 8 [0x8])) [2 years_19(D)->total+0 S8 A64])
        (reg:DI 1 dx [orig:88 _7 ] [88])) "main.c":72:22 66 {*movdi_internal}
     (nil))
(insn 149 148 150 22 (set (reg/f:DI 0 ax [189])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":73:22 66 {*movdi_internal}
     (nil))
(insn 150 149 301 22 (parallel [
            (set (reg/f:DI 0 ax [orig:105 _39 ] [105])
                (plus:DI (reg/f:DI 0 ax [189])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":73:22 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 301 150 152 22 (set (reg:DI 1 dx [orig:147 _95 ] [147])
        (reg:DI 0 ax [orig:146 _94 ] [146])) "main.c":73:22 66 {*movdi_internal}
     (nil))
(insn 152 301 153 22 (parallel [
            (set (reg:DI 1 dx [orig:147 _95 ] [147])
                (lshiftrt:DI (reg:DI 1 dx [orig:147 _95 ] [147])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":73:22 566 {*lshrdi3_1}
     (nil))
(insn 153 152 155 22 (parallel [
            (set (reg:DI 1 dx [orig:148 _96 ] [148])
                (plus:DI (reg:DI 1 dx [orig:147 _95 ] [147])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":73:22 191 {*adddi_1}
     (nil))
(insn 155 153 156 22 (set (reg:QI 1 dx [orig:150 _98 ] [150])
        (mem:QI (reg/f:DI 1 dx [orig:149 _97 ] [149]) [7 *_97+0 S1 A8])) "main.c":73:22 69 {*movqi_internal}
     (nil))
(insn 156 155 157 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:150 _98 ] [150])
            (const_int 0 [0]))) "main.c":73:22 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 157 156 158 22 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 162)
            (pc))) "main.c":73:22 659 {*jcc}
     (nil)
 -> 162)
;;  succ:       24 [100.0% (guessed)] 
;;              23 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 146

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 [0.0% (guessed)]  (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 146
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 146
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 158 157 159 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 159 158 160 23 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:146 _94 ] [146])) "main.c":73:22 66 {*movdi_internal}
     (nil))
(call_insn 160 159 161 23 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":73:22 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 161 160 162)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       22 [100.0% (guessed)] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 89 106 151 152 153 154 155 190 191
(code_label 162 161 163 24 44 (nil) [1 uses])
(note 163 162 164 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 164 163 165 24 (set (reg/f:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":73:22 66 {*movdi_internal}
     (nil))
(insn 165 164 166 24 (set (reg:DI 2 cx [orig:89 _8 ] [89])
        (mem:DI (plus:DI (reg/f:DI 0 ax [190])
                (const_int 16 [0x10])) [2 years_19(D)->Dweek+0 S8 A64])) "main.c":73:22 66 {*movdi_internal}
     (nil))
(insn 166 165 167 24 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])) "main.c":73:28 66 {*movdi_internal}
     (nil))
(insn 167 166 303 24 (parallel [
            (set (reg/f:DI 0 ax [orig:106 _40 ] [106])
                (plus:DI (reg/f:DI 0 ax [191])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":73:28 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 303 167 169 24 (set (reg:DI 1 dx [orig:152 _100 ] [152])
        (reg:DI 0 ax [orig:151 _99 ] [151])) "main.c":73:28 66 {*movdi_internal}
     (nil))
(insn 169 303 170 24 (parallel [
            (set (reg:DI 1 dx [orig:152 _100 ] [152])
                (lshiftrt:DI (reg:DI 1 dx [orig:152 _100 ] [152])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":73:28 566 {*lshrdi3_1}
     (nil))
(insn 170 169 172 24 (parallel [
            (set (reg:DI 1 dx [orig:153 _101 ] [153])
                (plus:DI (reg:DI 1 dx [orig:152 _100 ] [152])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":73:28 191 {*adddi_1}
     (nil))
(insn 172 170 173 24 (set (reg:QI 1 dx [orig:155 _103 ] [155])
        (mem:QI (reg/f:DI 1 dx [orig:154 _102 ] [154]) [7 *_102+0 S1 A8])) "main.c":73:28 69 {*movqi_internal}
     (nil))
(insn 173 172 174 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:155 _103 ] [155])
            (const_int 0 [0]))) "main.c":73:28 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 174 173 175 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 179)
            (pc))) "main.c":73:28 659 {*jcc}
     (nil)
 -> 179)
;;  succ:       26 [100.0% (guessed)] 
;;              25 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89 151

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 [0.0% (guessed)]  (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 151
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 151
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 175 174 176 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 176 175 177 25 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:151 _99 ] [151])) "main.c":73:28 66 {*movdi_internal}
     (nil))
(call_insn 177 176 178 25 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":73:28 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 178 177 179)
;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       24 [100.0% (guessed)] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89
;; lr  def 	 17 [flags] 90 91 107 156 157 158 159 160 192 193 194
(code_label 179 178 180 26 45 (nil) [1 uses])
(note 180 179 181 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 181 180 182 26 (set (reg/f:DI 0 ax [192])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])) "main.c":73:28 66 {*movdi_internal}
     (nil))
(insn 182 181 183 26 (set (reg:DI 0 ax [orig:90 _9 ] [90])
        (mem:DI (plus:DI (reg/f:DI 0 ax [192])
                (const_int 16 [0x10])) [2 ans_18(D)->Dweek+0 S8 A64])) "main.c":73:28 66 {*movdi_internal}
     (nil))
(insn 183 182 184 26 (parallel [
            (set (reg:DI 1 dx [orig:91 _10 ] [91])
                (plus:DI (reg:DI 2 cx [orig:89 _8 ] [89])
                    (reg:DI 0 ax [orig:90 _9 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":73:22 191 {*adddi_1}
     (nil))
(insn 184 183 185 26 (set (reg/f:DI 0 ax [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":73:22 66 {*movdi_internal}
     (nil))
(insn 185 184 186 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [193])
                (const_int 16 [0x10])) [2 years_19(D)->Dweek+0 S8 A64])
        (reg:DI 1 dx [orig:91 _10 ] [91])) "main.c":73:22 66 {*movdi_internal}
     (nil))
(insn 186 185 187 26 (set (reg/f:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":74:25 66 {*movdi_internal}
     (nil))
(insn 187 186 305 26 (parallel [
            (set (reg/f:DI 0 ax [orig:107 _41 ] [107])
                (plus:DI (reg/f:DI 0 ax [194])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":74:25 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 305 187 189 26 (set (reg:DI 1 dx [orig:157 _105 ] [157])
        (reg:DI 0 ax [orig:156 _104 ] [156])) "main.c":74:25 66 {*movdi_internal}
     (nil))
(insn 189 305 190 26 (parallel [
            (set (reg:DI 1 dx [orig:157 _105 ] [157])
                (lshiftrt:DI (reg:DI 1 dx [orig:157 _105 ] [157])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":74:25 566 {*lshrdi3_1}
     (nil))
(insn 190 189 192 26 (parallel [
            (set (reg:DI 1 dx [orig:158 _106 ] [158])
                (plus:DI (reg:DI 1 dx [orig:157 _105 ] [157])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":74:25 191 {*adddi_1}
     (nil))
(insn 192 190 193 26 (set (reg:QI 1 dx [orig:160 _108 ] [160])
        (mem:QI (reg/f:DI 1 dx [orig:159 _107 ] [159]) [7 *_107+0 S1 A8])) "main.c":74:25 69 {*movqi_internal}
     (nil))
(insn 193 192 194 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:160 _108 ] [160])
            (const_int 0 [0]))) "main.c":74:25 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 194 193 195 26 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 199)
            (pc))) "main.c":74:25 659 {*jcc}
     (nil)
 -> 199)
;;  succ:       28 [100.0% (guessed)] 
;;              27 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 156

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       26 [0.0% (guessed)]  (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 156
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 156
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 195 194 196 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 196 195 197 27 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:156 _104 ] [156])) "main.c":74:25 66 {*movdi_internal}
     (nil))
(call_insn 197 196 198 27 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":74:25 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 198 197 199)
;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       26 [100.0% (guessed)] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 92 108 161 162 163 164 165 195 196
(code_label 199 198 200 28 46 (nil) [1 uses])
(note 200 199 201 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 201 200 202 28 (set (reg/f:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":74:25 66 {*movdi_internal}
     (nil))
(insn 202 201 203 28 (set (reg:DI 2 cx [orig:92 _11 ] [92])
        (mem:DI (plus:DI (reg/f:DI 0 ax [195])
                (const_int 24 [0x18])) [2 years_19(D)->Dweekend+0 S8 A64])) "main.c":74:25 66 {*movdi_internal}
     (nil))
(insn 203 202 204 28 (set (reg/f:DI 0 ax [196])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])) "main.c":74:31 66 {*movdi_internal}
     (nil))
(insn 204 203 307 28 (parallel [
            (set (reg/f:DI 0 ax [orig:108 _42 ] [108])
                (plus:DI (reg/f:DI 0 ax [196])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":74:31 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 307 204 206 28 (set (reg:DI 1 dx [orig:162 _110 ] [162])
        (reg:DI 0 ax [orig:161 _109 ] [161])) "main.c":74:31 66 {*movdi_internal}
     (nil))
(insn 206 307 207 28 (parallel [
            (set (reg:DI 1 dx [orig:162 _110 ] [162])
                (lshiftrt:DI (reg:DI 1 dx [orig:162 _110 ] [162])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":74:31 566 {*lshrdi3_1}
     (nil))
(insn 207 206 209 28 (parallel [
            (set (reg:DI 1 dx [orig:163 _111 ] [163])
                (plus:DI (reg:DI 1 dx [orig:162 _110 ] [162])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":74:31 191 {*adddi_1}
     (nil))
(insn 209 207 210 28 (set (reg:QI 1 dx [orig:165 _113 ] [165])
        (mem:QI (reg/f:DI 1 dx [orig:164 _112 ] [164]) [7 *_112+0 S1 A8])) "main.c":74:31 69 {*movqi_internal}
     (nil))
(insn 210 209 211 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:165 _113 ] [165])
            (const_int 0 [0]))) "main.c":74:31 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 211 210 212 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 216)
            (pc))) "main.c":74:31 659 {*jcc}
     (nil)
 -> 216)
;;  succ:       30 [100.0% (guessed)] 
;;              29 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 92 161

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       28 [0.0% (guessed)]  (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 161
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 161
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 212 211 213 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 213 212 214 29 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:161 _109 ] [161])) "main.c":74:31 66 {*movdi_internal}
     (nil))
(call_insn 214 213 215 29 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":74:31 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 215 214 216)
;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       28 [100.0% (guessed)] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 92
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 92
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 93 94 97 197 198 199
(code_label 216 215 217 30 47 (nil) [1 uses])
(note 217 216 218 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 218 217 219 30 (set (reg/f:DI 0 ax [197])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])) "main.c":74:31 66 {*movdi_internal}
     (nil))
(insn 219 218 220 30 (set (reg:DI 0 ax [orig:93 _12 ] [93])
        (mem:DI (plus:DI (reg/f:DI 0 ax [197])
                (const_int 24 [0x18])) [2 ans_18(D)->Dweekend+0 S8 A64])) "main.c":74:31 66 {*movdi_internal}
     (nil))
(insn 220 219 221 30 (parallel [
            (set (reg:DI 1 dx [orig:94 _13 ] [94])
                (plus:DI (reg:DI 2 cx [orig:92 _11 ] [92])
                    (reg:DI 0 ax [orig:93 _12 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":74:25 191 {*adddi_1}
     (nil))
(insn 221 220 222 30 (set (reg/f:DI 0 ax [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":74:25 66 {*movdi_internal}
     (nil))
(insn 222 221 223 30 (set (mem:DI (plus:DI (reg/f:DI 0 ax [198])
                (const_int 24 [0x18])) [2 years_19(D)->Dweekend+0 S8 A64])
        (reg:DI 1 dx [orig:94 _13 ] [94])) "main.c":74:25 66 {*movdi_internal}
     (nil))
(insn 223 222 224 30 (set (reg:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])) "main.c":75:9 66 {*movdi_internal}
     (nil))
(insn 224 223 225 30 (set (reg:DI 5 di)
        (reg:DI 0 ax [199])) "main.c":75:9 66 {*movdi_internal}
     (nil))
(call_insn 225 224 226 30 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7ffa22d82600 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "main.c":75:9 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 226 225 284 30 (set (reg/f:DI 0 ax [orig:97 _16 ] [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":76:16 66 {*movdi_internal}
     (nil))
(jump_insn 284 226 285 30 (set (pc)
        (label_ref 271)) "main.c":76:16 660 {jump}
     (nil)
 -> 271)
;;  succ:       36 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 97

(barrier 285 284 229)
;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       17
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 109 166 167 168 169 170 200
(code_label 229 285 230 31 41 (nil) [1 uses])
(note 230 229 231 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 231 230 232 31 (set (reg/f:DI 0 ax [200])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":78:31 66 {*movdi_internal}
     (nil))
(insn 232 231 309 31 (parallel [
            (set (reg/f:DI 0 ax [orig:109 _43 ] [109])
                (plus:DI (reg/f:DI 0 ax [200])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":78:31 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 309 232 234 31 (set (reg:DI 1 dx [orig:167 _115 ] [167])
        (reg:DI 0 ax [orig:166 _114 ] [166])) "main.c":78:31 66 {*movdi_internal}
     (nil))
(insn 234 309 235 31 (parallel [
            (set (reg:DI 1 dx [orig:167 _115 ] [167])
                (lshiftrt:DI (reg:DI 1 dx [orig:167 _115 ] [167])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":78:31 566 {*lshrdi3_1}
     (nil))
(insn 235 234 237 31 (parallel [
            (set (reg:DI 1 dx [orig:168 _116 ] [168])
                (plus:DI (reg:DI 1 dx [orig:167 _115 ] [167])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":78:31 191 {*adddi_1}
     (nil))
(insn 237 235 238 31 (set (reg:QI 1 dx [orig:170 _118 ] [170])
        (mem:QI (reg/f:DI 1 dx [orig:169 _117 ] [169]) [7 *_117+0 S1 A8])) "main.c":78:31 69 {*movqi_internal}
     (nil))
(insn 238 237 239 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:170 _118 ] [170])
            (const_int 0 [0]))) "main.c":78:31 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 239 238 240 31 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 244)
            (pc))) "main.c":78:31 659 {*jcc}
     (nil)
 -> 244)
;;  succ:       33 [100.0% (guessed)] 
;;              32 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 166

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       31 [0.0% (guessed)]  (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 166
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 166
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 240 239 241 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 241 240 242 32 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:166 _114 ] [166])) "main.c":78:31 66 {*movdi_internal}
     (nil))
(call_insn 242 241 243 32 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":78:31 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 243 242 244)
;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL, MODIFIED)
;;  pred:       31 [100.0% (guessed)] 
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 95 96 110 171 172 173 174 175 201 202 203
(code_label 244 243 245 33 48 (nil) [1 uses])
(note 245 244 246 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 246 245 247 33 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":78:31 66 {*movdi_internal}
     (nil))
(insn 247 246 248 33 (set (reg/f:DI 0 ax [orig:95 _14 ] [95])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [201])
                (const_int 32 [0x20])) [6 years_19(D)->tail+0 S8 A64])) "main.c":78:31 66 {*movdi_internal}
     (nil))
(insn 248 247 249 33 (set (reg:DI 1 dx [202])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [6 ans+0 S8 A64])) "main.c":78:19 66 {*movdi_internal}
     (nil))
(insn 249 248 250 33 (set (reg:DI 4 si)
        (reg:DI 1 dx [202])) "main.c":78:19 66 {*movdi_internal}
     (nil))
(insn 250 249 251 33 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:95 _14 ] [95])) "main.c":78:19 66 {*movdi_internal}
     (nil))
(call_insn 251 250 253 33 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("addRec") [flags 0x3]  <function_decl 0x7ffa22b09700 addRec>) [0 addRec S1 A8])
            (const_int 0 [0]))) "main.c":78:19 677 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 253 251 254 33 (set (reg/f:DI 1 dx [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":78:17 66 {*movdi_internal}
     (nil))
(insn 254 253 311 33 (parallel [
            (set (reg/f:DI 1 dx [orig:110 _44 ] [110])
                (plus:DI (reg/f:DI 1 dx [203])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":78:17 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 311 254 256 33 (set (reg:DI 2 cx [orig:172 _120 ] [172])
        (reg:DI 1 dx [orig:171 _119 ] [171])) "main.c":78:17 66 {*movdi_internal}
     (nil))
(insn 256 311 257 33 (parallel [
            (set (reg:DI 2 cx [orig:172 _120 ] [172])
                (lshiftrt:DI (reg:DI 2 cx [orig:172 _120 ] [172])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":78:17 566 {*lshrdi3_1}
     (nil))
(insn 257 256 259 33 (parallel [
            (set (reg:DI 2 cx [orig:173 _121 ] [173])
                (plus:DI (reg:DI 2 cx [orig:172 _120 ] [172])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":78:17 191 {*adddi_1}
     (nil))
(insn 259 257 260 33 (set (reg:QI 2 cx [orig:175 _123 ] [175])
        (mem:QI (reg/f:DI 2 cx [orig:174 _122 ] [174]) [7 *_122+0 S1 A8])) "main.c":78:17 69 {*movqi_internal}
     (nil))
(insn 260 259 261 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:175 _123 ] [175])
            (const_int 0 [0]))) "main.c":78:17 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 261 260 262 33 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 266)
            (pc))) "main.c":78:17 659 {*jcc}
     (nil)
 -> 266)
;;  succ:       35 [100.0% (guessed)] 
;;              34 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96 171

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       33 [0.0% (guessed)]  (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 171
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 171
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 262 261 263 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 263 262 264 34 (set (reg:DI 5 di)
        (reg:DI 1 dx [orig:171 _119 ] [171])) "main.c":78:17 66 {*movdi_internal}
     (nil))
(call_insn 264 263 265 34 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7ffa22daaf00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "main.c":78:17 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 265 264 266)
;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL, MODIFIED)
;;  pred:       33 [100.0% (guessed)] 
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 96
;; lr  def 	 97 204
(code_label 266 265 267 35 49 (nil) [1 uses])
(note 267 266 268 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 268 267 269 35 (set (reg/f:DI 1 dx [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":78:17 66 {*movdi_internal}
     (nil))
(insn 269 268 270 35 (set (mem/f:DI (plus:DI (reg/f:DI 1 dx [204])
                (const_int 32 [0x20])) [6 years_19(D)->tail+0 S8 A64])
        (reg/f:DI 0 ax [orig:96 _15 ] [96])) "main.c":78:17 66 {*movdi_internal}
     (nil))
(insn 270 269 271 35 (set (reg/f:DI 0 ax [orig:97 _16 ] [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 years+0 S8 A64])) "main.c":79:12 66 {*movdi_internal}
     (nil))
;;  succ:       36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 97

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 1, flags: (RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;;              3 [always] 
;;              12 [always] 
;;              30 [always] 
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 97
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 97
;; lr  def 	 0 [ax] 176
(code_label 271 270 272 36 33 (nil) [3 uses])
(note 272 271 278 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 278 272 286 36 (use (reg/i:DI 0 ax)) "main.c":80:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 286 278 0 NOTE_INSN_DELETED)

;; Function createYearL (createYearL, funcdef_no=3, decl_uid=3397, cgraph_uid=4, symbol_order=3)

      Creating newreg=182
Removing SCRATCH in insn #41 (nop 2)
rescanning insn with uid = 41.
      Creating newreg=183
Removing SCRATCH in insn #294 (nop 3)
rescanning insn with uid = 294.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=448, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=400, prev_offset=0)
Can eliminate 19 to 6 (offset=-32, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 38:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 39:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 2:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) ?mr {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 6:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpdi_ccno_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 12:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 19:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=184 from oldreg=126, assigning class GENERAL_REGS to r184
   19: {r184:DI=r184:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  321: r184:DI=r121:DI
    Inserting insn reload after:
  322: r126:DI=r184:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) m  (1) re {*movsi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =m  (1) m  (2) =&r {stack_protect_set_di}
      Change to class INDEX_REGS for r182
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 44:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 46:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 58:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 59:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 63:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 67:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 70:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 76:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 79:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=185 from oldreg=101, assigning class GENERAL_REGS to r185
   79: {r185:DI=r185:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  323: r185:DI=r100:DI
    Inserting insn reload after:
  324: r101:DI=r185:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 80:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 82:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 93:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 94:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 95:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 98:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 103:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 104:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 105:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 108:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 114:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 115:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 116:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 119:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 124:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 125:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 126:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 129:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 135:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 136:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 137:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 140:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 141:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 146:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 147:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 148:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 151:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 157:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 158:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 161:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 162:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 164:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=186 from oldreg=106, assigning class GENERAL_REGS to r186
  164: {r186:DI=r186:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  325: r186:DI=r105:DI
    Inserting insn reload after:
  326: r106:DI=r186:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 165:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 167:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 176:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 178:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 181:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 189:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=187 from oldreg=111, assigning class GENERAL_REGS to r187
  189: {r187:DI=r187:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  327: r187:DI=r110:DI
    Inserting insn reload after:
  328: r111:DI=r187:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 192:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 201:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 202:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 203:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 205:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 206:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 209:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 210:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 212:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=188 from oldreg=116, assigning class GENERAL_REGS to r188
  212: {r188:DI=r188:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  329: r188:DI=r115:DI
    Inserting insn reload after:
  330: r116:DI=r188:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 213:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 215:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 224:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 225:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 226:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 228:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 229:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 230:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 231:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 236:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 237:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 238:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 239:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 240:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 241:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 242:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 243:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) rBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 252:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 253:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 254:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 257:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 261:  (0) ?mr {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 264:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 267:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 268:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 279:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 287:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 26:  (0) m  (1) re {*movdi_internal}
            Staticly defined alt reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=3 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=15,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
	 Choosing alt 1 in insn 27:  (0) o  (1) re {*movti_internal}
      Creating newreg=189, assigning class GENERAL_REGS to r189
   27: [r126:DI+0x7fff8000]=r189:TI
    Inserting insn reload before:
  331: r189:TI=<0xf5f5f5f5f5f5f5f5,0xf5f5f5f5f5f5f5f5>

            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 331:  (0) =!r  (1) riFo {*movti_internal}
      Change to class INDEX_REGS for r189
            Staticly defined alt reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=3 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=15,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
	 Choosing alt 1 in insn 28:  (0) o  (1) re {*movti_internal}
      Creating newreg=190, assigning class GENERAL_REGS to r190
   28: [r126:DI+0x7fff8010]=r190:TI
      REG_DEAD r126:DI
    Inserting insn reload before:
  332: r190:TI=<0xf5f5f5f5f5f5f5f5,0xf5f5f5f5f5f5f5f5>

            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =!r  (1) riFo {*movti_internal}
      Change to class INDEX_REGS for r190
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 30:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 35:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (1) m  (2) m  (3) =&r {stack_protect_test_di}
      Change to class INDEX_REGS for r183
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20 21
EBB 22
EBB 23 24 25
    [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
      Creating newreg=191 from oldreg=189, assigning class INDEX_REGS to invariant inheritance r191
  331: r189:TI=<0xf5f5f5f5f5f5f5f5,0xf5f5f5f5f5f5f5f5>
    Add invariant inheritance<-original after:
  333: r191:TI=r189:TI

  332: r190:TI=<0xf5f5f5f5f5f5f5f5,0xf5f5f5f5f5f5f5f5>
    Changing reload<-inheritance after:
  334: r190:TI=r191:TI

deleting insn with uid = 332.
    Invariant inheritance reuse change 191 (bb25):
  332: NOTE_INSN_DELETED
	  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
EBB 26
EBB 27 28
EBB 29

********** Pseudo live ranges #1: **********

  BB 9
   Insn 87: point = 0, n_alt = 0
   Insn 86: point = 0, n_alt = -2
  BB 12
   Insn 172: point = 2, n_alt = 0
   Insn 171: point = 2, n_alt = -2
  BB 15
   Insn 197: point = 4, n_alt = 0
   Insn 196: point = 4, n_alt = -2
  BB 18
   Insn 220: point = 6, n_alt = 0
   Insn 219: point = 6, n_alt = -2
  BB 28
   Insn 296: point = 8, n_alt = 0
  BB 29
   Insn 300: point = 8, n_alt = -1
   Insn 299: point = 8, n_alt = -2
  BB 27
   Insn 295: point = 10, n_alt = -1
   Insn 294: point = 10, n_alt = 0
  BB 25
   Insn 318: point = 13, n_alt = -1
   Insn 30: point = 13, n_alt = 8
   Insn 29: point = 14, n_alt = 3
   Insn 28: point = 16, n_alt = 1
   Insn 334: point = 17, n_alt = -1
	   Creating copy r190<-r191@1000
   Insn 27: point = 19, n_alt = 1
   Insn 333: point = 20, n_alt = -1
	   Creating copy r189->r191@1000
   Insn 331: point = 21, n_alt = 0
   Insn 26: point = 22, n_alt = 5
  BB 26
   Insn 36: point = 23, n_alt = 1
   Insn 35: point = 24, n_alt = 5
   Insn 34: point = 24, n_alt = 1
  BB 24
   Insn 25: point = 25, n_alt = -1
   Insn 24: point = 25, n_alt = 0
   Insn 290: point = 26, n_alt = -2
   Insn 287: point = 28, n_alt = 3
  BB 23
   Insn 285: point = 30, n_alt = -1
   Insn 284: point = 30, n_alt = 0
   Insn 282: point = 31, n_alt = -2
   Insn 281: point = 32, n_alt = 0
   Insn 280: point = 32, n_alt = -2
   Insn 279: point = 33, n_alt = 3
  BB 5
   Insn 310: point = 35, n_alt = -1
   Insn 50: point = 35, n_alt = 0
   Insn 49: point = 35, n_alt = -2
   Insn 48: point = 36, n_alt = 0
   Insn 47: point = 36, n_alt = -2
   Insn 46: point = 37, n_alt = 3
   Insn 45: point = 38, n_alt = 3
   Insn 44: point = 39, n_alt = 5
   Insn 41: point = 39, n_alt = 0
   Insn 23: point = 41, n_alt = 1
   Insn 22: point = 41, n_alt = 1
   Insn 21: point = 41, n_alt = 1
   Insn 20: point = 41, n_alt = 1
   Insn 322: point = 41, n_alt = -2
	Hard reg 40 is preferable by r184 with profit 1000
   Insn 19: point = 43, n_alt = 0
   Insn 321: point = 44, n_alt = -2
	Hard reg 40 is preferable by r184 with profit 1000
	Hard reg 3 is preferable by r184 with profit 1000
   Insn 18: point = 45, n_alt = 5
   Insn 17: point = 46, n_alt = 4
   Insn 16: point = 47, n_alt = 5
   Insn 15: point = 48, n_alt = 4
   Insn 14: point = 49, n_alt = 5
   Insn 13: point = 49, n_alt = -2
   Insn 12: point = 51, n_alt = 3
  BB 4
   Insn 10: point = 53, n_alt = -2
  BB 3
   Insn 9: point = 55, n_alt = -1
   Insn 8: point = 55, n_alt = 0
   Insn 7: point = 55, n_alt = 0
   Insn 6: point = 55, n_alt = 2
  BB 2
   Insn 5: point = 56, n_alt = -1
   Insn 4: point = 56, n_alt = 1
   Insn 3: point = 56, n_alt = -2
   Insn 2: point = 57, n_alt = 3
   Insn 39: point = 58, n_alt = 5
   Insn 38: point = 58, n_alt = 5
  BB 22
   Insn 276: point = 58, n_alt = -1
   Insn 275: point = 58, n_alt = 0
   Insn 273: point = 59, n_alt = -2
   Insn 272: point = 60, n_alt = 0
   Insn 271: point = 60, n_alt = -2
   Insn 270: point = 61, n_alt = 0
   Insn 269: point = 61, n_alt = -2
   Insn 268: point = 62, n_alt = 3
   Insn 267: point = 63, n_alt = 3
  BB 6
   Insn 312: point = 65, n_alt = -1
   Insn 54: point = 65, n_alt = 1
  BB 21
   Insn 264: point = 66, n_alt = 1
  BB 20
   Insn 262: point = 67, n_alt = -1
   Insn 261: point = 67, n_alt = 1
  BB 7
   Insn 314: point = 68, n_alt = -1
   Insn 63: point = 68, n_alt = 5
   Insn 62: point = 69, n_alt = -2
   Insn 61: point = 70, n_alt = 0
   Insn 60: point = 70, n_alt = -2
   Insn 59: point = 71, n_alt = 4
   Insn 58: point = 71, n_alt = 3
  BB 19
   Insn 257: point = 73, n_alt = 5
   Insn 256: point = 74, n_alt = -2
   Insn 255: point = 75, n_alt = 0
   Insn 254: point = 75, n_alt = 2
   Insn 253: point = 75, n_alt = 4
   Insn 252: point = 75, n_alt = 0
   Insn 251: point = 75, n_alt = 0
   Insn 250: point = 75, n_alt = -2
   Insn 249: point = 76, n_alt = -2
   Insn 248: point = 77, n_alt = -2
   Insn 247: point = 78, n_alt = -2
   Insn 246: point = 79, n_alt = -2
   Insn 245: point = 80, n_alt = -2
   Insn 244: point = 81, n_alt = 0
   Insn 243: point = 81, n_alt = 0
   Insn 242: point = 81, n_alt = 3
   Insn 241: point = 82, n_alt = 3
   Insn 240: point = 83, n_alt = 3
   Insn 239: point = 84, n_alt = 3
   Insn 238: point = 85, n_alt = 3
   Insn 237: point = 86, n_alt = 3
   Insn 236: point = 87, n_alt = 5
   Insn 235: point = 88, n_alt = -2
   Insn 234: point = 89, n_alt = 0
   Insn 233: point = 89, n_alt = -2
   Insn 232: point = 90, n_alt = -2
   Insn 231: point = 91, n_alt = 3
   Insn 230: point = 92, n_alt = 3
   Insn 229: point = 93, n_alt = 5
   Insn 228: point = 94, n_alt = 3
   Insn 227: point = 95, n_alt = 0
   Insn 226: point = 97, n_alt = 3
   Insn 225: point = 98, n_alt = 3
   Insn 224: point = 100, n_alt = 3
  BB 17
   Insn 217: point = 102, n_alt = -1
   Insn 216: point = 102, n_alt = 0
   Insn 215: point = 103, n_alt = 4
   Insn 214: point = 105, n_alt = -2
   Insn 213: point = 107, n_alt = 0
   Insn 330: point = 109, n_alt = -2
	Hard reg 1 is preferable by r188 with profit 1000
   Insn 212: point = 111, n_alt = 0
   Insn 329: point = 112, n_alt = -2
	Hard reg 1 is preferable by r188 with profit 1000
	Hard reg 0 is preferable by r188 with profit 1000
   Insn 211: point = 113, n_alt = -2
   Insn 210: point = 115, n_alt = 0
   Insn 209: point = 117, n_alt = 3
  BB 13
   Insn 316: point = 119, n_alt = -1
   Insn 181: point = 119, n_alt = 5
   Insn 180: point = 120, n_alt = 3
   Insn 179: point = 121, n_alt = 0
   Insn 178: point = 123, n_alt = 3
   Insn 177: point = 124, n_alt = 3
   Insn 176: point = 126, n_alt = 3
  BB 11
   Insn 169: point = 128, n_alt = -1
   Insn 168: point = 128, n_alt = 0
   Insn 167: point = 129, n_alt = 4
   Insn 166: point = 131, n_alt = -2
   Insn 165: point = 133, n_alt = 0
   Insn 326: point = 135, n_alt = -2
	Hard reg 1 is preferable by r186 with profit 1000
   Insn 164: point = 137, n_alt = 0
   Insn 325: point = 138, n_alt = -2
	Hard reg 1 is preferable by r186 with profit 1000
	Hard reg 0 is preferable by r186 with profit 1000
   Insn 163: point = 139, n_alt = -2
   Insn 162: point = 141, n_alt = 0
   Insn 161: point = 143, n_alt = 3
  BB 16
   Insn 206: point = 145, n_alt = 5
   Insn 205: point = 146, n_alt = 3
   Insn 204: point = 147, n_alt = 0
   Insn 203: point = 149, n_alt = 3
   Insn 202: point = 150, n_alt = 3
   Insn 201: point = 152, n_alt = 3
  BB 14
   Insn 194: point = 154, n_alt = -1
   Insn 193: point = 154, n_alt = 0
   Insn 192: point = 155, n_alt = 4
   Insn 191: point = 157, n_alt = -2
   Insn 190: point = 159, n_alt = 0
   Insn 328: point = 161, n_alt = -2
	Hard reg 1 is preferable by r187 with profit 1000
   Insn 189: point = 163, n_alt = 0
   Insn 327: point = 164, n_alt = -2
	Hard reg 1 is preferable by r187 with profit 1000
	Hard reg 0 is preferable by r187 with profit 1000
   Insn 188: point = 165, n_alt = -2
   Insn 187: point = 167, n_alt = 0
   Insn 186: point = 169, n_alt = 3
  BB 10
   Insn 159: point = 171, n_alt = -1
   Insn 158: point = 171, n_alt = 1
   Insn 157: point = 171, n_alt = 5
   Insn 156: point = 172, n_alt = 0
   Insn 155: point = 174, n_alt = -2
   Insn 154: point = 175, n_alt = 0
   Insn 153: point = 175, n_alt = -2
   Insn 152: point = 176, n_alt = 3
   Insn 151: point = 177, n_alt = 5
   Insn 150: point = 178, n_alt = -2
   Insn 149: point = 179, n_alt = 0
   Insn 148: point = 179, n_alt = 2
   Insn 147: point = 179, n_alt = 4
   Insn 146: point = 179, n_alt = 5
   Insn 145: point = 180, n_alt = 0
   Insn 144: point = 182, n_alt = -2
   Insn 143: point = 183, n_alt = 0
   Insn 142: point = 183, n_alt = -2
   Insn 141: point = 184, n_alt = 3
   Insn 140: point = 185, n_alt = 5
   Insn 139: point = 186, n_alt = -2
   Insn 138: point = 187, n_alt = 0
   Insn 137: point = 187, n_alt = 2
   Insn 136: point = 187, n_alt = 4
   Insn 135: point = 187, n_alt = 5
   Insn 134: point = 188, n_alt = 0
   Insn 133: point = 190, n_alt = -2
   Insn 132: point = 191, n_alt = 0
   Insn 131: point = 191, n_alt = -2
   Insn 130: point = 192, n_alt = 3
   Insn 129: point = 193, n_alt = 5
   Insn 128: point = 194, n_alt = -2
   Insn 127: point = 195, n_alt = 0
   Insn 126: point = 195, n_alt = 2
   Insn 125: point = 195, n_alt = 4
   Insn 124: point = 195, n_alt = 5
   Insn 123: point = 196, n_alt = -2
   Insn 122: point = 197, n_alt = 0
   Insn 121: point = 197, n_alt = -2
   Insn 120: point = 198, n_alt = 3
   Insn 119: point = 199, n_alt = 5
   Insn 118: point = 200, n_alt = -2
   Insn 117: point = 201, n_alt = 0
   Insn 116: point = 201, n_alt = 2
   Insn 115: point = 201, n_alt = 4
   Insn 114: point = 201, n_alt = 5
   Insn 113: point = 202, n_alt = 0
   Insn 112: point = 204, n_alt = -2
   Insn 111: point = 205, n_alt = 0
   Insn 110: point = 205, n_alt = -2
   Insn 109: point = 206, n_alt = 3
   Insn 108: point = 207, n_alt = 5
   Insn 107: point = 208, n_alt = -2
   Insn 106: point = 209, n_alt = 0
   Insn 105: point = 209, n_alt = 2
   Insn 104: point = 209, n_alt = 4
   Insn 103: point = 209, n_alt = 5
   Insn 102: point = 210, n_alt = -2
   Insn 101: point = 211, n_alt = 0
   Insn 100: point = 211, n_alt = -2
   Insn 99: point = 212, n_alt = 3
   Insn 98: point = 213, n_alt = 5
   Insn 97: point = 214, n_alt = -2
   Insn 96: point = 215, n_alt = 0
   Insn 95: point = 215, n_alt = 2
   Insn 94: point = 215, n_alt = 4
   Insn 93: point = 215, n_alt = 5
   Insn 92: point = 216, n_alt = 3
   Insn 91: point = 217, n_alt = 3
  BB 8
   Insn 84: point = 219, n_alt = -1
   Insn 83: point = 219, n_alt = 0
   Insn 82: point = 220, n_alt = 4
   Insn 81: point = 222, n_alt = -2
   Insn 80: point = 224, n_alt = 0
   Insn 324: point = 226, n_alt = -2
	Hard reg 1 is preferable by r185 with profit 1000
   Insn 79: point = 228, n_alt = 0
   Insn 323: point = 229, n_alt = -2
	Hard reg 1 is preferable by r185 with profit 1000
	Hard reg 0 is preferable by r185 with profit 1000
   Insn 78: point = 230, n_alt = -2
   Insn 77: point = 232, n_alt = 3
   Insn 76: point = 233, n_alt = 5
   Insn 75: point = 234, n_alt = 0
   Insn 74: point = 236, n_alt = -2
   Insn 73: point = 237, n_alt = 0
   Insn 72: point = 237, n_alt = -2
   Insn 71: point = 238, n_alt = 3
   Insn 70: point = 239, n_alt = 5
   Insn 69: point = 240, n_alt = -2
   Insn 68: point = 241, n_alt = 0
   Insn 67: point = 241, n_alt = 2
 r82: [235..236]
 r83: [203..204]
 r84: [189..190]
 r85: [181..182]
 r86: [173..174]
 r87: [122..124]
 r88: [119..121]
 r89: [148..150]
 r90: [145..147]
 r91: [96..98]
 r92: [93..95]
 r93: [58..59]
 r94: [30..31]
 r95: [27..28]
 r96: [231..232]
 r97: [140..141]
 r98: [166..167]
 r99: [114..115]
 r100: [219..230] [0..1]
 r101: [225..226]
 r102: [223..224]
 r103: [221..222]
 r104: [219..220]
 r105: [128..139] [2..3]
 r106: [134..135]
 r107: [132..133]
 r108: [130..131]
 r109: [128..129]
 r110: [154..165] [4..5]
 r111: [160..161]
 r112: [158..159]
 r113: [156..157]
 r114: [154..155]
 r115: [102..113] [6..7]
 r116: [108..109]
 r117: [106..107]
 r118: [104..105]
 r119: [102..103]
 r120: [58..241] [30..49]
 r121: [55..241] [25..53] [15..22]
 r122: [58..241] [25..56]
 r123: [50..51]
 r124: [47..48]
 r125: [45..46]
 r126: [58..241] [16..41]
 r127: [13..14]
 r128: [8..26]
 r129: [36..38]
 r130: [35..37]
 r131: [70..71]
 r132: [68..69]
 r133: [239..240]
 r134: [237..238]
 r135: [233..234]
 r136: [215..217]
 r137: [215..216]
 r138: [213..214]
 r139: [211..212]
 r140: [209..210]
 r141: [207..208]
 r142: [205..206]
 r143: [201..202]
 r144: [199..200]
 r145: [197..198]
 r146: [195..196]
 r147: [193..194]
 r148: [191..192]
 r149: [187..188]
 r150: [185..186]
 r151: [183..184]
 r152: [179..180]
 r153: [177..178]
 r154: [175..176]
 r155: [171..172]
 r156: [142..143]
 r157: [125..126]
 r158: [122..123]
 r159: [119..120]
 r160: [168..169]
 r161: [151..152]
 r162: [148..149]
 r163: [145..146]
 r164: [116..117]
 r165: [99..100]
 r166: [96..97]
 r167: [93..94]
 r168: [90..92]
 r169: [89..91]
 r170: [87..88]
 r171: [80..86]
 r172: [79..85]
 r173: [78..84]
 r174: [77..83]
 r175: [76..82]
 r176: [75..81]
 r177: [73..74]
 r178: [61..63]
 r179: [60..62]
 r180: [32..33]
 r182: [39..40]
 r183: [10..11]
 r184: [42..44]
 r185: [227..229]
 r186: [136..138]
 r187: [162..164]
 r188: [110..112]
 r189: [19..21]
 r190: [16..17]
 r191: [18..20]
Compressing live ranges: from 242 to 180 - 74%
Ranges after the compression:
 r82: [174..175]
 r83: [146..147]
 r84: [132..133]
 r85: [124..125]
 r86: [116..117]
 r87: [76..77]
 r88: [74..75]
 r89: [96..97]
 r90: [94..95]
 r91: [56..57]
 r92: [54..55]
 r93: [38..39]
 r94: [20..21]
 r95: [18..19]
 r96: [170..171]
 r97: [90..91]
 r98: [110..111]
 r99: [70..71]
 r100: [160..169] [0..1]
 r101: [166..167]
 r102: [164..165]
 r103: [162..163]
 r104: [160..161]
 r105: [80..89] [2..3]
 r106: [86..87]
 r107: [84..85]
 r108: [82..83]
 r109: [80..81]
 r110: [100..109] [4..5]
 r111: [106..107]
 r112: [104..105]
 r113: [102..103]
 r114: [100..101]
 r115: [60..69] [6..7]
 r116: [66..67]
 r117: [64..65]
 r118: [62..63]
 r119: [60..61]
 r120: [38..179] [20..33]
 r121: [12..179]
 r122: [16..179]
 r123: [34..35]
 r124: [32..33]
 r125: [30..31]
 r126: [38..179] [12..27]
 r127: [10..11]
 r128: [8..17]
 r129: [24..25]
 r130: [24..25]
 r131: [44..45]
 r132: [42..43]
 r133: [178..179]
 r134: [176..177]
 r135: [172..173]
 r136: [158..159]
 r137: [158..159]
 r138: [156..157]
 r139: [154..155]
 r140: [152..153]
 r141: [150..151]
 r142: [148..149]
 r143: [144..145]
 r144: [142..143]
 r145: [140..141]
 r146: [138..139]
 r147: [136..137]
 r148: [134..135]
 r149: [130..131]
 r150: [128..129]
 r151: [126..127]
 r152: [122..123]
 r153: [120..121]
 r154: [118..119]
 r155: [114..115]
 r156: [92..93]
 r157: [78..79]
 r158: [76..77]
 r159: [74..75]
 r160: [112..113]
 r161: [98..99]
 r162: [96..97]
 r163: [94..95]
 r164: [72..73]
 r165: [58..59]
 r166: [56..57]
 r167: [54..55]
 r168: [52..53]
 r169: [52..53]
 r170: [50..51]
 r171: [48..49]
 r172: [48..49]
 r173: [48..49]
 r174: [48..49]
 r175: [48..49]
 r176: [48..49]
 r177: [46..47]
 r178: [40..41]
 r179: [40..41]
 r180: [22..23]
 r182: [26..27]
 r183: [8..9]
 r184: [28..29]
 r185: [168..169]
 r186: [88..89]
 r187: [108..109]
 r188: [68..69]
 r189: [14..15]
 r190: [12..13]
 r191: [14..15]

********** Assignment #1: **********

	 Assigning to 189 (cl=INDEX_REGS, orig=189, freq=3000, tfirst=189, tfreq=3000)...
	   Assign 4 to reload r189 (freq=3000)
	Hard reg 4 is preferable by r191 with profit 1000
	Hard reg 4 is preferable by r190 with profit 500
	 Assigning to 190 (cl=INDEX_REGS, orig=190, freq=2000, tfirst=189, tfreq=3000)...
	   Assign 4 to reload r190 (freq=2000)
	Hard reg 4 is preferable by r191 with profit 2000
	 Assigning to 191 (cl=INDEX_REGS, orig=189, freq=2000, tfirst=189, tfreq=3000)...
	   Assign 4 to inheritance r191 (freq=2000)
	 Assigning to 184 (cl=GENERAL_REGS, orig=126, freq=3000, tfirst=184, tfreq=3000)...
	   Assign 40 to reload r184 (freq=3000)
	 Assigning to 185 (cl=GENERAL_REGS, orig=101, freq=3000, tfirst=185, tfreq=3000)...
	   Assign 1 to reload r185 (freq=3000)
	 Assigning to 186 (cl=GENERAL_REGS, orig=106, freq=3000, tfirst=186, tfreq=3000)...
	   Assign 1 to reload r186 (freq=3000)
	 Assigning to 187 (cl=GENERAL_REGS, orig=111, freq=3000, tfirst=187, tfreq=3000)...
	   Assign 1 to reload r187 (freq=3000)
	 Assigning to 188 (cl=GENERAL_REGS, orig=116, freq=3000, tfirst=188, tfreq=3000)...
	   Assign 1 to reload r188 (freq=3000)
	 Assigning to 182 (cl=INDEX_REGS, orig=182, freq=1000, tfirst=182, tfreq=1000)...
	   Assign 0 to reload r182 (freq=1000)
	 Assigning to 183 (cl=INDEX_REGS, orig=183, freq=1000, tfirst=183, tfreq=1000)...
	   Assign 0 to reload r183 (freq=1000)

********** Undoing inheritance #1: **********

Inherit 1 out of 1 (100.00%)

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=448, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=400, prev_offset=0)
Can eliminate 19 to 6 (offset=-32, prev_offset=-32)
changing reg in insn 74
changing reg in insn 75
changing reg in insn 112
changing reg in insn 113
changing reg in insn 133
changing reg in insn 134
changing reg in insn 144
changing reg in insn 145
changing reg in insn 155
changing reg in insn 156
changing reg in insn 177
changing reg in insn 179
changing reg in insn 179
changing reg in insn 179
changing reg in insn 181
changing reg in insn 202
changing reg in insn 204
changing reg in insn 204
changing reg in insn 204
changing reg in insn 206
changing reg in insn 225
changing reg in insn 227
changing reg in insn 227
changing reg in insn 227
changing reg in insn 229
changing reg in insn 273
changing reg in insn 275
changing reg in insn 282
changing reg in insn 284
changing reg in insn 287
changing reg in insn 290
changing reg in insn 77
changing reg in insn 78
changing reg in insn 162
changing reg in insn 163
changing reg in insn 187
changing reg in insn 188
changing reg in insn 210
changing reg in insn 211
changing reg in insn 78
changing reg in insn 86
changing reg in insn 80
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 163
changing reg in insn 171
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 168
changing reg in insn 188
changing reg in insn 196
changing reg in insn 190
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 193
changing reg in insn 211
changing reg in insn 219
changing reg in insn 213
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 215
changing reg in insn 215
changing reg in insn 216
changing reg in insn 13
changing reg in insn 268
changing reg in insn 58
changing reg in insn 46
changing reg in insn 10
changing reg in insn 2
changing reg in insn 29
changing reg in insn 26
changing reg in insn 24
changing reg in insn 18
changing reg in insn 16
changing reg in insn 14
changing reg in insn 12
changing reg in insn 3
changing reg in insn 3
changing reg in insn 24
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 36
changing reg in insn 35
changing reg in insn 34
changing reg in insn 28
changing reg in insn 27
changing reg in insn 23
changing reg in insn 22
changing reg in insn 21
changing reg in insn 20
changing reg in insn 29
changing reg in insn 30
changing reg in insn 290
changing reg in insn 299
changing reg in insn 45
changing reg in insn 47
changing reg in insn 46
changing reg in insn 49
changing reg in insn 58
changing reg in insn 60
changing reg in insn 62
changing reg in insn 63
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 75
changing reg in insn 76
changing reg in insn 91
changing reg in insn 93
changing reg in insn 92
changing reg in insn 93
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 102
changing reg in insn 103
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 113
changing reg in insn 114
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 121
changing reg in insn 123
changing reg in insn 124
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 134
changing reg in insn 135
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 142
changing reg in insn 145
changing reg in insn 146
changing reg in insn 150
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 156
changing reg in insn 157
changing reg in insn 161
changing reg in insn 162
changing reg in insn 176
changing reg in insn 177
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 186
changing reg in insn 187
changing reg in insn 201
changing reg in insn 202
changing reg in insn 203
changing reg in insn 204
changing reg in insn 205
changing reg in insn 206
changing reg in insn 209
changing reg in insn 210
changing reg in insn 224
changing reg in insn 225
changing reg in insn 226
changing reg in insn 227
changing reg in insn 228
changing reg in insn 229
changing reg in insn 230
changing reg in insn 232
changing reg in insn 231
changing reg in insn 233
changing reg in insn 235
changing reg in insn 236
changing reg in insn 237
changing reg in insn 245
changing reg in insn 238
changing reg in insn 246
changing reg in insn 239
changing reg in insn 247
changing reg in insn 240
changing reg in insn 248
changing reg in insn 241
changing reg in insn 249
changing reg in insn 242
changing reg in insn 250
changing reg in insn 256
changing reg in insn 257
changing reg in insn 267
changing reg in insn 269
changing reg in insn 268
changing reg in insn 271
changing reg in insn 279
changing reg in insn 280
changing reg in insn 41
changing reg in insn 294
deleting insn with uid = 322.
deleting insn with uid = 47.
deleting insn with uid = 62.
deleting insn with uid = 69.
deleting insn with uid = 74.
deleting insn with uid = 78.
deleting insn with uid = 324.
deleting insn with uid = 81.
deleting insn with uid = 97.
deleting insn with uid = 102.
deleting insn with uid = 107.
deleting insn with uid = 112.
deleting insn with uid = 118.
deleting insn with uid = 123.
deleting insn with uid = 128.
deleting insn with uid = 133.
deleting insn with uid = 139.
deleting insn with uid = 144.
deleting insn with uid = 150.
deleting insn with uid = 155.
deleting insn with uid = 163.
deleting insn with uid = 326.
deleting insn with uid = 166.
deleting insn with uid = 188.
deleting insn with uid = 328.
deleting insn with uid = 191.
deleting insn with uid = 211.
deleting insn with uid = 330.
deleting insn with uid = 214.
deleting insn with uid = 235.
deleting insn with uid = 247.
deleting insn with uid = 248.
deleting insn with uid = 249.
deleting insn with uid = 256.
deleting insn with uid = 269.
deleting insn with uid = 273.
deleting insn with uid = 282.
deleting insn with uid = 333.
deleting insn with uid = 334.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 50.
verify found no changes in insn with uid = 61.
verify found no changes in insn with uid = 68.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 87.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 101.
verify found no changes in insn with uid = 106.
verify found no changes in insn with uid = 111.
verify found no changes in insn with uid = 117.
verify found no changes in insn with uid = 122.
verify found no changes in insn with uid = 127.
verify found no changes in insn with uid = 132.
verify found no changes in insn with uid = 138.
verify found no changes in insn with uid = 143.
verify found no changes in insn with uid = 149.
verify found no changes in insn with uid = 154.
verify found no changes in insn with uid = 172.
verify found no changes in insn with uid = 197.
verify found no changes in insn with uid = 220.
verify found no changes in insn with uid = 234.
verify found no changes in insn with uid = 251.
verify found no changes in insn with uid = 255.
verify found no changes in insn with uid = 272.
verify found no changes in insn with uid = 281.
verify found no changes in insn with uid = 296.


createYearL

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8] 37 [r9] 40 [r12] 41 [r13] 42 [r14]
;;  ref usage 	r0={71d,67u} r1={56d,28u,3e} r2={29d,1u} r3={2d,9u} r4={41d,15u} r5={56d,30u} r6={1d,92u} r7={4d,61u} r8={27d} r9={27d} r10={27d} r11={27d} r12={27d} r13={27d} r14={27d} r15={27d} r17={63d,12u} r18={27d} r19={1d,1u,6e} r20={28d} r21={28d} r22={28d} r23={28d} r24={28d} r25={28d} r26={28d} r27={28d} r28={27d} r29={27d} r30={27d} r31={27d} r32={27d} r33={27d} r34={27d} r35={27d} r36={30d,2u} r37={29d,1u} r38={27d} r39={27d} r40={2d,10u} r41={1d,3u} r42={1d,1u} r44={27d} r45={27d} r46={27d} r47={27d} r48={27d} r49={27d} r50={27d} r51={27d} r52={27d} r53={27d} r54={27d} r55={27d} r56={27d} r57={27d} r58={27d} r59={27d} r60={27d} r61={27d} r62={27d} r63={27d} r64={27d} r65={27d} r66={27d} r67={27d} r68={27d} r69={27d} r70={27d} r71={27d} r72={27d} r73={27d} r74={27d} r75={27d} 
;;    total ref usage 2330{1988d,333u,9e} in 220{193 regular + 27 call} insns.
(note 1 0 42 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 121 122
(note 42 1 38 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 38 42 39 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [10 fReadings+0 S8 A64])
        (reg:DI 5 di [ fReadings ])) "main.c":82:55 66 {*movdi_internal}
     (nil))
(insn 39 38 2 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -432 [0xfffffffffffffe50])) [9 query+0 S8 A64])
        (reg:DI 4 si [ query ])) "main.c":82:55 66 {*movdi_internal}
     (nil))
(insn 2 39 3 2 (parallel [
            (set (reg:DI 3 bx [121])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -320 [0xfffffffffffffec0])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":82:55 191 {*adddi_1}
     (nil))
(insn 3 2 4 2 (set (reg:DI 42 r14 [122])
        (reg:DI 3 bx [121])) "main.c":82:55 66 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (symbol_ref:DI ("__asan_option_detect_stack_use_after_return") [flags 0x40]  <var_decl 0x7ffa22b503f0 __asan_option_detect_stack_use_after_return>) [11 __asan_option_detect_stack_use_after_return+0 S4 A32])
            (const_int 0 [0]))) "main.c":82:55 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 5 4 302 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 11)
            (pc))) "main.c":82:55 659 {*jcc}
     (nil)
 -> 11)
;;  succ:       5
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 121 122

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 121 122
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 302 5 6 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 6 302 7 3 (set (reg:DI 5 di)
        (const_int 256 [0x100])) "main.c":82:55 66 {*movdi_internal}
     (nil))
(call_insn 7 6 8 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__asan_stack_malloc_2") [flags 0x41]) [0  S1 A8])
            (const_int 0 [0]))) "main.c":82:55 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
        (nil))
    (expr_list (use (reg:DI 5 di))
        (nil)))
(insn 8 7 9 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax)
            (const_int 0 [0]))) "main.c":82:55 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 303 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 11)
            (pc))) "main.c":82:55 659 {*jcc}
     (nil)
 -> 11)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 121 122

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 122
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 121
(note 303 9 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 10 303 11 4 (set (reg:DI 3 bx [121])
        (reg:DI 0 ax)) "main.c":82:55 66 {*movdi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 121 122

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 121 122
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 121
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 120 123 124 125 126 129 130
(code_label 11 10 304 5 50 (nil) [2 uses])
(note 304 11 12 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 12 304 13 5 (parallel [
            (set (reg:DI 0 ax [123])
                (plus:DI (reg:DI 3 bx [121])
                    (const_int 288 [0x120])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":82:55 191 {*adddi_1}
     (nil))
(insn 13 12 14 5 (set (reg:DI 41 r13 [120])
        (reg:DI 0 ax [123])) "main.c":82:55 66 {*movdi_internal}
     (nil))
(insn 14 13 15 5 (set (mem:DI (reg:DI 3 bx [121]) [0  S8 A8])
        (const_int 1102416563 [0x41b58ab3])) "main.c":82:55 66 {*movdi_internal}
     (nil))
(insn 15 14 16 5 (set (reg/f:DI 0 ax [124])
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7ffa22b882d0 *.LC5>)) "main.c":82:55 66 {*movdi_internal}
     (nil))
(insn 16 15 17 5 (set (mem:DI (plus:DI (reg:DI 3 bx [121])
                (const_int 8 [0x8])) [0  S8 A8])
        (reg/f:DI 0 ax [124])) "main.c":82:55 66 {*movdi_internal}
     (nil))
(insn 17 16 18 5 (set (reg/f:DI 0 ax [125])
        (symbol_ref:DI ("*.LASANPC3") [flags 0x2]  <var_decl 0x7ffa22b88360 *.LASANPC3>)) "main.c":82:55 66 {*movdi_internal}
     (nil))
(insn 18 17 321 5 (set (mem:DI (plus:DI (reg:DI 3 bx [121])
                (const_int 16 [0x10])) [0  S8 A8])
        (reg/f:DI 0 ax [125])) "main.c":82:55 66 {*movdi_internal}
     (nil))
(insn 321 18 19 5 (set (reg:DI 40 r12 [126])
        (reg:DI 3 bx [121])) "main.c":82:55 66 {*movdi_internal}
     (nil))
(insn 19 321 20 5 (parallel [
            (set (reg:DI 40 r12 [126])
                (lshiftrt:DI (reg:DI 40 r12 [126])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":82:55 566 {*lshrdi3_1}
     (nil))
(insn 20 19 21 5 (set (mem:SI (plus:DI (reg:DI 40 r12 [126])
                (const_int 2147450880 [0x7fff8000])) [7  S4 A8])
        (const_int -235802127 [0xfffffffff1f1f1f1])) "main.c":82:55 67 {*movsi_internal}
     (nil))
(insn 21 20 22 5 (set (mem:SI (plus:DI (reg:DI 40 r12 [126])
                (const_int 2147450900 [0x7fff8014])) [7  S4 A8])
        (const_int -217710592 [0xfffffffff3060000])) "main.c":82:55 67 {*movsi_internal}
     (nil))
(insn 22 21 23 5 (set (mem:SI (plus:DI (reg:DI 40 r12 [126])
                (const_int 2147450904 [0x7fff8018])) [7  S4 A8])
        (const_int -202116109 [0xfffffffff3f3f3f3])) "main.c":82:55 67 {*movsi_internal}
     (nil))
(insn 23 22 40 5 (set (mem:SI (plus:DI (reg:DI 40 r12 [126])
                (const_int 2147450908 [0x7fff801c])) [7  S4 A8])
        (const_int -202116109 [0xfffffffff3f3f3f3])) "main.c":82:55 67 {*movsi_internal}
     (nil))
(note 40 23 41 5 NOTE_INSN_FUNCTION_BEG)
(insn 41 40 44 5 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [13 D.3499+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (reg:DI 0 ax [182])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "main.c":82:55 976 {stack_protect_set_di}
     (nil))
(insn 44 41 45 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [6 list+0 S8 A64])
        (const_int 0 [0])) "main.c":83:13 66 {*movdi_internal}
     (nil))
(insn 45 44 46 5 (set (reg:DI 1 dx [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [10 fReadings+0 S8 A64])) "main.c":85:5 66 {*movdi_internal}
     (nil))
(insn 46 45 48 5 (parallel [
            (set (reg:DI 0 ax [130])
                (plus:DI (reg:DI 41 r13 [120])
                    (const_int -256 [0xffffffffffffff00])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":85:5 191 {*adddi_1}
     (nil))
(insn 48 46 49 5 (set (reg:SI 4 si)
        (const_int 150 [0x96])) "main.c":85:5 67 {*movsi_internal}
     (nil))
(insn 49 48 50 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [130])) "main.c":85:5 66 {*movdi_internal}
     (nil))
(call_insn 50 49 310 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7ffa22e57300 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) "main.c":85:5 677 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 310 50 311 5 (set (pc)
        (label_ref 277)) "main.c":86:11 660 {jump}
     (nil)
 -> 277)
;;  succ:       23 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126

(barrier 311 310 283)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       23
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 283 311 53 6 65 (nil) [1 uses])
(note 53 283 54 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 312 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -404 [0xfffffffffffffe6c])) [11 i+0 S4 A32])
        (const_int 0 [0])) "main.c":87:18 67 {*movsi_internal}
     (nil))
(jump_insn 312 54 313 6 (set (pc)
        (label_ref 265)) "main.c":87:9 660 {jump}
     (nil)
 -> 265)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126

(barrier 313 312 274)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       22
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 131 132
(code_label 274 313 57 7 64 (nil) [1 uses])
(note 57 274 58 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 7 (parallel [
            (set (reg:DI 0 ax [131])
                (plus:DI (reg:DI 41 r13 [120])
                    (const_int -256 [0xffffffffffffff00])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":88:28 191 {*adddi_1}
     (nil))
(insn 59 58 60 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7ffa22b50630 *.LC4>)) "main.c":88:28 66 {*movdi_internal}
     (nil))
(insn 60 59 61 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [131])) "main.c":88:28 66 {*movdi_internal}
     (nil))
(call_insn 61 60 63 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7ffa22aecf00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) "main.c":88:28 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 63 61 314 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [3 value+0 S8 A64])
        (reg:DI 0 ax [132])) "main.c":88:28 66 {*movdi_internal}
     (nil))
(jump_insn 314 63 315 7 (set (pc)
        (label_ref 258)) "main.c":89:19 660 {jump}
     (nil)
 -> 258)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126

(barrier 315 314 260)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       20
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 82 96 100 101 102 103 104 133 134 135
(code_label 260 315 66 8 63 (nil) [1 uses])
(note 66 260 67 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 8 (set (reg:DI 5 di)
        (const_int 40 [0x28])) "main.c":91:33 66 {*movdi_internal}
     (nil))
(call_insn 68 67 70 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7ffa22d87000 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "main.c":91:33 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 70 68 71 8 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [6 years+0 S8 A64])
        (reg/f:DI 0 ax [133])) "main.c":91:33 66 {*movdi_internal}
     (nil))
(insn 71 70 72 8 (set (reg:DI 0 ax [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [3 value+0 S8 A64])) "main.c":92:24 66 {*movdi_internal}
     (nil))
(insn 72 71 73 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [134])) "main.c":92:24 66 {*movdi_internal}
     (nil))
(call_insn/i 73 72 75 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7ffa22e69600 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) "main.c":92:24 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 75 73 76 8 (set (reg:DI 0 ax [135])
        (sign_extend:DI (reg:SI 0 ax [orig:82 _1 ] [82]))) "main.c":92:22 128 {*extendsidi2_rex64}
     (nil))
(insn 76 75 77 8 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -376 [0xfffffffffffffe88])) [2 year+0 S8 A64])
        (reg:DI 0 ax [135])) "main.c":92:22 66 {*movdi_internal}
     (nil))
(insn 77 76 323 8 (set (reg/f:DI 0 ax [orig:96 _69 ] [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [6 years+0 S8 A64])) "main.c":93:29 66 {*movdi_internal}
     (nil))
(insn 323 77 79 8 (set (reg:DI 1 dx [orig:101 _78 ] [101])
        (reg:DI 0 ax [orig:100 _77 ] [100])) "main.c":93:29 66 {*movdi_internal}
     (nil))
(insn 79 323 80 8 (parallel [
            (set (reg:DI 1 dx [orig:101 _78 ] [101])
                (lshiftrt:DI (reg:DI 1 dx [orig:101 _78 ] [101])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":93:29 566 {*lshrdi3_1}
     (nil))
(insn 80 79 82 8 (parallel [
            (set (reg:DI 1 dx [orig:102 _79 ] [102])
                (plus:DI (reg:DI 1 dx [orig:101 _78 ] [101])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":93:29 191 {*adddi_1}
     (nil))
(insn 82 80 83 8 (set (reg:QI 1 dx [orig:104 _81 ] [104])
        (mem:QI (reg/f:DI 1 dx [orig:103 _80 ] [103]) [7 *_80+0 S1 A8])) "main.c":93:29 69 {*movqi_internal}
     (nil))
(insn 83 82 84 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:104 _81 ] [104])
            (const_int 0 [0]))) "main.c":93:29 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 84 83 85 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 89)
            (pc))) "main.c":93:29 659 {*jcc}
     (nil)
 -> 89)
;;  succ:       10 [100.0% (guessed)] 
;;              9 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 100 120 121 122 126

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 [0.0% (guessed)]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 100
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 100
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 85 84 86 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:100 _77 ] [100])) "main.c":93:29 66 {*movdi_internal}
     (nil))
(call_insn 87 86 88 9 (call (mem:QI (symbol_ref:DI ("__asan_report_store8") [flags 0x41]  <function_decl 0x7ffa22daaf00 __builtin___asan_report_store8>) [0 __builtin___asan_report_store8 S1 A8])
        (const_int 0 [0])) "main.c":93:29 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 88 87 89)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       8 [100.0% (guessed)] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 83 84 85 86 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155
(code_label 89 88 90 10 57 (nil) [1 uses])
(note 90 89 91 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 10 (set (reg/f:DI 0 ax [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [6 years+0 S8 A64])) "main.c":93:29 66 {*movdi_internal}
     (nil))
(insn 92 91 93 10 (set (reg:DI 1 dx [137])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -376 [0xfffffffffffffe88])) [2 year+0 S8 A64])) "main.c":93:29 66 {*movdi_internal}
     (nil))
(insn 93 92 94 10 (set (mem:DI (reg/f:DI 0 ax [136]) [2 years_37->year+0 S8 A64])
        (reg:DI 1 dx [137])) "main.c":93:29 66 {*movdi_internal}
     (nil))
(insn 94 93 95 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7ffa22b50630 *.LC4>)) "main.c":94:25 66 {*movdi_internal}
     (nil))
(insn 95 94 96 10 (set (reg:DI 5 di)
        (const_int 0 [0])) "main.c":94:25 66 {*movdi_internal}
     (nil))
(call_insn 96 95 98 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7ffa22aecf00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) "main.c":94:25 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 98 96 99 10 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [3 value+0 S8 A64])
        (reg:DI 0 ax [138])) "main.c":94:25 66 {*movdi_internal}
     (nil))
(insn 99 98 100 10 (set (reg:DI 0 ax [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [3 value+0 S8 A64])) "main.c":95:25 66 {*movdi_internal}
     (nil))
(insn 100 99 101 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [139])) "main.c":95:25 66 {*movdi_internal}
     (nil))
(call_insn 101 100 103 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("monthToNum") [flags 0x41]  <function_decl 0x7ffa22afe900 monthToNum>) [0 monthToNum S1 A8])
            (const_int 0 [0]))) "main.c":95:25 677 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 103 101 104 10 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [2 month+0 S8 A64])
        (reg:DI 0 ax [140])) "main.c":95:25 66 {*movdi_internal}
     (nil))
(insn 104 103 105 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7ffa22b50630 *.LC4>)) "main.c":96:25 66 {*movdi_internal}
     (nil))
(insn 105 104 106 10 (set (reg:DI 5 di)
        (const_int 0 [0])) "main.c":96:25 66 {*movdi_internal}
     (nil))
(call_insn 106 105 108 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7ffa22aecf00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) "main.c":96:25 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 108 106 109 10 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [3 value+0 S8 A64])
        (reg:DI 0 ax [141])) "main.c":96:25 66 {*movdi_internal}
     (nil))
(insn 109 108 110 10 (set (reg:DI 0 ax [142])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [3 value+0 S8 A64])) "main.c":97:24 66 {*movdi_internal}
     (nil))
(insn 110 109 111 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [142])) "main.c":97:24 66 {*movdi_internal}
     (nil))
(call_insn/i 111 110 113 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7ffa22e69600 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) "main.c":97:24 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 113 111 114 10 (set (reg:DI 0 ax [143])
        (sign_extend:DI (reg:SI 0 ax [orig:83 _2 ] [83]))) "main.c":97:22 128 {*extendsidi2_rex64}
     (nil))
(insn 114 113 115 10 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -360 [0xfffffffffffffe98])) [2 dayN+0 S8 A64])
        (reg:DI 0 ax [143])) "main.c":97:22 66 {*movdi_internal}
     (nil))
(insn 115 114 116 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7ffa22b50630 *.LC4>)) "main.c":98:25 66 {*movdi_internal}
     (nil))
(insn 116 115 117 10 (set (reg:DI 5 di)
        (const_int 0 [0])) "main.c":98:25 66 {*movdi_internal}
     (nil))
(call_insn 117 116 119 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7ffa22aecf00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) "main.c":98:25 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 119 117 120 10 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [3 value+0 S8 A64])
        (reg:DI 0 ax [144])) "main.c":98:25 66 {*movdi_internal}
     (nil))
(insn 120 119 121 10 (set (reg:DI 0 ax [145])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [3 value+0 S8 A64])) "main.c":99:23 66 {*movdi_internal}
     (nil))
(insn 121 120 122 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [145])) "main.c":99:23 66 {*movdi_internal}
     (nil))
(call_insn 122 121 124 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dayToNum") [flags 0x41]  <function_decl 0x7ffa22afe800 dayToNum>) [0 dayToNum S1 A8])
            (const_int 0 [0]))) "main.c":99:23 677 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 124 122 125 10 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [2 day+0 S8 A64])
        (reg:DI 0 ax [146])) "main.c":99:23 66 {*movdi_internal}
     (nil))
(insn 125 124 126 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7ffa22b50630 *.LC4>)) "main.c":100:25 66 {*movdi_internal}
     (nil))
(insn 126 125 127 10 (set (reg:DI 5 di)
        (const_int 0 [0])) "main.c":100:25 66 {*movdi_internal}
     (nil))
(call_insn 127 126 129 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7ffa22aecf00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) "main.c":100:25 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 129 127 130 10 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [3 value+0 S8 A64])
        (reg:DI 0 ax [147])) "main.c":100:25 66 {*movdi_internal}
     (nil))
(insn 130 129 131 10 (set (reg:DI 0 ax [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [3 value+0 S8 A64])) "main.c":101:22 66 {*movdi_internal}
     (nil))
(insn 131 130 132 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [148])) "main.c":101:22 66 {*movdi_internal}
     (nil))
(call_insn/i 132 131 134 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7ffa22e69600 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) "main.c":101:22 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 134 132 135 10 (set (reg:DI 0 ax [149])
        (sign_extend:DI (reg:SI 0 ax [orig:84 _3 ] [84]))) "main.c":101:20 128 {*extendsidi2_rex64}
     (nil))
(insn 135 134 136 10 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -344 [0xfffffffffffffea8])) [2 ID+0 S8 A64])
        (reg:DI 0 ax [149])) "main.c":101:20 66 {*movdi_internal}
     (nil))
(insn 136 135 137 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7ffa22b50630 *.LC4>)) "main.c":102:25 66 {*movdi_internal}
     (nil))
(insn 137 136 138 10 (set (reg:DI 5 di)
        (const_int 0 [0])) "main.c":102:25 66 {*movdi_internal}
     (nil))
(call_insn 138 137 140 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7ffa22aecf00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) "main.c":102:25 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 140 138 141 10 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [3 value+0 S8 A64])
        (reg:DI 0 ax [150])) "main.c":102:25 66 {*movdi_internal}
     (nil))
(insn 141 140 142 10 (set (reg:DI 0 ax [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [3 value+0 S8 A64])) "main.c":103:24 66 {*movdi_internal}
     (nil))
(insn 142 141 143 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [151])) "main.c":103:24 66 {*movdi_internal}
     (nil))
(call_insn/i 143 142 145 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7ffa22e69600 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) "main.c":103:24 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 145 143 146 10 (set (reg:DI 0 ax [152])
        (sign_extend:DI (reg:SI 0 ax [orig:85 _4 ] [85]))) "main.c":103:22 128 {*extendsidi2_rex64}
     (nil))
(insn 146 145 147 10 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -336 [0xfffffffffffffeb0])) [2 time+0 S8 A64])
        (reg:DI 0 ax [152])) "main.c":103:22 66 {*movdi_internal}
     (nil))
(insn 147 146 148 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7ffa22b50630 *.LC4>)) "main.c":104:25 66 {*movdi_internal}
     (nil))
(insn 148 147 149 10 (set (reg:DI 5 di)
        (const_int 0 [0])) "main.c":104:25 66 {*movdi_internal}
     (nil))
(call_insn 149 148 151 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7ffa22aecf00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) "main.c":104:25 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 151 149 152 10 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [3 value+0 S8 A64])
        (reg:DI 0 ax [153])) "main.c":104:25 66 {*movdi_internal}
     (nil))
(insn 152 151 153 10 (set (reg:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [3 value+0 S8 A64])) "main.c":105:25 66 {*movdi_internal}
     (nil))
(insn 153 152 154 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [154])) "main.c":105:25 66 {*movdi_internal}
     (nil))
(call_insn/i 154 153 156 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7ffa22e69600 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) "main.c":105:25 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 156 154 157 10 (set (reg:DI 0 ax [155])
        (sign_extend:DI (reg:SI 0 ax [orig:86 _5 ] [86]))) "main.c":105:23 128 {*extendsidi2_rex64}
     (nil))
(insn 157 156 158 10 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -328 [0xfffffffffffffeb8])) [2 count+0 S8 A64])
        (reg:DI 0 ax [155])) "main.c":105:23 66 {*movdi_internal}
     (nil))
(insn 158 157 159 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -352 [0xfffffffffffffea0])) [2 day+0 S8 A64])
            (const_int 0 [0]))) "main.c":106:19 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 159 158 160 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 184)
            (pc))) "main.c":106:19 659 {*jcc}
     (nil)
 -> 184)
;;  succ:       11 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 97 105 106 107 108 109 156
(note 160 159 161 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 161 160 162 11 (set (reg/f:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [6 years+0 S8 A64])) "main.c":107:37 66 {*movdi_internal}
     (nil))
(insn 162 161 325 11 (parallel [
            (set (reg/f:DI 0 ax [orig:97 _70 ] [97])
                (plus:DI (reg/f:DI 0 ax [156])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":107:37 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [6 years+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 325 162 164 11 (set (reg:DI 1 dx [orig:106 _83 ] [106])
        (reg:DI 0 ax [orig:105 _82 ] [105])) "main.c":107:37 66 {*movdi_internal}
     (nil))
(insn 164 325 165 11 (parallel [
            (set (reg:DI 1 dx [orig:106 _83 ] [106])
                (lshiftrt:DI (reg:DI 1 dx [orig:106 _83 ] [106])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":107:37 566 {*lshrdi3_1}
     (nil))
(insn 165 164 167 11 (parallel [
            (set (reg:DI 1 dx [orig:107 _84 ] [107])
                (plus:DI (reg:DI 1 dx [orig:106 _83 ] [106])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":107:37 191 {*adddi_1}
     (nil))
(insn 167 165 168 11 (set (reg:QI 1 dx [orig:109 _86 ] [109])
        (mem:QI (reg/f:DI 1 dx [orig:108 _85 ] [108]) [7 *_85+0 S1 A8])) "main.c":107:37 69 {*movqi_internal}
     (nil))
(insn 168 167 169 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:109 _86 ] [109])
            (const_int 0 [0]))) "main.c":107:37 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 169 168 170 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 174)
            (pc))) "main.c":107:37 659 {*jcc}
     (nil)
 -> 174)
;;  succ:       13 [100.0% (guessed)] 
;;              12 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 105 120 121 122 126

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 [0.0% (guessed)]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 105
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 105
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 170 169 171 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 171 170 172 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:105 _82 ] [105])) "main.c":107:37 66 {*movdi_internal}
     (nil))
(call_insn 172 171 173 12 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":107:37 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 173 172 174)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       11 [100.0% (guessed)] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 87 88 157 158 159
(code_label 174 173 175 13 59 (nil) [1 uses])
(note 175 174 176 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 176 175 177 13 (set (reg/f:DI 0 ax [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [6 years+0 S8 A64])) "main.c":107:37 66 {*movdi_internal}
     (nil))
(insn 177 176 178 13 (set (reg:DI 1 dx [orig:87 _6 ] [87])
        (mem:DI (plus:DI (reg/f:DI 0 ax [157])
                (const_int 24 [0x18])) [2 years_37->Dweekend+0 S8 A64])) "main.c":107:37 66 {*movdi_internal}
     (nil))
(insn 178 177 179 13 (set (reg:DI 0 ax [158])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -328 [0xfffffffffffffeb8])) [2 count+0 S8 A64])) "main.c":107:37 66 {*movdi_internal}
     (nil))
(insn 179 178 180 13 (parallel [
            (set (reg:DI 1 dx [orig:88 _7 ] [88])
                (plus:DI (reg:DI 1 dx [orig:87 _6 ] [87])
                    (reg:DI 0 ax [158])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":107:37 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (reg:DI 1 dx [orig:87 _6 ] [87])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -296 [0xfffffffffffffed8])) [2 count+0 S8 A64]))
        (nil)))
(insn 180 179 181 13 (set (reg/f:DI 0 ax [159])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [6 years+0 S8 A64])) "main.c":107:37 66 {*movdi_internal}
     (nil))
(insn 181 180 316 13 (set (mem:DI (plus:DI (reg/f:DI 0 ax [159])
                (const_int 24 [0x18])) [2 years_37->Dweekend+0 S8 A64])
        (reg:DI 1 dx [orig:88 _7 ] [88])) "main.c":107:37 66 {*movdi_internal}
     (nil))
(jump_insn 316 181 317 13 (set (pc)
        (label_ref 207)) 660 {jump}
     (nil)
 -> 207)
;;  succ:       17 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126

(barrier 317 316 184)
;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       10
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 98 110 111 112 113 114 160
(code_label 184 317 185 14 58 (nil) [1 uses])
(note 185 184 186 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 186 185 187 14 (set (reg/f:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [6 years+0 S8 A64])) "main.c":109:34 66 {*movdi_internal}
     (nil))
(insn 187 186 327 14 (parallel [
            (set (reg/f:DI 0 ax [orig:98 _71 ] [98])
                (plus:DI (reg/f:DI 0 ax [160])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":109:34 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [6 years+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 327 187 189 14 (set (reg:DI 1 dx [orig:111 _88 ] [111])
        (reg:DI 0 ax [orig:110 _87 ] [110])) "main.c":109:34 66 {*movdi_internal}
     (nil))
(insn 189 327 190 14 (parallel [
            (set (reg:DI 1 dx [orig:111 _88 ] [111])
                (lshiftrt:DI (reg:DI 1 dx [orig:111 _88 ] [111])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":109:34 566 {*lshrdi3_1}
     (nil))
(insn 190 189 192 14 (parallel [
            (set (reg:DI 1 dx [orig:112 _89 ] [112])
                (plus:DI (reg:DI 1 dx [orig:111 _88 ] [111])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":109:34 191 {*adddi_1}
     (nil))
(insn 192 190 193 14 (set (reg:QI 1 dx [orig:114 _91 ] [114])
        (mem:QI (reg/f:DI 1 dx [orig:113 _90 ] [113]) [7 *_90+0 S1 A8])) "main.c":109:34 69 {*movqi_internal}
     (nil))
(insn 193 192 194 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:114 _91 ] [114])
            (const_int 0 [0]))) "main.c":109:34 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 194 193 195 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 199)
            (pc))) "main.c":109:34 659 {*jcc}
     (nil)
 -> 199)
;;  succ:       16 [100.0% (guessed)] 
;;              15 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 110 120 121 122 126

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 [0.0% (guessed)]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 110
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 110
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 195 194 196 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 196 195 197 15 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:110 _87 ] [110])) "main.c":109:34 66 {*movdi_internal}
     (nil))
(call_insn 197 196 198 15 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":109:34 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 198 197 199)
;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       14 [100.0% (guessed)] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 89 90 161 162 163
(code_label 199 198 200 16 61 (nil) [1 uses])
(note 200 199 201 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 201 200 202 16 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [6 years+0 S8 A64])) "main.c":109:34 66 {*movdi_internal}
     (nil))
(insn 202 201 203 16 (set (reg:DI 1 dx [orig:89 _8 ] [89])
        (mem:DI (plus:DI (reg/f:DI 0 ax [161])
                (const_int 16 [0x10])) [2 years_37->Dweek+0 S8 A64])) "main.c":109:34 66 {*movdi_internal}
     (nil))
(insn 203 202 204 16 (set (reg:DI 0 ax [162])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -328 [0xfffffffffffffeb8])) [2 count+0 S8 A64])) "main.c":109:34 66 {*movdi_internal}
     (nil))
(insn 204 203 205 16 (parallel [
            (set (reg:DI 1 dx [orig:90 _9 ] [90])
                (plus:DI (reg:DI 1 dx [orig:89 _8 ] [89])
                    (reg:DI 0 ax [162])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":109:34 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (reg:DI 1 dx [orig:89 _8 ] [89])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -296 [0xfffffffffffffed8])) [2 count+0 S8 A64]))
        (nil)))
(insn 205 204 206 16 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [6 years+0 S8 A64])) "main.c":109:34 66 {*movdi_internal}
     (nil))
(insn 206 205 207 16 (set (mem:DI (plus:DI (reg/f:DI 0 ax [163])
                (const_int 16 [0x10])) [2 years_37->Dweek+0 S8 A64])
        (reg:DI 1 dx [orig:90 _9 ] [90])) "main.c":109:34 66 {*movdi_internal}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;;              13 [always] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 99 115 116 117 118 119 164
(code_label 207 206 208 17 60 (nil) [1 uses])
(note 208 207 209 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 209 208 210 17 (set (reg/f:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [6 years+0 S8 A64])) "main.c":111:30 66 {*movdi_internal}
     (nil))
(insn 210 209 329 17 (parallel [
            (set (reg/f:DI 0 ax [orig:99 _72 ] [99])
                (plus:DI (reg/f:DI 0 ax [164])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":111:30 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [6 years+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 329 210 212 17 (set (reg:DI 1 dx [orig:116 _93 ] [116])
        (reg:DI 0 ax [orig:115 _92 ] [115])) "main.c":111:30 66 {*movdi_internal}
     (nil))
(insn 212 329 213 17 (parallel [
            (set (reg:DI 1 dx [orig:116 _93 ] [116])
                (lshiftrt:DI (reg:DI 1 dx [orig:116 _93 ] [116])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":111:30 566 {*lshrdi3_1}
     (nil))
(insn 213 212 215 17 (parallel [
            (set (reg:DI 1 dx [orig:117 _94 ] [117])
                (plus:DI (reg:DI 1 dx [orig:116 _93 ] [116])
                    (const_int 2147450880 [0x7fff8000])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":111:30 191 {*adddi_1}
     (nil))
(insn 215 213 216 17 (set (reg:QI 1 dx [orig:119 _96 ] [119])
        (mem:QI (reg/f:DI 1 dx [orig:118 _95 ] [118]) [7 *_95+0 S1 A8])) "main.c":111:30 69 {*movqi_internal}
     (nil))
(insn 216 215 217 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:119 _96 ] [119])
            (const_int 0 [0]))) "main.c":111:30 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 217 216 218 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 222)
            (pc))) "main.c":111:30 659 {*jcc}
     (nil)
 -> 222)
;;  succ:       19 [100.0% (guessed)] 
;;              18 [0.0% (guessed)]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 115 120 121 122 126

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 [0.0% (guessed)]  (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 115
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 218 217 219 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 220 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:115 _92 ] [115])) "main.c":111:30 66 {*movdi_internal}
     (nil))
(call_insn 220 219 221 18 (call (mem:QI (symbol_ref:DI ("__asan_report_load8") [flags 0x41]  <function_decl 0x7ffa22daa900 __builtin___asan_report_load8>) [0 __builtin___asan_report_load8 S1 A8])
        (const_int 0 [0])) "main.c":111:30 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 221 220 222)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       17 [100.0% (guessed)] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 91 92 165 166 167 168 169 170 171 172 173 174 175 176 177
(code_label 222 221 223 19 62 (nil) [1 uses])
(note 223 222 224 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 19 (set (reg/f:DI 0 ax [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [6 years+0 S8 A64])) "main.c":111:30 66 {*movdi_internal}
     (nil))
(insn 225 224 226 19 (set (reg:DI 1 dx [orig:91 _10 ] [91])
        (mem:DI (plus:DI (reg/f:DI 0 ax [165])
                (const_int 8 [0x8])) [2 years_37->total+0 S8 A64])) "main.c":111:30 66 {*movdi_internal}
     (nil))
(insn 226 225 227 19 (set (reg:DI 0 ax [166])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -328 [0xfffffffffffffeb8])) [2 count+0 S8 A64])) "main.c":111:30 66 {*movdi_internal}
     (nil))
(insn 227 226 228 19 (parallel [
            (set (reg:DI 1 dx [orig:92 _11 ] [92])
                (plus:DI (reg:DI 1 dx [orig:91 _10 ] [91])
                    (reg:DI 0 ax [166])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":111:30 191 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (reg:DI 1 dx [orig:91 _10 ] [91])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -296 [0xfffffffffffffed8])) [2 count+0 S8 A64]))
        (nil)))
(insn 228 227 229 19 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [6 years+0 S8 A64])) "main.c":111:30 66 {*movdi_internal}
     (nil))
(insn 229 228 230 19 (set (mem:DI (plus:DI (reg/f:DI 0 ax [167])
                (const_int 8 [0x8])) [2 years_37->total+0 S8 A64])
        (reg:DI 1 dx [orig:92 _11 ] [92])) "main.c":111:30 66 {*movdi_internal}
     (nil))
(insn 230 229 231 19 (set (reg:DI 1 dx [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [6 years+0 S8 A64])) "main.c":112:24 66 {*movdi_internal}
     (nil))
(insn 231 230 232 19 (set (reg:DI 0 ax [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [6 list+0 S8 A64])) "main.c":112:24 66 {*movdi_internal}
     (nil))
(insn 232 231 233 19 (set (reg:DI 4 si)
        (reg:DI 1 dx [168])) "main.c":112:24 66 {*movdi_internal}
     (nil))
(insn 233 232 234 19 (set (reg:DI 5 di)
        (reg:DI 0 ax [169])) "main.c":112:24 66 {*movdi_internal}
     (nil))
(call_insn 234 233 236 19 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("addRec") [flags 0x3]  <function_decl 0x7ffa22b09700 addRec>) [0 addRec S1 A8])
            (const_int 0 [0]))) "main.c":112:24 677 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 236 234 237 19 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [6 list+0 S8 A64])
        (reg:DI 0 ax [170])) "main.c":112:24 66 {*movdi_internal}
     (nil))
(insn 237 236 238 19 (set (reg:DI 36 r8 [171])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -328 [0xfffffffffffffeb8])) [2 count+0 S8 A64])) "main.c":113:17 66 {*movdi_internal}
     (nil))
(insn 238 237 239 19 (set (reg:DI 5 di [172])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -336 [0xfffffffffffffeb0])) [2 time+0 S8 A64])) "main.c":113:17 66 {*movdi_internal}
     (nil))
(insn 239 238 240 19 (set (reg:DI 2 cx [173])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -360 [0xfffffffffffffe98])) [2 dayN+0 S8 A64])) "main.c":113:17 66 {*movdi_internal}
     (nil))
(insn 240 239 241 19 (set (reg:DI 1 dx [174])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [2 month+0 S8 A64])) "main.c":113:17 66 {*movdi_internal}
     (nil))
(insn 241 240 242 19 (set (reg:DI 4 si [175])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -344 [0xfffffffffffffea8])) [2 ID+0 S8 A64])) "main.c":113:17 66 {*movdi_internal}
     (nil))
(insn 242 241 243 19 (set (reg:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -432 [0xfffffffffffffe50])) [9 query+0 S8 A64])) "main.c":113:17 66 {*movdi_internal}
     (nil))
(insn 243 242 244 19 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":113:17 191 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 244 243 245 19 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [2  S8 A64])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -376 [0xfffffffffffffe88])) [2 year+0 S8 A64])) "main.c":113:17 42 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 245 244 246 19 (set (reg:DI 37 r9)
        (reg:DI 36 r8 [171])) "main.c":113:17 66 {*movdi_internal}
     (nil))
(insn 246 245 250 19 (set (reg:DI 36 r8)
        (reg:DI 5 di [172])) "main.c":113:17 66 {*movdi_internal}
     (nil))
(insn 250 246 251 19 (set (reg:DI 5 di)
        (reg:DI 0 ax [176])) "main.c":113:17 66 {*movdi_internal}
     (nil))
(call_insn 251 250 252 19 (call (mem:QI (symbol_ref:DI ("addOldest") [flags 0x41]  <function_decl 0x7ffa22afec00 addOldest>) [0 addOldest S1 A8])
        (const_int 16 [0x10])) "main.c":113:17 666 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (expr_list:DI (use (reg:DI 37 r9))
                            (nil))))))))
(insn 252 251 253 19 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":113:17 191 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 253 252 254 19 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7ffa22b50630 *.LC4>)) "main.c":114:25 66 {*movdi_internal}
     (nil))
(insn 254 253 255 19 (set (reg:DI 5 di)
        (const_int 0 [0])) "main.c":114:25 66 {*movdi_internal}
     (nil))
(call_insn 255 254 257 19 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7ffa22aecf00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) "main.c":114:25 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 257 255 258 19 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [3 value+0 S8 A64])
        (reg:DI 0 ax [177])) "main.c":114:25 66 {*movdi_internal}
     (nil))
;;  succ:       20 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 (FALLTHRU,DFS_BACK)
;;              7 [always] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 258 257 259 20 56 (nil) [1 uses])
(note 259 258 261 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 261 259 262 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -392 [0xfffffffffffffe78])) [3 value+0 S8 A64])
            (const_int 0 [0]))) "main.c":89:19 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 262 261 263 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 260)
            (pc))) "main.c":89:19 659 {*jcc}
     (nil)
 -> 260)
;;  succ:       8
;;              21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 263 262 264 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 264 263 265 21 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -404 [0xfffffffffffffe6c])) [11 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -404 [0xfffffffffffffe6c])) [11 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":87:58 190 {*addsi_1}
     (nil))
;;  succ:       22 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 (FALLTHRU,DFS_BACK)
;;              6 [always] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 93 178 179
(code_label 265 264 266 22 55 (nil) [1 uses])
(note 266 265 267 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 22 (set (reg:DI 1 dx [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [10 fReadings+0 S8 A64])) "main.c":87:25 66 {*movdi_internal}
     (nil))
(insn 268 267 270 22 (parallel [
            (set (reg:DI 0 ax [179])
                (plus:DI (reg:DI 41 r13 [120])
                    (const_int -256 [0xffffffffffffff00])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":87:25 191 {*adddi_1}
     (nil))
(insn 270 268 271 22 (set (reg:SI 4 si)
        (const_int 150 [0x96])) "main.c":87:25 67 {*movsi_internal}
     (nil))
(insn 271 270 272 22 (set (reg:DI 5 di)
        (reg:DI 0 ax [179])) "main.c":87:25 66 {*movdi_internal}
     (nil))
(call_insn 272 271 275 22 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7ffa22e57300 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) "main.c":87:25 677 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 275 272 276 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:93 _12 ] [93])
            (const_int 0 [0]))) "main.c":87:9 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 276 275 277 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 274)
            (pc))) "main.c":87:9 659 {*jcc}
     (nil)
 -> 274)
;;  succ:       7
;;              23 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 (FALLTHRU,DFS_BACK)
;;              5 [always] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 94 180
(code_label 277 276 278 23 54 (nil) [1 uses])
(note 278 277 279 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 279 278 280 23 (set (reg:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [10 fReadings+0 S8 A64])) "main.c":86:13 66 {*movdi_internal}
     (nil))
(insn 280 279 281 23 (set (reg:DI 5 di)
        (reg:DI 0 ax [180])) "main.c":86:13 66 {*movdi_internal}
     (nil))
(call_insn 281 280 284 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("feof") [flags 0x41]  <function_decl 0x7ffa22e64300 feof>) [0 feof S1 A8])
            (const_int 0 [0]))) "main.c":86:13 677 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 284 281 285 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:94 _13 ] [94])
            (const_int 0 [0]))) "main.c":86:11 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 285 284 286 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 283)
            (pc))) "main.c":86:11 659 {*jcc}
     (nil)
 -> 283)
;;  succ:       6
;;              24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 120 121 122 126

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 121 122 126
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 121 122
;; lr  def 	 17 [flags] 95 128
(note 286 285 287 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 287 286 290 24 (set (reg/f:DI 0 ax [orig:95 _29 ] [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [6 list+0 S8 A64])) "main.c":119:12 66 {*movdi_internal}
     (nil))
(insn 290 287 24 24 (set (reg/f:DI 1 dx [orig:128 <retval> ] [128])
        (reg/f:DI 0 ax [orig:95 _29 ] [95])) "main.c":119:12 66 {*movdi_internal}
     (nil))
(insn 24 290 25 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 42 r14 [122])
            (reg:DI 3 bx [121]))) "main.c":82:55 12 {*cmpdi_1}
     (nil))
(jump_insn 25 24 305 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) "main.c":82:55 659 {*jcc}
     (nil)
 -> 33)
;;  succ:       26
;;              25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 121 126 128

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 121 126 128
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 121 126
;; lr  def 	 127
(note 305 25 26 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 26 305 331 25 (set (mem:DI (reg:DI 3 bx [121]) [0  S8 A8])
        (const_int 1172321806 [0x45e0360e])) "main.c":82:55 66 {*movdi_internal}
     (nil))
(insn 331 26 27 25 (set (reg:TI 4 si [189])
        (const_wide_int 0xf5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5)) "main.c":82:55 65 {*movti_internal}
     (nil))
(insn 27 331 332 25 (set (mem:TI (plus:DI (reg:DI 40 r12 [126])
                (const_int 2147450880 [0x7fff8000])) [7  S16 A8])
        (reg:TI 4 si [189])) "main.c":82:55 65 {*movti_internal}
     (nil))
(note 332 27 28 25 NOTE_INSN_DELETED)
(insn 28 332 29 25 (set (mem:TI (plus:DI (reg:DI 40 r12 [126])
                (const_int 2147450896 [0x7fff8010])) [7  S16 A8])
        (reg:TI 4 si [190])) "main.c":82:55 65 {*movti_internal}
     (nil))
(insn 29 28 30 25 (set (reg:DI 0 ax [127])
        (mem:DI (plus:DI (reg:DI 3 bx [121])
                (const_int 248 [0xf8])) [0  S8 A8])) "main.c":82:55 66 {*movdi_internal}
     (nil))
(insn 30 29 318 25 (set (mem:QI (reg:DI 0 ax [127]) [0  S1 A8])
        (const_int 0 [0])) "main.c":82:55 69 {*movqi_internal}
     (nil))
(jump_insn 318 30 319 25 (set (pc)
        (label_ref 37)) 660 {jump}
     (nil)
 -> 37)
;;  succ:       27 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 128

(barrier 319 318 33)
;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       24
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 126 128
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 126
;; lr  def 	
(code_label 33 319 306 26 51 (nil) [1 uses])
(note 306 33 34 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 34 306 35 26 (set (mem:SI (plus:DI (reg:DI 40 r12 [126])
                (const_int 2147450880 [0x7fff8000])) [7  S4 A8])
        (const_int 0 [0])) "main.c":82:55 67 {*movsi_internal}
     (nil))
(insn 35 34 36 26 (set (mem:DI (plus:DI (reg:DI 40 r12 [126])
                (const_int 2147450900 [0x7fff8014])) [7  S8 A8])
        (const_int 0 [0])) "main.c":82:55 66 {*movdi_internal}
     (nil))
(insn 36 35 37 26 (set (mem:SI (plus:DI (reg:DI 40 r12 [126])
                (const_int 2147450908 [0x7fff801c])) [7  S4 A8])
        (const_int 0 [0])) "main.c":82:55 67 {*movsi_internal}
     (nil))
;;  succ:       27 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 128

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;;              25 [always] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 128
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 37 36 307 27 52 (nil) [1 uses])
(note 307 37 294 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 294 307 295 27 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -40 [0xffffffffffffffd8])) [13 D.3499+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (reg:DI 0 ax [183]))
        ]) "main.c":120:1 978 {stack_protect_test_di}
     (nil))
(jump_insn 295 294 308 27 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 298)
            (pc))) "main.c":120:1 659 {*jcc}
     (nil)
 -> 298)
;;  succ:       29
;;              28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 128

;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 308 295 296 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(call_insn 296 308 297 28 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7ffa22b3e700 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "main.c":120:1 666 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 297 296 298)
;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 1, flags: (RTL, MODIFIED)
;;  pred:       27
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 128
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 128
;; lr  def 	 0 [ax]
(code_label 298 297 309 29 67 (nil) [1 uses])
(note 309 298 299 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 299 309 300 29 (set (reg/i:DI 0 ax)
        (reg/f:DI 1 dx [orig:128 <retval> ] [128])) "main.c":120:1 66 {*movdi_internal}
     (nil))
(insn 300 299 320 29 (use (reg/i:DI 0 ax)) "main.c":120:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 320 300 0 NOTE_INSN_DELETED)

;; Function _sub_D_00099_0 (_sub_D_00099_0, funcdef_no=4, decl_uid=3517, cgraph_uid=26, symbol_order=30)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********


********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


_sub_D_00099_0

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={3d,1u} r5={3d,1u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d,1u} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 95{87d,8u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 4 si)
        (const_int 4 [0x4])) "main.c":120:1 66 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:DI 5 di)
        (symbol_ref:DI ("*.LASAN0") [flags 0x2]  <var_decl 0x7ffa22b9e870 *.LASAN0>)) "main.c":120:1 66 {*movdi_internal}
     (nil))
(call_insn 7 6 10 2 (call (mem:QI (symbol_ref:DI ("__asan_unregister_globals") [flags 0x41]  <function_decl 0x7ffa22db2700 __builtin___asan_unregister_globals>) [0 __builtin___asan_unregister_globals S1 A8])
        (const_int 0 [0])) "main.c":120:1 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 10 7 0 NOTE_INSN_DELETED)

;; Function _sub_I_00099_1 (_sub_I_00099_1, funcdef_no=5, decl_uid=3520, cgraph_uid=29, symbol_order=33)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) rBwBz {*call}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 7:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********


********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


_sub_I_00099_1

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={4d} r1={4d} r2={4d} r4={5d,1u} r5={5d,1u} r6={1d,2u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={3d} r18={3d} r19={1d,1u} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={4d} r37={4d} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} 
;;    total ref usage 231{221d,10u,0e} in 5{2 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 5 2 6 2 (call (mem:QI (symbol_ref:DI ("__asan_init") [flags 0x41]  <function_decl 0x7ffa22daa400 __builtin___asan_init>) [0 __builtin___asan_init S1 A8])
        (const_int 0 [0])) "main.c":120:1 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(call_insn 6 5 7 2 (call (mem:QI (symbol_ref:DI ("__asan_version_mismatch_check_v8") [flags 0x41]  <function_decl 0x7ffa22daa500 __builtin___asan_version_mismatch_check_v8>) [0 __builtin___asan_version_mismatch_check_v8 S1 A8])
        (const_int 0 [0])) "main.c":120:1 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 7 6 8 2 (set (reg:DI 4 si)
        (const_int 4 [0x4])) "main.c":120:1 66 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (symbol_ref:DI ("*.LASAN0") [flags 0x2]  <var_decl 0x7ffa22b9e870 *.LASAN0>)) "main.c":120:1 66 {*movdi_internal}
     (nil))
(call_insn 9 8 12 2 (call (mem:QI (symbol_ref:DI ("__asan_register_globals") [flags 0x41]  <function_decl 0x7ffa22db2600 __builtin___asan_register_globals>) [0 __builtin___asan_register_globals S1 A8])
        (const_int 0 [0])) "main.c":120:1 666 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 12 9 0 NOTE_INSN_DELETED)
